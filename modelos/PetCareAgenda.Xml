<?xml version="1.0" encoding="utf-8" ?>
<root nsw="PetCare">

  <item create="true"  id="1" name="TBCADGER" api="true" apiname="Registers" friendlyname="Users" modelversion="3" descriptor="Cadastro Geral de Usuários">
    <UpdateKey>Key</UpdateKey>
    <audit>true</audit>
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>SELECT CODUSU,CODATR,SRCUSU,NIVCFA,STAUSU,TIPUSU,TIPPES,CODPJU,NUMIRG,CODCMF,NOMUSU,NOMMAE,DATNAC,ATRPPE,DSCOCO,CODNAC,STAREC,DATCAD,DATUPD,UPDUSU FROM TBCADGER WHERE CODUSU=-1</SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>

    <insertcommand  webtype="[HttpPost]"  key="Key" fieldreturn="CODUSU" exceptionparamns="'DATCAD','DATUPD','CTLOPE'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="CODUSU" id="1" />
      <pre>
        <![CDATA[
IF(@CODUSU>0)
   BEGIN
     IF(EXISTS (SELECT 1 FROM TBCADGER (NOLOCK) WHERE CODUSU <> @CODUSU AND CODCMF=@CODCMF AND CODATR = @CODATR AND SRCUSU=@SRCUSU AND STAREC=1))
        SET @RETURN_VALUE = -3
   END
ELSE
   SET @RETURN_VALUE=-4
        ]]>
      </pre>
      <body>

      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADGERINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="" error="ALREADYEXISTCMF"/>
        <return value="-4" message="NAO FOI POSSIVEL INDEXAR O REGISTRO, CONSULTE O ADMINISTRADOR DE DADOS" error="FAILALL"/>
      </returns>
    </insertcommand>
    <updatecommand  webtype="[HttpPost]"  key="key" fieldreturn="CODUSU" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        SET @DATUPD=GETDATE();
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADGERUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;

        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <view>
      <item script="true" alias="A." sql="" method="" return="" procname="VWCADGER" desc ="View de Registros do Cadastro Geral">
        <query>
          <![CDATA[
SELECT A.CODUSU 
    ,A.CODATR
    ,D.DSCATR
    ,D.USELGN
    ,D.USETAR
    ,SRCUSU
    ,NOMGST = ISNULL(J.NOMUSU,'')
    ,NIVCFA
	,CNTCTA = ISNULL(K.CNTCTA,0)
	,CNTMAL = ISNULL(L.CNTMAL,0)
	,CNTCEL = ISNULL(M.CNTCEL,0)
    ,STAUSU
    ,B.DSCSTA
    ,A.TIPUSU
    ,C.DSCTUS
    ,TIPPES
    ,ISNULL(H.DSCTAB,'') AS DSCPES    
    ,CODPJU
    ,ISNULL(I.DSCTAB,'') AS DSCPJU    
    ,NUMIRG
    ,CODCMF= dbo.FormatCMF(A.CODCMF)
    ,A.NOMUSU
    ,NOMMAE
    ,DATNAC
    ,ATRPPE
    ,DSCPPE = CASE WHEN ATRPPE=1 THEN 'Sim' else 'Não' END    
    ,CTLOPE
    ,DSCOCO
    ,CODNAC
    ,DSCNAC = ISNULL(E.DSCTAB,'')
    ,A.STAREC
    ,ISNULL(G.DSCTAB,'') AS DSCREC    
    ,A.DATCAD
    ,A.DATUPD
    ,A.UPDUSU
    ,LGNUSU = ISNULL(F.LGNUSU,'') 
  FROM TBCADGER (NOLOCK) A
 INNER JOIN TBCADSTA (NOLOCK) B ON (B.CODSTA = A.STAUSU)
 INNER JOIN TBTIPUSU (NOLOCK) C ON (C.TIPUSU = A.TIPUSU)
 INNER JOIN TBTIPATR (NOLOCK) D ON (D.CODATR = A.CODATR)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB=1 AND E.KEYCOD= A.CODNAC)
  LEFT JOIN TBLGNUSU (NOLOCK) F ON (F.CODUSU = A.UPDUSU AND F.REGATV=1)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB=7 AND G.KEYCOD= A.STAREC)
 INNER JOIN TBTABGER (NOLOCK) H ON (H.NUMTAB=13 AND H.KEYTXT= A.TIPPES)
 INNER JOIN TBTABGER (NOLOCK) I ON (I.NUMTAB=8 AND I.KEYTXT= A.CODPJU)          
  LEFT JOIN (SELECT CODUSU = USUPRO, NOMUSU = B1.NOMUSU + ' - ' + C1.DSCPRO
FROM TBUSUPRO (NOLOCK) A1
INNER JOIN TBCADGER (NOLOCK) B1 ON (B1.CODUSU = A1.CODUSU)
INNER JOIN TBCADPRO (NOLOCK) C1 ON (C1.CODPRO = A1.CODPRO)) J ON (J.CODUSU = A.SRCUSU)           
 LEFT JOIN (SELECT CODUSU, CNTCTA= COALESCE(COUNT(*),0 ) FROM TBCADCTA (NOLOCK) WHERE ORGCTA IN (1,3,4) AND STACTA=250 AND STAREC=1 GROUP BY CODUSU) K ON (K.CODUSU = A.CODUSU)         
 LEFT JOIN (SELECT CODUSU, CNTMAL = COALESCE(COUNT(*),0) FROM TBCADEND (NOLOCK) WHERE STAREC=1 AND TIPEND=3 AND REGATV=1 GROUP BY CODUSU) L ON (L.CODUSU=A.CODUSU)
 LEFT JOIN (SELECT CODUSU, CNTCEL = COALESCE(COUNT(*),0) FROM TBCADCTO (NOLOCK) WHERE STAREC=1 AND TIPCTO=3 AND REGATV=1 GROUP BY CODUSU) M ON (M.CODUSU=A.CODUSU)
        ]]>
        </query>
      </item>
    </view>


    <selectcommand>
      <item script="true" alias="A." sql=""  processcode="100" method="Select" return="Users" procname="PRCADGERSEL" desc ="Seleciona o registro de acordo com o Código do Usuário">
        <query>
          <![CDATA[SELECT * FROM TBCADGER (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Usuario" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
      <item script="false" alias="A." sql="" processcode="105" method="GetDefaultLoginName" return="string" procname="" desc ="Obtêm o nome de login default do aplicativo">
        <query>
          <![CDATA[SELECT dbo.GetLoginName(@NOMUSU)]]>
        </query>
        <parameters>
          <parameter input="true" apply="false" desc ="Nome do Usuário" name="NOMUSU" type="System.String" default="" output="" null="false"/>
        </parameters>
      </item>

    </selectcommand>


    <transfercommand>
      <item script="true" alias="A." sql="" method="" return="QueryUsers" procname="" desc ="Obtêm os registros e vinculos do Cadastro Geral">
        <query>
          <![CDATA[
SELECT top 1 A.CODUSU 
    ,A.CODATR
    ,D.DSCATR
    ,D.USELGN
    ,D.USETAR    
    ,SRCUSU
    ,NOMGST = ISNULL(J.NOMUSU,'')    
    ,CNTCTA = CAST(0 AS TINYINT)
    ,CNTMAL = CAST(0 AS TINYINT)    
    ,CNTCEL = CAST(0 AS TINYINT)        
    ,NIVCFA
    ,STAUSU
    ,B.DSCSTA
    ,A.TIPUSU
    ,C.DSCTUS
    ,TIPPES
    ,ISNULL(H.DSCTAB,'') AS DSCPES    
    ,CODPJU
    ,ISNULL(I.DSCTAB,'') AS DSCPJU    
    ,NUMIRG
    ,CODCMF
    ,A.NOMUSU
    ,NOMMAE
    ,DATNAC
    ,ATRPPE
    ,DSCPPE = CASE WHEN ATRPPE=1 THEN 'Sim' else 'Não' END    
    ,CTLOPE
    ,DSCOCO
    ,CODNAC
    ,DSCNAC = ISNULL(E.DSCTAB,'')
    ,A.STAREC
    ,ISNULL(G.DSCTAB,'') AS DSCREC    
    ,A.DATCAD
    ,A.DATUPD
    ,A.UPDUSU
    ,LGNUSU = ISNULL(F.LGNUSU,'') 
  FROM TBCADGER (NOLOCK) A
 INNER JOIN TBCADSTA (NOLOCK) B ON (B.CODSTA = A.STAUSU)
 INNER JOIN TBTIPUSU (NOLOCK) C ON (C.TIPUSU = A.TIPUSU)
 INNER JOIN TBTIPATR (NOLOCK) D ON (D.CODATR = A.CODATR)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB=1 AND E.KEYCOD= A.CODNAC)
  LEFT JOIN TBLGNUSU (NOLOCK) F ON (F.CODUSU = A.SRCUSU)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB=7 AND G.KEYCOD= A.STAREC)
 INNER JOIN TBTABGER (NOLOCK) H ON (H.NUMTAB=13 AND H.KEYTXT= A.TIPPES)
 INNER JOIN TBTABGER (NOLOCK) I ON (I.NUMTAB=8 AND I.KEYTXT= A.CODPJU)          
  LEFT JOIN (SELECT CODUSU = USUPRO, NOMUSU = B1.NOMUSU + ' - ' + C1.DSCPRO
FROM TBUSUPRO (NOLOCK) A1
INNER JOIN TBCADGER (NOLOCK) B1 ON (B1.CODUSU = A1.CODUSU)
INNER JOIN TBCADPRO (NOLOCK) C1 ON (C1.CODPRO = A1.CODPRO)) J ON (J.CODUSU = A.SRCUSU)           
]]>
        </query>
      </item>
    </transfercommand>

  </item>


  <item create="true"  id="2" name="TBLGNUSU" friendlyname="LoginUser" modelversion="3" descriptor="Login de Usuário">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Identity" fieldreturn="LGNNUM" exceptionparamns="'DATCAD','DATUPD','LGNTYP','ULTACE'" method="Insert">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @RETURN_VALUE = 0      
DECLARE @LGNTYP TINYINT=1;

IF(@LGNUSU='')
   SET @RETURN_VALUE=-2;

IF(@RETURN_VALUE=0)
  BEGIN
    IF(@CODUSU<=0)
       SET @RETURN_VALUE=-7;
  END
IF(@RETURN_VALUE=0)
  BEGIN
    IF(NOT EXISTS(SELECT 1 FROM TBCADGER (NOLOCK) WHERE CODUSU=@CODUSU))
       SET @RETURN_VALUE=-7;
  END

IF(@RETURN_VALUE=0)
  BEGIN
    IF(LEN(@LGNUSU)<3)
       SET @RETURN_VALUE=-3;
  END

IF(@RETURN_VALUE=0)
  BEGIN
    IF(@PSWUSU='')
       SET @RETURN_VALUE=-5;
  END

IF(@RETURN_VALUE=0)
   BEGIN
      IF(EXISTS( SELECT 1 FROM TBLGNUSU (NOLOCK) WHERE CODUSU<>@CODUSU AND LGNTYP=@LGNTYP AND LGNUSU=@LGNUSU ))
        SET @RETURN_VALUE=-4;
   END        

IF(@RETURN_VALUE=0)
   BEGIN
      IF(EXISTS( SELECT 1 FROM TBLGNUSU (NOLOCK) WHERE CODUSU=@CODUSU AND LGNTYP=@LGNTYP AND PSWUSU=@PSWUSU ))
        SET @RETURN_VALUE=-6;
   END        
     ]]>

      </pre>
      <body>
      </body>
      <pos>
        <![CDATA[
    IF(@RETURN_VALUE>0 AND @REGATV=1 AND @STAREC=1)
              BEGIN
                UPDATE TBLGNUSU
                   SET REGATV = 0
                 WHERE CODUSU = @CODUSU
                   AND LGNTYP = @LGNTYP
                   AND LGNNUM <> @RETURN_VALUE
                   AND STAREC = 1
                   AND REGATV = 1
              END
      ]]>

      </pos>
      <returns>
        <return value="0" operator=">" message="LOGIN INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =1;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRLGNUSUINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="LOGINBLANK"/>
        <return value="-3" message="" error="INVALID_LOGIN"/>
        <return value="-4" message="" error="LOGINALREADYEXISTS"/>
        <return value="-5" message="" error="PASSWORDEMPTY"/>
        <return value="-6" message="" error="PASSOWRDALREADYEXISTS"/>
        <return value="-7" message="" error="INVALIDUSER"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="LGNNUM" exceptionparamns="'DATCAD','ULTACE','LGNTYP'" method="Update">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();
SET @RETURN_VALUE = 0;
DECLARE @LGNTYP TINYINT=1;

IF(@LGNUSU='')
   SET @RETURN_VALUE=-2;
   
IF(@RETURN_VALUE=0)
  BEGIN
    IF(LEN(@LGNUSU)<3)
       SET @RETURN_VALUE=-3;
  END

IF(@RETURN_VALUE=0)
  BEGIN
    IF(@PSWUSU='')
       SET @RETURN_VALUE=-5;
  END

IF(@RETURN_VALUE=0)
   BEGIN
      IF(EXISTS( SELECT 1 FROM TBLGNUSU (NOLOCK) WHERE CODUSU<>@CODUSU AND LGNTYP=@LGNTYP AND LGNUSU=@LGNUSU ))
        SET @RETURN_VALUE=-4;
   END        

IF(@RETURN_VALUE=0)
   BEGIN
      IF(EXISTS( SELECT 1 FROM TBLGNUSU (NOLOCK) WHERE CODUSU=@CODUSU AND LGNTYP=@LGNTYP AND PSWUSU=@PSWUSU ))
        SET @RETURN_VALUE=-6;
   END        
      
      ]]>


      </pre>
      <body>
      </body>
      <pos>
        <![CDATA[
    IF(@RETURN_VALUE>0 AND @REGATV=1 AND @STAREC=1)
              BEGIN
                UPDATE TBLGNUSU
                   SET REGATV = 0
                 WHERE CODUSU = @CODUSU
                   AND LGNTYP = @LGNTYP
                   AND LGNNUM <> @RETURN_VALUE
                   AND STAREC = 1
                   AND REGATV = 1
              END
      ]]>

      </pos>
      <returns>
        <return value="0" operator=">" message="LOGIN ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =2;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRLGNUSUUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="LOGINBLANK"/>
        <return value="-3" message="" error="INVALID_LOGIN"/>
        <return value="-4" message="" error="LOGINALREADYEXISTS"/>
        <return value="-5" message="" error="PASSWORDEMPTY"/>
        <return value="-6" message="" error="PASSOWRDALREADYEXISTS"/>
      </returns>
    </updatecommand>

    <objectclass>
      <item script="true" alias="A." sql="" method="MyCards" return="int" returnmode="1" procname="" desc ="Objeto de Retenção de Informações de Cartões Associados ao usuário" returnvalue="1">
        <query>
          <![CDATA[
SELECT TOP 1 CODCRT, NUMCRT FROM TBREGCRT (NOLOCK) A
        ]]>

        </query>
      </item>
    </objectclass>

    <selectcommand>
      <item script="true" alias="A." sql="" method="Select" return="LoginUser" procname="PRLGNUSUSEL" desc ="Obtêm o registro de Login do Usuário">
        <query><![CDATA[SELECT * FROM TBLGNUSU (NOLOCK) A]]></query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID de Registro de Login" name="LGNNUM" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
      </item>
      <item script="true" alias="A." sql="" method="Get" return="LoginUser" procname="PRLGNUSUGET" desc ="Obtêm o registro de Login Ativo do Usuário">
        <query><![CDATA[SELECT * FROM TBLGNUSU (NOLOCK) A WHERE STAREC=1 AND REGATV=1]]></query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
      </item>

    </selectcommand>

    <methods>
      <item webtype="[HttpGet]" script="true" alias="A." sql="" method="GetAccessControl"  type ="Internal" return="AccessControl" procname="PRLGNUSUACECTL" desc ="Obtêm o registro de controle de acesso do usuário">
        <body>
          <![CDATA[return IGetAccessControl(pLGNNUM);]]>
        </body>
        <!--<querymapping>
          <![CDATA[
Query<AccessControl>("PRLGNUSUACECTL",
                            new[]
                            {
                                typeof(AccessControl),
                                typeof(VirtualAccount),
                                typeof(GeneralRegistry),
                                typeof(ActiveCards),
                                typeof(AddressBook)
                            },
                            objects =>
                            {
                                var ac = objects[0] as AccessControl;
                                var va = objects[1] as VirtualAccount;
                                var us = objects[2] as GeneralRegistry;
                                var cr = objects[3] as ActiveCards;
                                var ad = objects[4] as AddressBook;


                                RETURN_VALUE.Account = va;
                                RETURN_VALUE.Address = ad;
                                RETURN_VALUE.User = us;
                                RETURN_VALUE.Cards.Add(cr);
                                return ac;
                            },
                                                splitOn: "nidcta,codusu, codcrt,codend", @P@,commandType: CommandType.StoredProcedure, commandTimeout: 120 );          
                          RETURN_VALUE.IsValid=true;                      
         
        ]]>

        </querymapping>-->
        <query>
          <![CDATA[
    SELECT ResetPassword = CAST (CASE WHEN RSTPSW=1 THEN 1 ELSE 0 END AS BIT)
          ,IsPointOfSale = CAST(0 AS BIT)
          ,IsTedApproval = CAST(0 AS BIT)
          ,LGNNUM
          ,IsAdministrator = CAST(CASE WHEN (B.TIPUSU = 1) THEN 1 ELSE 0 END AS BIT)
		  ,IsSuperVisor = CAST(CASE WHEN (B.TIPUSU = 2) THEN 1 ELSE 0 END AS BIT)
          ,IsManagerProduct = CAST( CASE WHEN (B.TIPUSU = 3 OR ISNULL(C.CODUSU,0) = A.CODUSU) THEN 1 ELSE 0 END AS BIT)
   	      ,Mail = ISNULL(F.DSCEND, '')
          ,Mobile = ISNULL(G.NUMCEL, '')
      FROM TBLGNUSU (NOLOCK) A
      LEFT JOIN (SELECT CODUSU, TIPUSU FROM TBCADGER (NOLOCK) WHERE STAUSU=61) B ON (B.CODUSU = A.CODUSU)
      LEFT JOIN (SELECT DISTINCT CODUSU FROM TBUSUPRO (NOLOCK) WHERE STAREC=1) C ON (C.CODUSU = A.CODUSU)
      LEFT JOIN (SELECT TOP 1 CODUSU, DSCEND FROM TBCADEND (NOLOCK) WHERE TIPEND=3 AND STAREC=1 AND REGATV=1) F ON (F.CODUSU = A.CODUSU)
      LEFT JOIN (SELECT TOP 1 CODUSU, NUMCEL =NUMDDD + NUMTEL FROM TBCADCTO (NOLOCK) WHERE TIPCTO=3 AND STAREC=1 AND REGATV=1) G ON (G.CODUSU = A.CODUSU)
     WHERE (A.STAREC=1 AND A.REGATV=1)

]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID de Registro de Login" name="LGNNUM" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
      </item>
      <item  webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="Logoff" return="int" returnmode="4" procname="" desc ="Efetua o logoff de um usuario" returnvalue="0" remarks="">
        <query/>
        <body>
          RETURN_VALUE = pLGNNUM;
          LoginUser model = Select(pLGNNUM);
          if(this.Found)
          {
          Auditing audit = new Auditing();
          audit.UPDUSU =model.CODUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =6;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "Application";
          audit.AUDSRC ="";
          audit.AUDCHG ="EFETUOU LOGOFF DO APLICATIVO EM " + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
          }
          else
          RETURN_VALUE=-1;
          model=null;

        </body>
        <parameters>
          <parameter input="true" desc ="ID do Logon" name="LGNNUM" type="System.Int32" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" operator=">" message="LOGOFF EFETUADO COM SUCESSO" error="OK">
          </return>
          <return value="-1" message="" error="LOGINCANNOTBEREAD"/>
        </returns>
      </item>
      <item  webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="Login" return="int" returnmode="2" procname="PRLGNUSULOG" desc ="Efetua um login com base nas credenciais de acesso" returnvalue="0" remarks="">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0        
DECLARE @LGNNUM INT=0
DECLARE @CODUSU INT=0
DECLARE @AUDCHG VARCHAR(100)
/* login name */
IF(@LGNTYP=1)
   BEGIN
       SELECT @LGNNUM = LGNNUM, @CODUSU=CODUSU FROM TBLGNUSU (NOLOCK) WHERE LGNUSU = @LGNUSU AND PSWUSU = @PSWUSU AND STAREC = 1 AND REGATV = 1
   END

/*email*/
IF(@LGNTYP=3)
   BEGIN
		    SELECT @LGNNUM = LGNNUM, @CODUSU=L.CODUSU FROM TBLGNUSU (NOLOCK) L 
         INNER JOIN TBCADEND (NOLOCK) E ON (E.CODUSU = L.CODUSU)
        WHERE (E.DSCEND = @LGNUSU AND  E.TIPEND = 3 AND E.REGATV=1 AND E.STAREC=1)
          AND (L.PSWUSU = @PSWUSU AND L.STAREC = 1 AND L.REGATV = 1)
   END 
/* cmf */
IF(@LGNTYP=2)
   BEGIN
		    SELECT @LGNNUM = LGNNUM,@CODUSU=L.CODUSU
         FROM TBLGNUSU (NOLOCK) L
	      INNER JOIN TBCADGER (NOLOCK) A ON (A.CODUSU = L.CODUSU)
        WHERE (A.CODCMF = @LGNUSU AND  A.STAUSU =61 AND A.STAREC=1 AND L.PSWUSU = @PSWUSU)
          AND (L.STAREC = 1 AND L.REGATV = 1)
   END 

/* cartão */
IF(@LGNTYP=4)
   BEGIN
	    SELECT @LGNNUM = LGNNUM, @CODUSU=L.CODUSU
        FROM TBLGNUSU (NOLOCK) L
       INNER JOIN TBREGCRT (NOLOCK) C1 ON (C1.ASSUSU = L.CODUSU)
       INNER JOIN TBCADCRT (NOLOCK) C2 ON (C2.CODCRT = C1.CODCRT)
       WHERE (     C1.NUMCRT = @LGNUSU AND  C1.STACRT=109 AND C1.STAREC = 1 
	            AND C2.PSWCRT = @PSWUSU)
         AND (L.STAREC = 1 AND L.REGATV = 1)
   END

SET @LGNNUM = ISNULL(@LGNNUM,0) ;
IF(@LGNNUM>0)
  BEGIN
      UPDATE TBLGNUSU SET RSTPSW = CASE WHEN (RSTPSW=1) THEN 2 ELSE RSTPSW END, ULTACE = GETDATE(), NUMACE = NUMACE + 1 WHERE LGNNUM=@LGNNUM 
      SET @RETURN_VALUE=@LGNNUM
  END
ELSE
    SET @RETURN_VALUE=-2;
    
    
IF(@RETURN_VALUE>0)
    BEGIN
        SET @AUDCHG = N'O usuário efetuow o login pelo ' + CASE   
                 WHEN (@LGNTYP) = 1 THEN ' LOGIN NAME'   
                 WHEN (@LGNTYP) = 2 THEN ' CMF '   
                 WHEN (@LGNTYP) = 3 THEN ' EMAIL '  
                 WHEN (@LGNTYP) = 4 THEN ' CARTAO ' END  + @LGNUSU                    
  INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY,  AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                VALUES (@CODUSU, GETDATE(),      2, @CODUSU,        5, OBJECT_NAME(@@PROCID),     '', @AUDCHG)        
    END
    
   
RETURN @RETURN_VALUE;   
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Tipo de Acesso" name="LGNTYP" type="System.Byte" default="" output="" null="false"/>
          <parameter input="true" desc ="Login" name="LGNUSU" type="System.String" size="50"  default="" output="" null="false"/>
          <parameter input="true" desc ="Senha" name="PSWUSU" type="System.String" size="512" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" operator=">" message="LOGIN EFETUADO COM SUCESSO" error="OK">
          </return>
          <return value="-1" message="" error="LOGINCREDENTIALNEEDRESET"/>
          <return value="-2" message="" error="USERNOTFOUND"/>
        </returns>
      </item>

      <item  webtype="[HttpGet]" responsemode="1" script="true" alias="A." sql="" method="NeedRefresh" return="int" returnmode="2" procname="PRLGNUSUREF" desc ="Verifica se o usuario precisa fazer um refresh de senha" returnvalue="0" remarks="">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0        
BEGIN
    IF(EXISTS(SELECT 1 FROM TBLGNUSU (NOLOCK)  WHERE LGNNUM=@LGNNUM AND RSTPSW IN (1,2) AND STAREC = 1 AND REGATV = 1))
         SET @RETURN_VALUE=1;
    ELSE
         SET @RETURN_VALUE=-1
END
RETURN @RETURN_VALUE;   
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="ID do Login" name="LGNNUM" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="NAO FOI POSSIVEL EFETUAR A VERIFICACAO" error=""/>
          <return value="0" operator=">" message="VERIFICACAO EFETUADA COM SUCESSO" error=""/>
          <return value="-1" message="" error="USERNOTFOUND"/>
        </returns>
      </item>

      <item  webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="ChangePassword" return="int" returnmode="2" procname="PRLGNUSUCHGPSW" desc ="Efetua um login com base nas credenciais de acesso" returnvalue="0" remarks="Códigos de Retorno@          [-1]= O Usuário deverá fazer o reset de senha@          [-2] = Usuário não existente@          [>0] = Id de Registro de Login">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0        
DECLARE @LGNNUM INT=0
DECLARE @CODUSU INT=0
DECLARE @DATUPD DATETIME = GETDATE();

/* VERIFICA A SENHA ANTERIOR */
BEGIN
  SELECT @LGNNUM = ISNULL(LGNNUM,0)
        ,@CODUSU = ISNULL(CODUSU,0)
    FROM TBLGNUSU (NOLOCK) 
	 WHERE LGNUSU = @LGNUSU
	   AND PSWUSU = @PSWOLD
	   AND STAREC = 1
     AND REGATV = 1
END

IF(@LGNNUM=0)
   BEGIN
       SET @RETURN_VALUE=-7;
   END
IF(@RETURN_VALUE=0)
   BEGIN
      IF(EXISTS (SELECT 1 
                   FROM TBLGNUSU (NOLOCK) 
	                WHERE LGNUSU = @LGNUSU
	                  AND PSWUSU = @PSWUSU
                    AND CODUSU = @CODUSU
	                  AND STAREC = 1
                    AND REGATV = 1))
          SET @RETURN_VALUE=-6
   END          
 
  EXEC dbo.PRLGNUSUUPD @LGNNUM, @CODUSU, 1, @LGNUSU, @PSWUSU, 0,1,@DATUPD,@CODUSU, @RETURN_VALUE OUTPUT;  
  
RETURN @RETURN_VALUE;   
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Login" name="LGNUSU" type="System.String" size="50"  default="" output="" null="false"/>
          <parameter input="true" desc ="Senha Anterior" name="PSWOLD" type="System.String" size="255" default="" output="" null="false"/>
          <parameter input="true" desc ="Senha" name="PSWUSU" type="System.String" size="255" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" operator=">" message="SENHA ALTERADA COM SUCESSO" error="OK">

            LoginUser model = Select(@RETURN_VALUE);
            if(this.Found)
            {
            Auditing audit = new Auditing();
            audit.UPDUSU =model.UPDUSU;
            audit.AUDDAT=DateTime.Now;
            audit.AUDKEY =KeyTableId;
            audit.AUDIDR =RETURN_VALUE;
            audit.AUDIMS =3;
            audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
            audit.AUDOBJ = "PRLGNUSUCHGPSW";
            audit.AUDSRC =String.Format("'{0}':'{1}'","PSWUSU", pPSWOLD);
            audit.AUDCHG =String.Format("'{0}':'{1}'","PSWUSU", pPSWUSU);
            audit.NIDTOK =0;
            audit.NUMIPA =Environment.MachineName;
            _AUDNUM=WriteAuditing.Insert(audit);
            respond.Logged=_AUDNUM>0;
            }
            model=null;

          </return>

          <return value="-1" message="" error="FAILALL"/>
          <return value="-2" message="" error="LOGINBLANK"/>
          <return value="-3" message="" error="INVALID_LOGIN"/>
          <return value="-4" message="" error="LOGINALREADYEXISTS"/>
          <return value="-5" message="" error="PASSWORDEMPTY"/>
          <return value="-6" message="" error="PASSOWRDALREADYEXISTS"/>
          <return value="-7" operator="==" message="LOGIN NAO EXISTE" error=""/>



        </returns>
      </item>




      <item  webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="ResetPassword" return="int" returnmode="2" procname="PRLGNUSURSTPSW" desc ="Efetua um login com base nas credenciais de acesso" returnvalue="0" remarks="">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0        
DECLARE @CODUSU INT=0

IF(@LGNNUM<=0)
   SET @RETURN_VALUE=-1

IF(@RETURN_VALUE=0)
  BEGIN
    IF(@PSWUSU='')
        SET @RETURN_VALUE=-2
  END

IF(@RETURN_VALUE=0)
  BEGIN
    IF(LEN(@PSWUSU)<3)
        SET @RETURN_VALUE=-3
  END
  
IF(@RETURN_VALUE=0)
  BEGIN
    IF(@UPDUSU<=0)
        SET @RETURN_VALUE=-4
  END
  
IF(@RETURN_VALUE=0)
  BEGIN
    IF(NOT EXISTS(SELECT 1 FROM TBLGNUSU (NOLOCK) WHERE LGNNUM=@LGNNUM AND STAREC=1 AND REGATV=1))
        BEGIN
            SET @RETURN_VALUE = -5
        END
  END


IF(@RETURN_VALUE=0)
  BEGIN
     UPDATE TBLGNUSU SET PSWUSU=@PSWUSU, RSTPSW=0, UPDUSU=@UPDUSU, DATUPD=GETDATE() WHERE LGNNUM=@LGNNUM
     IF(@@ERROR<>0)
        SET @RETURN_VALUE=-6
     ELSE
        SET @RETURN_VALUE=@LGNNUM
  END        
 
RETURN @RETURN_VALUE;   
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Login" name="LGNNUM" type="System.Int32"  default="" output="" null="false"/>
          <parameter input="true" desc ="Senha" name="PSWUSU" type="System.String" size="512" default="" output="" null="false"/>
          <parameter input="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="-1" message="" error="LOGINBLANK"/>
          <return value="-2" message="" error="PASSWORDEMPTY"/>
          <return value="-3" message="" error="PASSWORDINVALIDLEN"/>
          <return value="-4" message="" error="REQUIREDUSEROPERATION"/>
          <return value="-5" message="" error="USERNOTFOUND"/>
          <return value="-6" message="FALHA DE ATUALIZAÇÃO, TENTE NOVAMENTE MAIS TARDE" error="FAILALL"/>
        </returns>
      </item>
    </methods>

  </item>

  <item create="true"  id="3" name="TBAUDDAT" friendlyname="Auditing" modelversion="3" descriptor="Auditoria">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Identity" fieldreturn="LGNNUM" exceptionparamns="'DATCAD','DATUPD'" method="Insert">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
     ]]>

      </pre>
      <body>
      </body>
      <pos>
        <![CDATA[
      ]]>

      </pos>
      <returns>
      </returns>
    </insertcommand>
  </item>

  <item create="true"  id="4" name="TBTABGER" friendlyname="GeneralTable" modelversion="3" descriptor="Tabela Geral do Sistema">
    <FilterSelect>True</FilterSelect>
    <listselect></listselect>
    <CSharpPartial>False</CSharpPartial>
    <SqlTable></SqlTable>
    <extendedmodel>
      <![CDATA[
SELECT TOP 1 A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
  FROM TBTABGER (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)    
    ]]>
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="GeneralTable" procname="" desc ="Seleciona o registro de acordo com o id de registro da tabela geral">
        <query>
          <![CDATA[
SELECT A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
  FROM TBTABGER (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID de Registro da Tabela" name="KEYTAB" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
    <selectallcommand>
      <item script="true" alias="A." sql="" processcode="105" method="List" type="list" return="GeneralTable" procname="PRTABGERCOD" desc ="Seleciona todos os registros de um Tipo de tabela informado">
        <query order="A.KEYCOD">
          <![CDATA[
SELECT A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
  FROM TBTABGER (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)          
WHERE A.STAREC NOT IN (0,13)  
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código da Tabela de Acesso" name="NUMTAB" type="System.Int32" default="" output="" null="true"/>
        </parameters>
      </item>
    </selectallcommand>
    <methods>
      <item webtype="[HttpGet]" responsemode="1" processcode="200" script="true" alias="A." sql="" method="FindKey" return="int" returnmode="5" procname="PRTABGERFNDKEY" desc ="Obtêm o Id de Registro de uma Tabela Geral Baseada no Código Chave da Tabela" returnvalue="0">
        <query merge="true">
          <![CDATA[SELECT COALESCE(ISNULL(KEYTAB,0),0) AS KEYTAB FROM TBTABGER (NOLOCK) A WHERE STAREC NOT IN (0,13)]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Código do Tabela" name="NUMTAB" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" desc ="Código Numérico da Chave" name="KEYCOD" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
      <item webtype="[HttpGet]" responsemode="1" processcode="205" script="true" alias="A." sql="" method="FindKeyText" return="int" returnmode="5" procname="PRTABGERFNDTXT" desc ="Obtêm o Id de Registro de uma Tabela Geral Baseada no Código Chave Texto da Tabela" returnvalue="0">
        <query merge="true">
          <![CDATA[SELECT COALESCE(ISNULL(KEYTAB,0),0) AS KEYTAB FROM TBTABGER (NOLOCK) A WHERE STAREC NOT IN (0,13)]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Código do Tabela" name="NUMTAB" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" desc ="Código Texto da Chave" name="KEYTXT" type="System.String" default="" output="" null="false"/>
        </parameters>
      </item>
    </methods>
    <insertcommand key="Identity" fieldreturn="KEYTAB" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert" processcode="010">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF(@DSCTAB!='')
  BEGIN
    IF(EXISTS(SELECT 1 FROM TBTABGER (NOLOCK) WHERE KEYCOD=@KEYCOD AND KEYTXT=@KEYTXT AND DSCTAB=@DSCTAB))
       SET @RETURN_VALUE=-2
  END
      ]]>

      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTABGERINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="A Tabela já contem um registro com a chave informada" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="KEYTAB" exceptionparamns="'DATCAD'" procname="" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTABGERUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>
  </item>
  <item create="true"  id="5" name="TBTIPATR" friendlyname="AttributeType" modelversion="3" descriptor="Tipo de Atributo">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>

    </SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      SELECT A.*, B.DSCTAB AS DSCREC, ISNULL(C.LGNUSU,'') LGNUSU
      FROM TBTIPATR (NOLOCK) A
      INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC)
      LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
    </extendedmodel>

    <insertcommand key="Key" fieldreturn="CODATR" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field="CODATR"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        IF((@DSCATR IS NULL) OR (@DSCATR = ''))
           SET @RETURN_VALUE=-3;

        IF(@RETURN_VALUE=0)
            BEGIN
                IF(EXISTS( SELECT 1 FROM TBTIPATR (NOLOCK) WHERE DSCATR=@DSCATR))
                    SET @RETURN_VALUE=-2;
            END                    
      
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPATRINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="A DESCRICAO DO ATRIBUTO NAO FOI INFORMADA" error="INVALIDARGUMENT"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="CODATR" exceptionparamns="'DATCAD'" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        SET @DATUPD=GETDATE();
        
        IF((@DSCATR IS NULL) OR (@DSCATR = ''))
           SET @RETURN_VALUE=-3;

        IF(@RETURN_VALUE=0)
            BEGIN
                IF(EXISTS( SELECT 1 FROM TBTIPATR (NOLOCK) WHERE DSCATR=@DSCATR AND CODATR<>@CODATR) )
                    SET @RETURN_VALUE=-2;
            END                    
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPATRUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
        <return value="-4" message="JA EXISTE UM REGISTRO DIFERENTE COM ESTA MESMA DESCRICAO" error="RECORDFOUND"/>
        <return value="-3" message="A DESCRICAO DO ATRIBUTO NAO FOI INFORMADA" error="INVALIDARGUMENT"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="AttributeType" procname="PRTIPATRSEL" desc ="Obtêm o registro do tipo de atributo informado">
        <query>
          <![CDATA[SELECT A.*, B.DSCTAB AS DSCREC, ISNULL(C.LGNUSU,'') LGNUSU 
    FROM TBTIPATR (NOLOCK) A 
   INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC) 
   LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Atributo" name="CODATR" type="short" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>

  <item create="true"  id="6" name="TBCADSTA" friendlyname="Transaction Status" modelversion="3" descriptor="Cadastro de Transações">
    <CSharpPartial>False</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      <![CDATA[
SELECT TOP 1 A.*
,DSCCHG = CASE WHEN (A.CANCHG=1) THEN 'Sim' ELSE 'Não' END
,DSCDEL = CASE WHEN (A.DELMEN=1) THEN 'Sim' ELSE 'Não' END
,DSCREC = ISNULL(B.DSCTAB,'')
,DSCMOD = ISNULL(C.DSCTAB,'')
,LGNUSU = ISNULL(D.LGNUSU,'')
  FROM TBCADSTA (NOLOCK) A
 INNER JOIN TBTABGER B (NOLOCK) ON (B.NUMTAB =  7 AND B.KEYCOD = A.STAREC)
 INNER JOIN TBTABGER C (NOLOCK) ON (C.NUMTAB = 14 AND C.KEYCOD = A.CODMOD)
  LEFT JOIN TBLGNUSU D (NOLOCK) ON (D.CODUSU = A.UPDUSU  AND D.REGATV = 1)         
    
    ]]>
    </extendedmodel>

    <insertcommand key="key" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert" processcode="010">
      <maxfield field="CODSTA"/>
      <nextnumber field="" id="" />
      <pre></pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADSTAINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="CODSTA" exceptionparamns="'DATCAD'" procname="" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADSTAUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>


    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="TransactionStatus" procname="" desc ="Seleciona o registro de acordo com o codigo do status fornecido">
        <query>
          <![CDATA[SELECT A.*
,DSCCHG = CASE WHEN (A.CANCHG=1) THEN 'Sim' ELSE 'Não' END
,DSCDEL = CASE WHEN (A.DELMEN=1) THEN 'Sim' ELSE 'Não' END
,DSCREC = ISNULL(B.DSCTAB,'')
,DSCMOD = ISNULL(C.DSCTAB,'')
,LGNUSU = ISNULL(D.LGNUSU,'')
  FROM TBCADSTA (NOLOCK) A
 INNER JOIN TBTABGER B (NOLOCK) ON (B.NUMTAB =  7 AND B.KEYCOD = A.STAREC)
 INNER JOIN TBTABGER C (NOLOCK) ON (C.NUMTAB = 14 AND C.KEYCOD = A.CODMOD)
  LEFT JOIN TBLGNUSU D (NOLOCK) ON (D.CODUSU = A.UPDUSU  AND D.REGATV = 1)     ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Status" name="CODSTA" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>

  </item>

  <item create="true"  id="7" name="TBTIPUSU" friendlyname="UserType" modelversion="3" descriptor="Tipo de Usuário">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <extendedmodel>
      SELECT TOP 1 A.*, B.DSCTAB AS DSCREC, ISNULL(C.LGNUSU,'') LGNUSU
      FROM TBTIPUSU (NOLOCK) A
      INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC)
      LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
    </extendedmodel>
    <csharp>1111000000</csharp>
    <insertcommand key="Key" fieldreturn="" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="010">
      <maxfield field="TIPUSU"/>
      <nextnumber field="" id="" />
      <pre>
        IF(ISNULL(@DSCTUS,'')='')
        SET @RETURN_VALUE=-3;
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE USUARIO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPUSUINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="A DESCRICAO DO TIPO DE USUARIO DEVE SER FORNECIDA" error="INVALIFARGUMENT"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="" exceptionparamns="'DATCAD'" method="Update" processcode="020">
      <maxfield field="TIPUSU"/>
      <nextnumber field="" id="" />
      <pre>
        SET @DATUPD=GETDATE();

        IF(ISNULL(@DSCTUS,'')='')
        SET @RETURN_VALUE=-3;
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE USUARIO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADSTAUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
        <return value="-3" message="A DESCRICAO DO TIPO DE USUARIO DEVE SER FORNECIDA" error="INVALIFARGUMENT"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="UserType" procname="PRTIPUSUSEL" desc ="Obtêm o registro do Tipo de Usuário fornecido">
        <query><![CDATA[SELECT * FROM TBTIPUSU (NOLOCK) A]]></query>
        <parameters>
          <parameter input="true" apply="true" desc ="Tipo de Usuário" name="TIPUSU" type="System.Byte"  size="2" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>

  <item create="true"  id="8" name="TBCADEND" friendlyname="AddressBook" modelversion="3" descriptor="Cadasto de Endereços">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Key" fieldreturn="" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
    DECLARE @DATCAD DATETIME
    SET @DATCAD = GETDATE()
    SET @RETURN_VALUE=0        
    IF(@DSCEND IS NULL OR @DSCEND='')
       SET @RETURN_VALUE=-3
       
    IF(@RETURN_VALUE = 0)
      EXEC @RETURN_VALUE = PRCADENDFND @CODUSU, @DSCEND, @TIPEND
    
    IF(@RETURN_VALUE = 0)
       BEGIN
          IF(@TIPEND NOT IN (3,4,0))
            BEGIN
              IF((@CODCEP='00000000') OR (@CODUFE=''))
                SET @STAREC=13
            END
      END
      ]]>
      </pre>
      <body>
      </body>
      <pos>
        <![CDATA[
    IF(@RETURN_VALUE>0 AND @REGATV=1 AND @STAREC=1)
              BEGIN
                UPDATE TBCADEND 
                   SET REGATV = 0
                 WHERE CODEND <> @RETURN_VALUE
                   AND CODUSU = @CODUSU
                   AND TIPEND = @TIPEND
                   AND STAREC = 1
                   AND @REGATV = 1
              END
      ]]>
      </pos>
      <returns>

        <return value="0" operator=">" message="ENDEREÇO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADENDINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-3" message="" error="INVALIDADDRESS"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="" exceptionparamns="'DATCAD'" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
    SET @DATUPD=GETDATE();
    SET @RETURN_VALUE=0        
    IF(@DSCEND IS NULL OR @DSCEND='')
       SET @RETURN_VALUE=-3
    
    IF(@RETURN_VALUE = 0)
       BEGIN
          IF(@TIPEND NOT IN (3,4,0))
            BEGIN
              IF((@CODCEP='00000000') OR (@CODUFE=''))
                SET @STAREC=13
            END
      END
      ]]>
      </pre>
      <body>
      </body>
      <pos>
        <![CDATA[
        IF(@RETURN_VALUE>0 AND @REGATV=1 AND @STAREC=1)
              BEGIN
                UPDATE TBCADEND 
                   SET REGATV = 0
                 WHERE CODEND <> @RETURN_VALUE
                   AND CODUSU = @CODUSU
                   AND TIPEND = @TIPEND
                   AND STAREC = 1
                   AND @REGATV = 1
              END
      ]]>
      </pos>
      <returns>
        <return value="0" operator=">" message="ENDEREÇO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADENDUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
        <return value="-3" message="" error="INVALIDADDRESS"/>
      </returns>
    </updatecommand>


    <transfercommand>
      <item script="true" alias="A." sql="" method="" return="QueryAddressBook" procname="" desc ="Obtêm os registros e vinculos dos Endereços cadastrados para o usuario">
        <query>
          <![CDATA[
SELECT  TOP 1
    CODEND,
    A.REGATV,
    DSCATV = CASE WHEN (A.REGATV=1) THEN 'Sim' ELSE 'Não' END,
    A.CODUSU,
	B.NOMUSU,
    A.TIPEND,
	C.DSCTEN,
  C.REFCTO,
    TIPLOG,
	DSCLOG = ISNULL(D.DSCTAB,''),
    CODUFE,
	DSCUFE = ISNULL(E.DSCTAB,''),
    DSCEND,
	FULEND =  CASE WHEN A.TIPEND IN (3,4) THEN DSCEND ELSE 	
	(ISNULL(D.DSCTAB,'') + ' ' + DSCEND +  CASE WHEN NUMEND > 0 THEN ',' + CONVERT(VARCHAR,NUMEND) ELSE '' END 
	+ ' ' + ISNULL(DSCCID,'') + ' ' + ISNULL(DSCBAI,'') +  CASE WHEN CODCEP<>'00000000' THEN ' - ' + dbo.FormatCEP(CODCEP) ELSE '' END) END,
	DSCCPL,
    NUMEND,
    DSCCID,
    DSCBAI,
    CODCEP,
    CODPAI,
	DSCPAI = ISNULL(F.DSCTAB,''),
    LATITU,
    LONGIT,
    A.STAREC,
    DSCREC = ISNULL(G.DSCTAB,''),    
    DATCAD = FORMAT(A.DATCAD, 'dd/MM/yyyy HH:mm'),
    DATUPD = FORMAT(A.DATUPD, 'dd/MM/yyyy HH:mm'),    
    A.UPDUSU,
	LGNUSU = ISNULL(H.LGNUSU,'')
  FROM TBCADEND (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
 INNER JOIN TBTIPEND (NOLOCK) C ON (C.TIPEND = A.TIPEND)
  LEFT JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 81 AND D.KEYCOD = A.TIPLOG)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB = 2 AND E.KEYTXT = A.CODUFE)
  LEFT JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB = 1 AND F.KEYCOD = A.CODPAI)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB = 7 AND G.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) H ON (H.CODUSU = A.UPDUSU AND H.REGATV=1)
          
]]>
        </query>
      </item>
    </transfercommand>

    <selectcommand>
      <item script="true" alias="A." sql=""  processcode="100" method="Select" return="AddressBook" procname="PRCADENDSEL" desc ="Obtêm o registro de Endereço">
        <query><![CDATA[SELECT * FROM TBCADEND (NOLOCK) A]]></query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Endereço" name="CODEND" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
    <methods>
      <item webtype="[HttpPost]" responsemode="1" processcode="200" script="true" alias="A." sql="" method="Find" return="int" returnmode="5" procname="PRCADENDFND" desc ="Localiza o ID de um endereço com base nos parametros fornecidos" returnvalue="0">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT = 0
SELECT TOP 1 @RETURN_VALUE = COALESCE(CODEND,0) 
  FROM TBCADEND (NOLOCK) 
 WHERE STAREC = 1
   AND CODUSU = @CODUSU  
   AND DSCEND = @DSCEND
	 AND TIPEND = @TIPEND    
	 AND (@REGATV IS NULL OR REGATV = @REGATV)       
RETURN @RETURN_VALUE
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" desc ="Descrição do Endereço" name="DSCEND" type="System.String" size="70"  default="" output="" null="true"/>
          <parameter input="true" desc ="Tipo de Endereço" name="TIPEND" type="System.Byte" default="" output="" null="true"/>
          <parameter input="true" desc ="Status de Registro" name="REGATV" type="System.Byte"  sysnull="true" default="" output="" null="true"/>
        </parameters>
      </item>
    </methods>
  </item>

  <item create="true"  id="9" name="TBCADCTO" friendlyname="ContactBook" modelversion="3" descriptor="Tabela de Contatos">
    <CSharpPartial>true</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>

    <insertcommand key="Identity" audit="false" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
		SELECT @RETURN_VALUE = ISNULL(CODCTO,0) 
      FROM TBCADCTO (NOLOCK)    
     WHERE CODPAI = @CODPAI
  	   AND CODOPR = @CODOPR
			 AND NUMDDD = @NUMDDD
			 AND NUMTEL = @NUMTEL
			 AND TIPCTO = @TIPCTO
			 AND CODUSU = @CODUSU
			 AND CODEND = @CODEND
      ]]>


      </pre>
      <body></body>
      <pos>
        <![CDATA[
        IF(@RETURN_VALUE>0)
            BEGIN
                UPDATE TBCADCTO 
                   SET REGATV = 0 
                 WHERE CODUSU = @CODUSU
                   AND TIPCTO = @TIPCTO
                   AND CODCTO <> @RETURN_VALUE
                   AND STAREC = 1
                   AND @REGATV = 1
            END
      ]]>
      </pos>
      <returns>
        <return value="0" operator=">" message="CONTATO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADCTOINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" exceptionparamns="'DATCAD'" procname="" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        SET @DATUPD=GETDATE()
      </pre>
      <body></body>
      <pos>
        <![CDATA[
        IF(@RETURN_VALUE>0)
          BEGIN
              UPDATE TBCADCTO
                 SET REGATV = 0
               WHERE CODUSU = @CODUSU
                 AND TIPCTO = @TIPCTO
                 AND CODCTO <> @RETURN_VALUE
                 AND STAREC = 1
                 AND @REGATV = 1
          END
      ]]>
      </pos>
      <returns>
        <return value="0" operator=">" message="CONTATO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADCTOUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <transfercommand>
      <item script="true" alias="A." sql="" method="" return="QueryContactBook" procname="" desc ="Obtêm os registros e vinculos dos Endereços cadastrados para o usuario">
        <query>
          <![CDATA[
SELECT    
    CODCTO
    ,A.CODUSU
	,B.NOMUSU
    ,A.CODEND
	,C.DSCEND
    ,A.TIPCTO
	,D.DSCCTO
    ,A.REGATV
	,DSCATV = CASE WHEN (A.REGATV=1) THEN 'Sim' ELSE 'Não' END
    ,A.CODPAI
	,DSCPAI = ISNULL(E.DSCTAB,'')
    ,CODOPR
    ,DSCOPR = ISNULL(F.DSCTAB,'')
    ,NUMDDD
    ,ISWHAT
    ,NUMTEL
    ,DSCOBS
    ,A.STAREC
    ,DSCREC = ISNULL(G.DSCTAB,'')
    ,DATCAD = FORMAT(A.DATCAD, 'dd/MM/yyyy HH:mm')
    ,DATUPD = FORMAT(A.DATUPD, 'dd/MM/yyyy HH:mm')    
    ,A.UPDUSU
	,LGNUSU  = ISNULL(H.LGNUSU,'')

  FROM TBCADCTO (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
  LEFT JOIN TBCADEND (NOLOCK) C ON (C.CODEND = A.CODEND)
 INNER JOIN TBTIPCTO (NOLOCK) D ON (D.TIPCTO = A.TIPCTO)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB= 1 AND E.KEYCOD = A.CODPAI)
  LEFT JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB= 45 AND F.KEYCOD = A.CODOPR)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB= 7 AND G.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) H ON (H.CODUSU = A.UPDUSU AND H.REGATV=1)          
]]>
        </query>
      </item>
    </transfercommand>

    <selectcommand>
      <item script="true" alias="A." sql="" method="Select" return="ContactBook" procname="PRCADCTOSEL" desc ="Seleciona o registro de acordo com o código do cadastro de contatos">
        <query>
          <![CDATA[SELECT * FROM TBCADCTO (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Contato" name="CODCTO" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
      <item script="true" alias="A." sql="" method="Select" return="ContactBook" procname="PRCADCTOSELCTO" desc ="Obtêm o registro de contato de acordo com os parâmetros informados">
        <query>
          <![CDATA[SELECT * FROM TBCADCTO (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Tipo de Contato" name="TIPCTO" type="System.Byte" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Registro Ativo" name="REGATV" type="System.Byte" default="1" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Status de Registro" name="STAREC" type="System.Byte" default="1" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>


    <methods>
      <item webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="Find" return="int" returnmode="5" procname="PRCADCTOFIN" desc ="Localiza um contato com base nos parâmetros fornecidos" returnvalue="0">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT = 0
SELECT TOP 1 @RETURN_VALUE = COALESCE(CODCTO,0) 
  FROM TBCADCTO (NOLOCK) 
 WHERE (@CODPAI IS NULL OR CODPAI = @CODPAI)
	 AND (@CODOPR IS NULL OR CODOPR = @CODOPR)
	 AND (@NUMDDD IS NULL OR NUMDDD = @NUMDDD)
	 AND (@NUMTEL IS NULL OR NUMTEL = @NUMTEL)
   AND (@REGATV IS NULL OR REGATV = @REGATV)   
	 AND TIPCTO = @TIPCTO
	 AND CODUSU = @CODUSU
	 AND CODEND = @CODEND    
RETURN @RETURN_VALUE;          
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" desc ="Código do Endereço" name="CODEND" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" desc ="Tipo de Contato" name="TIPCTO" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" desc ="Telefone" name="NUMTEL" type="System.String" size="15" default="" output="" null="false"/>
          <parameter input="true" desc ="Código do Pais" name="CODPAI" type="System.Int16" sysnull="true" default="" output="" null="true"/>
          <parameter input="true" desc ="Código da Operadora" name="CODOPR" type="System.Int16" sysnull="true" default="" output="" null="true"/>
          <parameter input="true" desc ="Número do DDD" name="NUMDDD" type="System.String" size="4" sysnull="true" default="" output="" null="true"/>
          <parameter input="true" desc ="Indicador de Atividade do Registro" name="REGATV" type="System.Byte" sysnull="true" default="" output="" null="true"/>
        </parameters>
      </item>
    </methods>
  </item>


  <item create="true"  id="10" name="TBTIPEND" friendlyname="AddressType" modelversion="3" descriptor="Tipo de Endereço">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      SELECT TOP 1 A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
      FROM TBTIPEND (NOLOCK) A
      INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
      LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Key" fieldreturn="TIPEND" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field="TIPEND"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF(EXISTS (SELECT 1 FROM TBTIPEND (NOLOCK) WHERE DSCTEN = @DSCTEN))
   SET @RETURN_VALUE=-3;
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE ENDEREÇO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPENDINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="TIPEND" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field="TIPEND"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();
IF(EXISTS (SELECT 1 FROM TBTIPEND (NOLOCK) WHERE DSCTEN = @DSCTEN AND TIPEND <>@TIPEND))
    SET @RETURN_VALUE=-3;
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE ENDEREÇO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPENDUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql="" processcode="100" method="Select" return="AddressType" procname="PRTIPENDSEL" desc ="Obtêm o registro de Tipo de Endereço com base no id informado">
        <query>
          <![CDATA[
SELECT A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
  FROM TBTIPEND (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)        
        ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Tipo de Endereço" name="TIPEND" type="System.Byte"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>


  <item create="true"  id="11" name="TBTIPCTO" friendlyname="ContactType" modelversion="3" descriptor="Tipos de Contato">
    <UpdateKey>Key</UpdateKey>
    <audit>FALSE</audit>
    <CSharpPartial>False</CSharpPartial>
    <SqlTable></SqlTable>
    <extendedmodel>SELECT TOP 1 A.*, B.DSCTAB AS DSCREC, ISNULL(C.LGNUSU,'') LGNUSU FROM TBTIPCTO (NOLOCK) A INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC) LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1 AND C.STAREC=1)</extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>

    <insertcommand key="Key" fieldreturn="TIPCTO" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert">
      <maxfield field="TIPCTO"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF(EXISTS (SELECT 1 FROM TBTIPCTO (NOLOCK) WHERE DSCCTO = @DSCCTO))
    SET @RETURN_VALUE=-2;]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPCTOINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="FALHA NA INCLUSAO DO REGISTRO" error="FAILALL"/>
        <return value="-2" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </insertcommand>
    <updatecommand key="Key" fieldreturn="TIPCTO" exceptionparamns="'DATCAD'" procname="" method="Update">
      <maxfield field="TIPCTO"/>
      <nextnumber field="" id="" />
      <pre>
        SET @DATUPD = GETDATE();
        IF(EXISTS (SELECT 1 FROM TBTIPCTO (NOLOCK) WHERE DSCCTO = @DSCCTO AND TIPCTO!=@TIPCTO))
        SET @RETURN_VALUE=-2;

      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPCTOUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO PARA OUTRO REGISTRO" error="ATTRIBUTEFOUNDED"/>
      </returns>

    </updatecommand>
    <selectcommand>
      <item script="false" alias="A." sql=""  processcode="100" method="Select" return="ContactType" procname="" desc ="Obtêm o registro do Tipo de contato informado">
        <query>
          <![CDATA[SELECT * FROM TBTIPCTO (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Tipo de Contato" name="TIPCTO" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>


    </selectcommand>

  </item>

  <item create="true"  id="12" name="TBCADCTA" friendlyname="VirtualAccount" modelversion="3" descriptor="Cadastro de Contas">
    <audit>FALSE</audit>
    <keyaudit></keyaudit>
    <CSharpPartial>true</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel><![CDATA[SELECT NIDCTA,CODUSU,NUMAGE,NUMBCO,NUMCTA,NUMDVE,ORGCTA,REGATV,TIPCTA,STACTA,DATVAL,APLLIM,VLRLIM,TIPBNF,CODCMF,NOMBNF,STAREC,DATCAD,DATUPD,UPDUSU,DATTRF = '' FROM TBCADCTA (NOLOCK) WHERE NIDCTA=-1]]></extendedmodel>

    <view>
      <item script="true" alias="A." sql="" method="" return="" procname="VWCADCTA" desc ="View de Pesquisa de Contas">
        <query>
          <![CDATA[
SELECT NIDCTA,A.ORGCTA
 ,A.STACTA,A.CODUSU
 ,A.TIPCTA,UPPER(CASE WHEN ORGCTA IN (1,3,4) THEN B.NOMUSU ELSE A.NOMBNF END) NOMUSU
 , CONVERT(CHAR(1),ORGCTA) + '-' + (REPLACE(LTRIM(RTRIM(NUMCTA)),'-','') + '-' + CAST(NUMDVE AS VARCHAR(1))
+ ' - ' + ISNULL(CASE WHEN ORGCTA IN (1,3,4) THEN B.NOMUSU ELSE A.NOMBNF END ,'')
+ ' - ' + ISNULL(C.DSCTAB,'')) AS DSC001
 ,(LEFT(ISNULL(CASE WHEN ORGCTA IN (1,3,4) THEN B.NOMUSU ELSE A.NOMBNF END,'') + ' - ' + ISNULL(C.DSCTAB,'')  
     + replicate('_',100),100)
 + CONVERT(CHAR(1),ORGCTA) + '-' + REPLACE(LTRIM(RTRIM(NUMCTA)),'-','') + '-' + CAST(NUMDVE AS VARCHAR(1))) AS DSC002

  FROM TBCADCTA (NOLOCK) A 
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
  LEFT JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB = 12 AND C.KEYTXT = A.NUMBCO)
 WHERE A.STAREC = 1
   AND A.STACTA = 250
   AND B.STAUSU = 61
   AND B.STAREC = 1
   AND LTRIM(RTRIM(A.NUMCTA))<>''
   AND (CASE WHEN ORGCTA IN (1,3,4) THEN B.NOMUSU ELSE A.NOMBNF END) <> ''  
        ]]>
        </query>
      </item>
    </view>

    <insertcommand key="Identity" audit="false" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert" processcode="010">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[

IF(@NUMBCO='' OR @NUMBCO IS NULL)
   SET @NUMBCO='000';

IF(@ORGCTA IN (1,3,4))
    BEGIN
        IF(EXISTS(SELECT 1 
                    FROM TBCADCTA (NOLOCK) 
                   WHERE CODUSU =@CODUSU AND ORGCTA=@ORGCTA))              
            BEGIN
                SET @RETURN_VALUE=-2
            END
    END
        
IF(@ORGCTA IN (1,3,4) AND @RETURN_VALUE=0)
    BEGIN
        DECLARE @RETORNO INT
        DECLARE @ACCOUNTBASE VARCHAR(11)
        EXEC PRGETNXTNUM 4, @RETORNO OUTPUT
        SET @ACCOUNTBASE =  dbo.CreateAccountBase(@RETORNO)
        SET @NUMCTA = @ACCOUNTBASE
        SET @NUMDVE = dbo.Modulo11(@accountbase)
        SET @NUMAGE = '0001';
        SET @NUMBCO = '000'
        SET @TIPBNF = 0
    END

SELECT @NUMBCO = LTRIM(RTRIM(RIGHT('000' + ISNULL(@NUMBCO, '0'),3)))      

IF(@ORGCTA IN (1,3,4) AND (@CODCMF='' OR @CODCMF IS NULL) )
   BEGIN
       SELECT @CODCMF = CODCMF FROM TBCADGER (NOLOCK) WHERE CODUSU=@CODUSU
   END
IF(@ORGCTA IN (1,3,4) AND (@NOMBNF='' OR @NOMBNF IS NULL) )
   BEGIN
       SELECT @NOMBNF = NOMUSU FROM TBCADGER (NOLOCK) WHERE CODUSU=@CODUSU
   END
   
      
      ]]>
      </pre>
      <body></body>
      <pos>
        <![CDATA[
        IF(@RETURN_VALUE>0 AND @ORGCTA=2)
          UPDATE TBCADCTA 
             SET REGATV=0 
            WHERE CODUSU=@CODUSU 
              AND ORGCTA=2 
              AND NIDCTA<>@RETURN_VALUE
        ]]>
      </pos>
      <returns>
        <return value="0" operator=">" message="CONTA VIRTUAL INCLUIDA COM SUCESSO" error="">
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="O USUARIO JA POSSUI UMA CONTA VIRTUAL REGISTRADA" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" audit="true" exceptionparamns="'DATCAD'" procname="" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre></pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="CONTA VIRTUAL ALTERADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADCTAUPD";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>

    <transfercommand>
      <item script="true" alias="A." sql="" method="" return="Accounts" procname="" desc ="Vinculos da Tabela Virtual Account">
        <query>
          <![CDATA[
SELECT TOP 1
    A.NIDCTA
    ,A.CODUSU
	,B.NOMUSU
    ,A.NUMAGE
    ,A.NUMBCO
	,DSCBCO = ISNULL(C.DSCTAB,'')
    ,A.NUMCTA
    ,A.NUMDVE
    ,A.ORGCTA
	,DSCORG = ISNULL(D.DSCTAB,'')
    ,A.TIPCTA
	,E.DSCCTA
	,E.TIPEXT
    ,A.STACTA
	,F.DSCSTA
    ,A.DATVAL
    ,A.APLLIM
    ,A.VLRLIM
    ,A.TIPBNF
    ,DSCBNF = ISNULL(G.DSCTAB,'')
    ,CODCMF = dbo.FormatCMF(A.CODCMF)
    ,A.NOMBNF
    ,A.STAREC
    ,DSCREC = ISNULL(H.DSCTAB,'')
    ,A.UPDUSU
	,LGNUSU = ISNULL(I.LGNUSU,'')
 FROM TBCADCTA (NOLOCK) A 
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
  LEFT JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB = 12 AND C.KEYTXT = A.NUMBCO)
 INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 23 AND D.KEYCOD = A.ORGCTA)
 INNER JOIN TBTIPCTA (NOLOCK) E ON (E.TIPCTA = A.TIPCTA)
 INNER JOIN TBCADSTA (NOLOCK) F ON (F.CODSTA = A.STACTA)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB = 20 AND G.KEYCOD = A.TIPBNF)
 INNER JOIN TBTABGER (NOLOCK) H ON (H.NUMTAB =  7 AND H.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) I ON (I.CODUSU = A.UPDUSU AND I.REGATV = 1)          
]]>
        </query>
      </item>
    </transfercommand>

    <selectcommand>
      <item processcode="100" script="true"  alias="A." sql="" method="Select" return="VirtualAccount" procname="PRCADCTASEL" desc ="Seleciona o registro de conta virtual de acordo com o id da conta">
        <query>
          <![CDATA[SELECT * FROM TBCADCTA (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID da Conta Virtual" name="NIDCTA" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
      <item script="true" alias="A." sql="" method="Select" return="VirtualAccount" procname="PRCADCTASELCTA" desc ="Seleciona o registro de conta virtual de acordo com os parâmetros fornecidos">
        <query>
          <![CDATA[SELECT * FROM TBCADCTA (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Banco" name="NUMBCO" type="System.String" size="3" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Agência" name="NUMAGE" type="System.String" size="15" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Conta" name="NUMCTA" type="System.String" size="11" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="DV" name="NUMDVE" type="System.String" size="1" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Origem da Conta" name="ORGCTA" type="System.Byte" default="2" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Tipo de Conta" name="TIPCTA" type="System.Int32" default="2" output="" null="false"/>
        </parameters>
      </item>
      <item processcode="105" script="true" alias="A." sql="" method="Select" return="VirtualAccount" procname="PRCADCTASELCMF" desc ="Obtêm o registro de conta virtual de acordo com o cpf/cnpj informado">
        <query>
          <![CDATA[SELECT TOP 1 * FROM TBCADCTA (NOLOCK) A WHERE A.CODUSU IN(SELECT CODUSU FROM TBCADGER (NOLOCK) WHERE STAREC=1 AND STAUSU=61 AND CODCMF=@CODCMF) AND (@ORGCTA IS NULL OR ORGCTA =@ORGCTA) ]]>
        </query>
        <parameters>
          <parameter input="true" apply="false" desc ="Código do CPF/CNPJ" name="CODCMF" type="System.String" size="15" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Origem da Conta" name="ORGCTA" type="System.Byte" default="" sysnull="true" output="" null="true"/>
        </parameters>
      </item>

    </selectcommand>


    <methods>

      <item webtype="[HttpPost]" responsemode="1"  processcode="200" permission="UPDUSU" script="true" alias="A." sql="" method="DeleteAccountID" return="int" returnmode="5" procname="PRCADCTADELNID" desc ="Exclui logicamente um registro de conta" returnvalue="0">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0          
IF(@UPDUSU<=0)
   SET @RETURN_VALUE=-2
IF(EXISTS(SELECT 1 FROM TBCADCTA (NOLOCK) WHERE NIDCTA=@NIDCTA) AND @RETURN_VALUE=0)         
   BEGIN
      UPDATE TBCADCTA SET STAREC=1, STACTA=253, UPDUSU=@UPDUSU, DATUPD=GETDATE() WHERE NIDCTA = @NIDCTA
      SET @RETURN_VALUE=1
   END
ELSE
   SET @RETURN_VALUE=-1
RETURN @RETURN_VALUE   
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Id da Conta" name="NIDCTA" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="FAILWRITE"/>
          <return value="1" message="CONTA EXCLUIDA COM SUCESSO" error="OK">
            Auditing audit = new Auditing();
            audit.UPDUSU =pUPDUSU;
            audit.AUDDAT=DateTime.Now;
            audit.AUDKEY =KeyTableId;
            audit.AUDIDR =pNIDCTA;
            audit.AUDIMS =0;
            audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
            audit.AUDOBJ = "PRCADCTADELNID";
            audit.AUDSRC ="";
            audit.AUDCHG ="ALTEROU O STATUS DE REGISTRO DA CONTA PARA INATIVO  E O BLOQUEIO DA DA CONTA PARA OPERACOES";
            audit.NIDTOK =0;
            audit.NUMIPA =Environment.MachineName;
            _AUDNUM=WriteAuditing.Insert(audit);
            respond.Logged=_AUDNUM>0;
          </return>
          <return value="-1" error="RECORDNOTFOUND"/>
          <return value="-2" message="" error="REQUIREDUSEROPERATION"/>
        </returns>
      </item>

      <item webtype="[HttpPost]" responsemode="1" processcode="205" permission="UPDUSU" script="true" alias="A." sql="" method="ChangeStatusAccount" return="int" returnmode="1" procname="PRCADCTACHGSTAACC" desc ="Executa a aprovação ou rejeição de uma conta digital" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @NOMUSU VARCHAR(70)=N'';
DECLARE @CODACE INT=0;
DECLARE @CODUSU INT=0;
DECLARE @LGNUSU VARCHAR(50)=N'';
DECLARE @STACTA SMALLINT;
IF(@NIDCTA=0)
  SET @RETURN_VALUE = -1
  
IF(@RETURN_VALUE=0)
   BEGIN
      IF(@UPDUSU=0)
          SET @RETURN_VALUE = -2
   END

IF(@RETURN_VALUE=0)
   BEGIN
      IF(@CODOPE NOT IN (1,3))
        SET @RETURN_VALUE = -4
   END        

IF(@UPDUSU>0)
  SELECT @LGNUSU = LGNUSU FROM TBLGNUSU (NOLOCK) WHERE CODUSU=@UPDUSU AND REGATV=1 

SELECT @STACTA = STACTA
  FROM TBCACSTA (NOLOCK)
 WHERE NIDCTA = @NIDCTA  
 
IF(@STACTA <> 253)
   SET @RETURN_VALUE=-6;


IF(@RETURN_VALUE=0)
   BEGIN
      IF( NOT (EXISTS (SELECT 1 
                  FROM TBCADGER (NOLOCK) 
                 WHERE CODUSU IN (SELECT CODUSU 
                                    FROM TBCADCTA (NOLOCK) 
                                   WHERE NIDCTA=@NIDCTA) 
                   AND STAREC=1 AND STAUSU=61)))
          BEGIN
              SET @RETURN_VALUE=-5;
          END          
   END

IF (@CODUSU>0 AND @RETURN_VALUE=0)
	BEGIN
		UPDATE TBCADCTA
		   SET STACTA = CASE WHEN (@CODOPE=1) THEN 250 ELSE 252 END
          ,STAREC = CASE WHEN (@CODOPE=1) THEN 1 ELSE 0 END
          ,UPDUSU = @UPDUSU
          ,DATUPD = GETDATE()
         WHERE NIDCTA = @NIDCTA
     IF(@@ERROR=0)
	      BEGIN
				        UPDATE TBCADGER SET UPDUSU = @UPDUSU
                      ,DATUPD = GETDATE()
                      ,DSCOCO = LTRIM(RTRIM(DSCOCO)) + CHAR(13)+ 'REGISTRO '+ CASE WHEN (@CODOPE=1) THEN 'APROVADO' ELSE 'CANCELADO' END  + ' POR ' + LTRIM(RTRIM(@LGNUSU))  + ' COM STATUS DE CONTA ORIGINAL: ' + CONVERT(VARCHAR(3),@STACTA)
				         WHERE CODUSU IN (SELECT CODUSU FROM TBCADCTA WHERE NIDCTA = @NIDCTA)
                 IF(@@ERROR=0)
                    BEGIN
                        SET @RETURN_VALUE = 1;
  			            END
	      END               
  END
  
RETURN @RETURN_VALUE  
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID da Conta" name="NIDCTA" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código da Operação" name="CODOPE" type="System.Byte" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário Aprovador" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
        </parameters>

        <returns>
          <return value="0" message="" error="APPROVALFAIL"/>
          <return value="1" message="ATUALIZACAO EFETUADA COM SUCESSO" error="OK">
            Auditing audit = new Auditing();
            audit.UPDUSU =pUPDUSU;
            audit.AUDDAT=DateTime.Now;
            audit.AUDKEY =KeyTableId;
            audit.AUDIDR =pNIDCTA;
            audit.AUDIMS =0;
            audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
            audit.AUDOBJ = "PRCADCTADELNID";
            audit.AUDSRC ="";
            if(pCODOPE==1)
            audit.AUDCHG ="Aprovou o Registro de Conta";
            else{
            if(pCODOPE==3)
            audit.AUDCHG ="Reprovou o Registro de Conta";
            }
            audit.NIDTOK =0;
            audit.NUMIPA =Environment.MachineName;
            _AUDNUM=WriteAuditing.Insert(audit);
            respond.Logged=_AUDNUM>0;

          </return>
          <return value="-1" message="O ID DA CONTA NAO FOI FORNECIDO" error="APPROVALFAIL"/>
          <return value="-2" message="" error="REQUIREDUSEROPERATION"/>
          <return value="-3" message="" error="APPROVALUSERNOTALLOWED"/>
          <return value="-4" message="OPERACAO INVALIDA" error="APPROVALFAIL"/>
          <return value="-5" message="O USUÁRIO NÃO ESTÁ OPERACIONAL PARA ESTA ACAO, VIDE O STATUS DO USUARIO" error="APPROVALFAIL"/>
          <return value="-6" message="A CONTA VIRTUAL NÃO ESTÁ EM ESTADO DE APROVAÇÃO" error="APPROVALFAIL"/>
        </returns>
      </item>


      <item  webtype="[HttpGet]" audit="false" responsemode="1" processcode="210" script="true" alias="A." sql="" method="Locate" return="int" returnmode="5" procname="PRCADCTALOC" desc ="Localiza uma conta virtual a partir do código de usuário" returnvalue="0">
        <query>
          <![CDATA[SELECT ISNULL(NIDCTA,0) AS NIDCTA FROM TBCADCTA (NOLOCK) WHERE CODUSU =@CODUSU AND ORGCTA = @ORGCTA AND TIPCTA=@TIPCTA]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Origem da Conta" name="ORGCTA" type="System.Byte" default="1" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Tipo de Conta" name="TIPCTA" type="System.Int32" default="1" output="" null="false"/>
        </parameters>
      </item>

    </methods>
  </item>


  <item create="true"  id="13" name="TBSYSFUN" friendlyname="SystemFeatures" modelversion="3" descriptor="Funcionalidades do Sistema">
    <UpdateKey>Key</UpdateKey>
    <audit>FALSE</audit>
    <CSharpPartial>False</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      SELECT TOP 1 A.*, DSCREC= ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,'') FROM TBSYSFUN (NOLOCK) A
      INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
      LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
    </extendedmodel>
    <insertcommand key="Identity" fieldreturn="SYSFUN" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        IF(EXISTS(SELECT 1 
                    FROM TBSYSFUN (NOLOCK) A 
                   WHERE A.SYSAPL = @SYSAPL
                     AND A.SYSTBL = @SYSTBL 
                     AND A.SYSROL = @SYSROL))
          BEGIN                     
              SET @RETURN_VALUE=-2;
          END
      
      ]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRSYSFUNINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="FALHA NA INCLUSAO DO REGISTRO" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="SYSFUN" exceptionparamns="'DATCAD'" procname="" method="Update">
      <maxfield field="TIPCTO"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF(NOT (EXISTS(SELECT 1
                FROM TBSYSFUN (NOLOCK) A
               WHERE A.SYSAPL = @SYSAPL
                 AND A.SYSTBL = @SYSTBL
                 AND A.SYSROL = @SYSROL)))
    BEGIN                 
        SET @RETURN_VALUE=-2;
    END        
      
      ]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRSYSFUNUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>

      </returns>
    </updatecommand>



    <selectcommand>
      <item script="true" alias="A." sql="" method="Select" return="SystemFeatures" procname="PRSYSFUNSEL" desc ="Obtêm o registro de uma funcionalidade de acordo com o id">
        <query>
          <![CDATA[SELECT * FROM TBSYSFUN (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID da Funcionalidade" name="SYSFUN" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>


    </selectcommand>

    <selectallcommand>
      <item script="true" alias="A." sql="" method="List" type="List" return="SystemFeatures" procname="PRSYSFUNSELALL" desc ="Obtêm todos os registros de funcionalidades específicas para uma tabela">
        <query>
          <![CDATA[SELECT A.*, DSCREC= ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,'') FROM TBSYSFUN (NOLOCK) A
INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID da Tabela" name="SYSTBL" type="System.Int16"  sysnull="true" default="" output="" null="true"/>
        </parameters>

      </item>

    </selectallcommand>

  </item>

  <item create="true"  id="14" name="TBREGCRT" friendlyname="ActiveCards" modelversion="3" descriptor="Registro de Cartões Ativos">
    <UpdateKey>Key</UpdateKey>
    <audit>true</audit>
    <keyaudit>CODCRT</keyaudit>
    <FilterSelect>True</FilterSelect>
    <listselect>STACRT</listselect>
    <CSharpPartial>true</CSharpPartial>
    <SqlTable></SqlTable>
    <extendedmodel><![CDATA[]]></extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>

    <objectclass>
      <item script="true" alias="A." sql="" method="AssociatedCards" return="int" returnmode="1" procname="" desc ="Objeto de Retenção de Informações de Cartões Associados" returnvalue="1">
        <query>
          <![CDATA[
DECLARE @RESULT TABLE (CODCRT INT, 
                       CODPRO SMALLINT, 
                       NUMCRT VARCHAR(16), 
                       VALCRT VARCHAR(10), 
                       NOMPRT VARCHAR(50))
SELECT * FROM @RESULT
        ]]>

        </query>
      </item>
    </objectclass>

    <transfercommand>
      <item script="true" alias="A." sql="" method="" return="QueryActiveCards" procname="" desc ="Objeto de Contenção de Pesquisa de Cartões">
        <query>
          <![CDATA[
SELECT TOP 1 A.CODCRT
      ,A.NIDCTA
      ,A.USUPRO
      ,A.TIPPRO
      ,A.ORGATV
      ,A.ASSUSU
      ,ISNULL(B.NOMUSU,'') AS NOMUSU      
      ,A.SECLVL
      ,A.DATATV
      ,CNVATV = ISNULL(FORMAT(A.DATATV, 'dd/MM/yyyy'),'')          
      ,A.DATCAN
      ,CNVCAN = ISNULL(FORMAT(A.DATCAN, 'dd/MM/yyyy'),'')                
      ,A.CALMEN
      ,A.USUMEN
      ,ISNULL(C.NOMUSU,'') AS DSCTOM      
      ,A.NOMPRT
      ,NUMCRT = dbo.FormatCard(A.NUMCRT)
      ,A.VALCRT
      ,A.PSWCRT
      ,A.NUMCVC
      ,A.STAPRO
      ,A.STACRT
      ,ISNULL(D.DSCSTA,'') AS DSCSTA      
      ,A.NOMCR1
      ,A.NOMCR2
      ,A.NOMCR3
      ,A.OPRCRT
      ,A.DATEXT
      ,A.CODBLO
      ,A.TIPPRT
      ,A.DSCMOT
      ,A.APLCON
      ,A.APLSAQ
      ,A.LOTMIG
      ,A.STAREC
      ,ISNULL(E.DSCTAB,'') AS DSCREC      
      ,A.DATCAD
      ,CNVCAD = FORMAT(A.DATCAD, 'dd/MM/yyyy HH:mm')      
      ,A.DATUPD
      ,CNVUPD = FORMAT(A.DATUPD, 'dd/MM/yyyy HH:mm')          
      ,A.UPDUSU
      ,LGNUSU = ISNULL(F.LGNUSU,'')      
      ,DSCPRO = ISNULL(I.DSCPRO,'')
	    ,QTDMEN = ISNULL(J.QTDMEN,0)
  FROM TBREGCRT (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (A.ASSUSU = B.CODUSU)
  LEFT JOIN TBCADGER (NOLOCK) C ON (A.USUMEN = C.CODUSU)
 INNER JOIN TBCADSTA (NOLOCK) D ON (A.STACRT = D.CODSTA)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB = 7 AND E.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) F ON (F.CODUSU = A.UPDUSU AND F.REGATV=1)
 INNER JOIN TBUSUPRO (NOLOCK) G ON (G.USUPRO = A.USUPRO)  
 INNER JOIN TBCADGER (NOLOCK) H ON (H.CODUSU = G.CODUSU)   
 INNER JOIN TBCADPRO (NOLOCK) I ON (I.CODPRO = G.CODPRO)    
  LEFT JOIN (SELECT USUPRO, CODREF, QTDMEN=COUNT(*) FROM TBREGMEN (NOLOCK) WHERE STAMEN=261 AND TIPMEN=1 AND MODREG=1 AND REGBXA=0 GROUP BY USUPRO, CODREF )J ON (J.USUPRO = A.USUPRO AND J.CODREF=A.CODCRT)    
       
]]>
        </query>
      </item>
    </transfercommand>

    <trigger>
      <item script="true" alias="A." sql="" method="" return="" procname="TR_TBREGCRT_CADCTA" after="INSERT, UPDATE" desc ="Trigger de Eventos da Tabela de Registro de Cartoes">
        <query>
          <![CDATA[
DECLARE @CODCRT INT =0, @NIDCEV INT =0, @ASSUSU INT =0, @NIDCTA INT =0, @USUPRO INT =0, @STACRT SMALLINT =0;
DECLARE @DATVAL DATETIME = GETDATE(), @CODCMF VARCHAR(15), @NOMUSU VARCHAR(70);
DECLARE @DATFIN DATETIME = DATEADD(YEAR, 2, GETDATE());
SELECT @ASSUSU = I.ASSUSU, @STACRT=I.STACRT,@USUPRO = I.USUPRO, @CODCRT = I.CODCRT, @NIDCEV=NIDCEV FROM INSERTED I 
IF(@ASSUSU>0 AND @STACRT IN (109,103) AND @USUPRO>0 AND @NIDCEV=0)
  BEGIN
      IF(EXISTS(SELECT 1 FROM TBUSUPRO (NOLOCK) WHERE USUPRO = @USUPRO AND APLCES=1))
         BEGIN
            IF(NOT EXISTS(SELECT 1 FROM TBCADCTA (NOLOCK) WHERE CODUSU=@ASSUSU AND ORGCTA=3))
                BEGIN
                   SELECT @CODCMF = CODCMF, @NOMUSU = NOMUSU FROM TBCADUSU (NOLOCK) WHERE CODUSU =@ASSUSU
                   EXEC PRCADCTAINS '0001', '000', '', '', 3, 1, 1, @ASSUSU, 1, @ASSUSU, 250, @DATVAL, @DATFIN, 1000, 1, 1, @CODCMF, @NOMUSU, @NIDCTA OUTPUT
                   IF(@NIDCTA>0)
                      UPDATE TBREGCRT SET NIDCEV=@NIDCTA WHERE CODCRT=@CODCRT
                END
         END
  END
       ]]>
        </query>
      </item>

      <item script="true" alias="A." sql="" method="" return="" procname="TR_TBREGCRT_UPDATE" after="INSERT, UPDATE" desc ="Trigger de Eventos de ajuste de status da Tabela de Registro de Cartoes">
        <query>
          <![CDATA[
BEGIN
    DECLARE @UPDUSU INT = 2
		DECLARE @CODCRT INT
		DECLARE @STACRT SMALLINT
		SELECT @CODCRT = CODCRT, @STACRT=STACRT FROM INSERTED

		IF(@STACRT IN (120,123,129))
			BEGIN
				UPDATE TBREGMEN SET STAREC = 13, DATUPD=GETDATE(), UPDUSU=@UPDUSU 
				 WHERE STAREC = 1 
				   AND STAMEN = 261 
           AND TIPMEN=  1   // Mensalidade cartão
           AND MODREG=  1   // Provisao
           AND BXAREG = 0   // Registro nao baixado 
				   AND CODREF = @CODCRT	// Referencias do Cartão
			END
	END
       ]]>
        </query>
      </item>

    </trigger>


    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="ActiveCards" procname="PRREGCRTSEL" desc ="Seleciona o registro de acordo com o Código do Cartão">
        <query>
          <![CDATA[SELECT * FROM TBREGCRT (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
      <item script="true" alias="A." sql="" processcode="105" method="Select" return="ActiveCards" procname="PRREGCRTSELCRT" desc ="Seleciona o registro de acordo com o Código Extendido do Cartão">
        <query>
          <![CDATA[SELECT * FROM TBREGCRT (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código Extendido do Cartão" name="NUMCRT" type="System.String" size="16" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>

    <insertcommand key="Key" fieldreturn="CODCRT" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="010">
      <maxfield field=""/>
      <nextnumber field="CODCRT" id="5" />
      <pre></pre>
      <body></body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="CARTAO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGCRTINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="CODCRT" exceptionparamns="'DATCAD'" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        SET @DATUPD=GETDATE();
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="CARTAO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGCRTINS";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>



    <methods>

      <item webtype="[HttpPost]" responsemode="1"  processcode="200" script="true" alias="A." sql="" method="ChangeOnlineShop" return="int" returnmode="2" procname="PRREGCRTCHGONLPAR" desc ="Altera o campo de permissão de compra on-line">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0
DECLARE @AUDCHG VARCHAR(512)=N'';
IF(@CODCRT<=0)
   SET @RETURN_VALUE=-1
IF(@UPDUSU<=0)
   SET @RETURN_VALUE=-2
   
   
IF(EXISTS(SELECT 1 FROM TBREGCRT (NOLOCK) WHERE CODCRT = @CODCRT AND @RETURN_VALUE=0))
   BEGIN
      SET @AUDCHG = N'DESATIVOU O CARTAO PARA COMPRA ONLINE'    
      IF(@APLCON = 1)
        SET @AUDCHG = N'ATIVOU O CARTAO PARA COMPRA ONLINE' 
      UPDATE TBREGCRT SET APLCON = @APLCON, DATUPD = GETDATE(), UPDUSU = @UPDUSU WHERE CODCRT = @CODCRT
      IF(@@ERROR=0)
          BEGIN
              INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC,  AUDCHG) 
                            VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,       0, OBJECT_NAME(@@PROCID),     '', @AUDCHG);        
              SET @RETURN_VALUE=1;
          END
	END
ELSE
    SET @RETURN_VALUE=-3;
RETURN @RETURN_VALUE
          
      ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Habilitar Compra Online" name="APLCON" type="System.Byte"  output="" null="false"/>
        </parameters>
        <returns>
          <return value="1" operator="==" message="PERMISSÃO DE COMPRA ON LINE ALTERADA COM SUCESSO" error="OK">
            respond.Logged=true;
          </return>
          <return value="0" message="NENHUMA ALTERAÇÃO EFETUADA" error=""/>
          <return value="-1" message="" error="CARDINVALIDID"/>
          <return value="-2" message="" error="REQUIREDUSEROPERATION"/>
          <return value="-3" message="" error="CARDNOTFOUND"/>
        </returns>
      </item>
      <item webtype="[HttpPost]" responsemode="1" processcode="205" script="true" alias="A." sql="" method="ChangeWithdraw" return="int" returnmode="2" procname="PRREGCRTCHGSAQPAR" desc ="Altera o campo de permissão de saque">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0
DECLARE @AUDCHG VARCHAR(512)=N'';
IF(@CODCRT<=0)
   SET @RETURN_VALUE=-1
IF(@UPDUSU<=0)
   SET @RETURN_VALUE=-2
   
IF(EXISTS(SELECT 1 FROM TBREGCRT (NOLOCK) WHERE CODCRT = @CODCRT AND @RETURN_VALUE=0))
   BEGIN
      SET @AUDCHG = N'DESATIVOU O CARTAO PARA SAQUE'    
      IF(@APLSAQ = 1)
        SET @AUDCHG = N'ATIVOU O CARTAO PARA SAQUE' 
      UPDATE TBREGCRT SET APLSAQ = @APLSAQ, DATUPD = GETDATE(), UPDUSU = @UPDUSU WHERE CODCRT = @CODCRT
      IF(@@ERROR=0)
          BEGIN
              INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC,  AUDCHG) 
                            VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,       0, OBJECT_NAME(@@PROCID),     '', @AUDCHG)        
              SET @RETURN_VALUE=1;                            
          END
	END
ELSE
    SET @RETURN_VALUE=-3;
RETURN @RETURN_VALUE
          
      ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Habilitar Compra Online" name="APLSAQ" type="System.Byte"  output="" null="false"/>
        </parameters>
        <returns>
          <return value="1" operator="==" message="PERMISSÃO DE SAQUE ALTERADA COM SUCESSO" error="OK">
            respond.Logged=true;
          </return>
          <return value="0" message="NENHUMA ALTERAÇÃO EFETUADA" error=""/>
          <return value="-1" message="" error="CARDINVALIDID"/>
          <return value="-2" message="" error="REQUIREDUSEROPERATION"/>
          <return value="-3" message="" error="CARDNOTFOUND"/>
        </returns>
      </item>

      <item  webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="ChangeOwner" return="int" returnmode="5" procname="PRREGCRTCHGOWN" desc ="Altera o Gestor do Cartão em uso">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0
DECLARE @NUMCRT VARCHAR(20)=N'';
DECLARE @AUDDSC VARCHAR(512)=N'';
DECLARE @NIDCRT VARCHAR(12)=N'';

IF(@USUPRO <=0)
    SET @RETURN_VALUE=-6   

IF(@RETURN_VALUE=0)
		BEGIN
			IF(@CODCRT<=0)
				SET @RETURN_VALUE=-1
	    END
IF(@RETURN_VALUE=0)
		BEGIN
			IF(@UPDUSU<=0)
				SET @RETURN_VALUE=-2
		END

IF(@RETURN_VALUE=0)
		BEGIN
			IF(EXISTS(SELECT 1 FROM TBREGCRT (NOLOCK) WHERE CODCRT = @CODCRT AND USUPRO=@USUPRO)) 
				SET @RETURN_VALUE = -3
		END

IF(@RETURN_VALUE = 0)
   BEGIN
		   SELECT @NUMCRT = ISNULL(NUMCRT,'') FROM TBREGCRT (NOLOCK) WHERE CODCRT = @CODCRT
       IF(@NUMCRT <>'')
          BEGIN
            IF(LEN(@NUMCRT)=16)
                BEGIN
		                 UPDATE TBREGCRT 
                        SET USUPRO = @USUPRO, 
                            DATUPD = GETDATE(), 
                            UPDUSU = @UPDUSU WHERE CODCRT = @CODCRT
		                 IF(@@ERROR=0)
                        BEGIN
                            SET @RETURN_VALUE=1                  
                        END
                END
          ELSE
              SET @RETURN_VALUE = -4
        END
      ELSE
        SET @RETURN_VALUE = -5
	END
RETURN @RETURN_VALUE
          
      ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código do Gestor" name="USUPRO" type="System.Int32" default="13" output="" null="false"/>
        </parameters>
        <returns>
          <return value="1" operator="==" message="CARTAO ALTERADO COM SUCESSO" error="OK">
            Auditing audit = new Auditing();
            audit.UPDUSU =pUPDUSU;
            audit.AUDDAT=DateTime.Now;
            audit.AUDKEY =KeyTableId;
            audit.AUDIDR =pCODCRT;
            audit.AUDIMS =0;
            audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
            audit.AUDOBJ = "PRREGCRTCHGOWN";
            audit.AUDSRC ="";
            audit.AUDCHG = "ALTEROU O USUARIO GESTOR DO CARTAO PARA " + pUSUPRO.ToString();
            audit.NIDTOK =0;
            audit.NUMIPA =Environment.MachineName;
            _AUDNUM=WriteAuditing.Insert(audit);
            respond.Logged=_AUDNUM>0;
          </return>

          <return value="-1" message="" error="CARDINVALIDID"/>
          <return value="-2" message="" error="REQUIREDUSEROPERATION"/>
          <return value="-3" message="" error="CARDALREADYBELONGMANAGER"/>
          <return value="-4" message="" error="CARDINVALIDLENGTH"/>
          <return value="-5" message="" error="CARDINVALIDPANNUMBER"/>
          <return value="-6" message="" error="INVALIDMANAGERCODE"/>
        </returns>
      </item>

      <item webtype="[HttpPost]"  responsemode="1" script="true" alias="A." sql="" type="" method="CancelMonthlyFees" return="int" returnmode="2" procname="PRREGCRTCHGMEN" desc ="Executa Ações de Atualização pela manutenção do Cartão" returnvalue="0" remarks="1 - Reativa a mensalidade de um usuário do cartão@3 - Inativa a mensalidade de um usuário do cartão">
        <query merge="true">
          <![CDATA[
SET @RETURN_VALUE = 0
IF(@UPDUSU<=0)
   SET @RETURN_VALUE=-1

 IF(@CODACT=1 AND @RETURN_VALUE=0)
    BEGIN
        UPDATE TBREGMEN SET STAREC =1, UPDUSU = @UPDUSU,  DATUPD = GETDATE(),SRCCAN=0 
         WHERE STAREC = 13
           AND STAMEN = 261 
           AND TIPMEN=  1         // Mensalidade cartão
           AND MODREG=  1         // Provisao
           AND BXAREG = 0         // Registro nao baixado 
				   AND CODREF = @CODCRT	  // Referencias do Cartão
           AND SRCCAN = 1
    END
IF(@CODACT=3 AND @RETURN_VALUE=0)
    BEGIN
        UPDATE TBREGMEN SET STAREC =13, UPDUSU = @UPDUSU,  DATUPD = GETDATE() 
         WHERE STAREC = 1
           AND STAMEN = 261 
           AND TIPMEN=  1         // Mensalidade cartão
           AND MODREG=  1         // Provisao
           AND BXAREG = 0         // Registro nao baixado 
				   AND CODREF = @CODCRT	  // Referencias do Cartão
           AND SRCCAN = 0
    END
RETURN @RETURN_VALUE        
        ]]>
        </query>
        <parameters>
          <parameter input="true" apply="false" desc ="Código do Cartão" name="CODCRT" type="System.Int32"  default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Código de Ação" name="CODACT" type="System.Byte" default="" output="" null="false"/>
        </parameters>

        <returns>

          <return value="0" operator=">" message="MENSALIDADES DO CARTAO ALTERADAS COM SUCESSO" error="OK">
            Auditing audit = new Auditing();
            audit.UPDUSU =pUPDUSU;
            audit.AUDDAT=DateTime.Now;
            audit.AUDKEY =KeyTableId;
            audit.AUDIDR =pCODCRT;
            audit.AUDIMS =0;
            audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
            audit.AUDOBJ = "PRREGCRTCHGMEN";
            audit.AUDSRC ="";
            audit.AUDCHG = String.Format("{0} REGISTROS DE MENSALIDADE DO CARTAO FORAM {1}",RETURN_VALUE,((pCODACT==1)? "RECUPERADAS":"CANCELADAS"));
            audit.NIDTOK =0;
            audit.NUMIPA =Environment.MachineName;
            _AUDNUM=WriteAuditing.Insert(audit);
            respond.Logged=_AUDNUM>0;
          </return>

          <return value="0" message="" error="EMPTYDATARECORDS"/>
          <return operator=">" value="0" message="ATUALIZAÇÃO DE MENSALIDADES EFETUADA COM SUCESSO" error="OK"/>
          <return value="-1" message="" error="REQUIREDUSEROPERATION"/>
        </returns>

      </item>

      <item webtype="[HttpGet]" script="true" alias="A." sql="" method="IsActivatable" return="int" procname="PRREGCRTGETATV" desc ="Verifica se o cartão e o CPF/CNPJ informado são passíveis de ativação" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @CODCRT INT
DECLARE @STACRT SMALLINT
DECLARE @CMFASS VARCHAR(15)
SELECT @CODCRT = A.CODCRT, @STACRT = A.STACRT, @CMFASS = ISNULL(B.CODCMF,'') 
  FROM TBREGCRT (NOLOCK) A  
  LEFT JOIN TBCADGER (NOLOCK) B ON (A.ASSUSU = B.CODUSU) 
 WHERE A.NUMCRT=@NUMCRT

 IF(@@ROWCOUNT>0)
	BEGIN
		IF(@STACRT = 103)
			BEGIN
				IF(@CODCMF = @CMFASS)
					SET @RETURN_VALUE = 1
			END 
		ELSE
			IF(@STACRT = 109)
				BEGIN
					IF(@CODCMF = @CMFASS)
						SET @RETURN_VALUE = -1					
					ELSE
						SET @RETURN_VALUE = -2					
				END
			IF(@STACRT = 107)
				SET @RETURN_VALUE = -3					
	END
ELSE
	SET @RETURN_VALUE = -4					
RETURN @RETURN_VALUE;        
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Número do Cartão" name="NUMCRT" type="System.String" size="16" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código do CPF/CNPJ" name="CODCMF" type="System.String" size="15" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="1" message="" error="OK"/>
          <return value="-1" message="" error="CARDALREADYACTIVE"/>
          <return value="-2" message="" error="CARDASSOCIATEDOTHERUSER"/>
          <return value="-3" message="" error="CARDINPROCACTIVATION"/>
          <return value="-4" message="" error="CARDNOTFOUND"/>
        </returns>
      </item>


      <item webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="LockCard" return="int" procname="PRREGCRTLCKCRT" desc ="Operação@1 -Bloqueia o Cartão@2 - Reverte o Bloqueio Anterior@3 -Fixa o cartão como aguardando desbloqueio" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE = 0
DECLARE @AUDCHG VARCHAR(100)=N'';
DECLARE @AUDSRC VARCHAR(100) = N''
DECLARE @STAPRO SMALLINT
DECLARE @STACRT SMALLINT
SELECT @STAPRO = STAPRO, @STACRT = STACRT FROM TBRGCRT WHERE CODCRT =@CODCRT
IF(@TIPOPE=1)
	BEGIN
		 UPDATE TBREGCRT SET STAPRO = STACRT, STACRT = 127, DATUPD=GETDATE(), UPDUSU=@UPDUSU WHERE CODCRT =@CODCRT
			IF(@@ERROR=0)
           BEGIN
              SET @RETURN_VALUE=1           
              SET @AUDSRC= 'STAPRO: ' + CONVERT(VARCHAR, @STAPRO) + ',STACRT: ' + CONVERT(VARCHAR, @STACRT)
              SET @AUDCHG= 'STAPRO: ' + CONVERT(VARCHAR, @STACRT) + ',STACRT: 127'
           END
					
      ELSE
          SET @RETURN_VALUE=-1
	END	  
	  
IF(@TIPOPE=2)
	BEGIN
		 UPDATE TBREGCRT SET STACRT = STAPRO, DATUPD=GETDATE(), UPDUSU=@UPDUSU WHERE CODCRT =@CODCRT  AND STAPRO<>0
 		IF(@@ERROR=0)
          BEGIN
					SET @RETURN_VALUE=1
              SET @AUDSRC= 'STACRT: ' + CONVERT(VARCHAR, @STACRT)
              SET @AUDCHG= 'STACRT: ' + CONVERT(VARCHAR, @STAPRO)
          END
      ELSE
          SET @RETURN_VALUE=-2
	END	  

IF(@TIPOPE=3)
	BEGIN
		 UPDATE TBREGCRT SET STACRT = 128 WHERE CODCRT = @CODCRT AND STAPRO <> 0
			IF(@@ERROR=0)
          BEGIN
					SET @RETURN_VALUE=1
              SET @AUDSRC= 'STACRT: ' + CONVERT(VARCHAR, @STACRT)
              SET @AUDCHG= 'STACRT: 128'
          END
      ELSE
          SET @RETURN_VALUE=-2
	END	  

  IF(@RETURN_VALUE=1)
    BEGIN
  INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,      0, OBJECT_NAME(@@PROCID),@AUDSRC, @AUDCHG)        
    END
RETURN @RETURN_VALUE  
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Tipo de Operação de bloqueio" name="TIPOPE" type="System.Byte" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" operator=">" message="BLOQUEIO/DESBLOQUEIO REALIZADO COM SUCESSO" error="OK">
            respond.Logged=true;
          </return>
          <return value="-1" message="" error="LOCKCARDFAILREGISTER"/>
          <return value="-2" message="" error="UNLOCKFAILREGISTER"/>
        </returns>
      </item>


      <item webtype="[HttpPost]" responsemode="1"  script="true" alias="A." sql="" method="ChangeStatus" return="int" procname="PRREGCRTCHGSTA" desc ="Altera o Status de um Cartão" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @OLDSTA VARCHAR(100) = N''
DECLARE @STAANT SMALLINT
DECLARE @CODUSU INT
DECLARE @DELMEN TINYINT =0

IF(NOT EXISTS(SELECT 1 FROM TBCADSTA (NOLOCK) WHERE CODSTA = @STACRT AND STAREC=1))
		SET @RETURN_VALUE=-3

IF(@RETURN_VALUE=0)
  BEGIN
    IF(NOT EXISTS(SELECT 1 FROM TBREGCRT (NOLOCK) WHERE CODCRT = @CODCRT))
		    SET @RETURN_VALUE=-2
  END

SELECT @OLDSTA = STACRT
      ,@STAANT = ISNULL(STAPRO,0)
      ,@CODUSU=ASSUSU 
  FROM TBREGCRT (NOLOCK) 
 WHERE CODCRT =@CODCRT  

IF(@OLDSTA = @STACRT)
  SET @RETURN_VALUE = -4
  
IF(@RETURN_VALUE=0 AND (@RETURN_VALUE=0))
		BEGIN         
    	  UPDATE TBREGCRT 
    		   SET STAPRO = STACRT,
    			     STACRT = @STACRT,
    			     UPDUSU = @UPDUSU,
    			     DATUPD = GETDATE(),
					     CODBLO = @CODBLO,
               DSCMOT = @DSCMOT,
  		         DATCAN = CASE WHEN @DELMEN=1 THEN GETDATE() ELSE DATCAN END
    	   WHERE CODCRT = @CODCRT AND STAREC = 1 AND STACRT<>@STACRT
           
        IF(@@ERROR=0 AND @@ROWCOUNT>0)
            BEGIN
              SET @RETURN_VALUE=1                                                  
              DECLARE @AUDSRC VARCHAR(100) = N'STATUS DO CARTAO ' + CONVERT(VARCHAR,@OLDSTA)
              DECLARE @AUDCHG VARCHAR(100) = N'STATUS DO CARTAO ' + CONVERT(VARCHAR(10),@STACRT) 
              INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                            VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,     104, OBJECT_NAME(@@PROCID),@AUDSRC, @AUDCHG)        
           END                            
      END        
RETURN @RETURN_VALUE
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Novo Status do Cartão" name="STACRT" type="System.Int16" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código de Desbloqueio" name="CODBLO" type="System.Int16"  default="0" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Motivo" name="DSCMOT" type="System.String"  size="50" default="''" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="1" message="STATUS DO CARTAO ALTERADO COM SUCESSO" error="OK">
            respond.Logged=true;
          </return>
          <return value="-1" message="" error="FAILUREUPDATECARD"/>
          <return value="-2" message="" error="CARDNOTFOUND"/>
          <return value="-3" message="CODIGO DE STATUS INEXISTENTE" error="RECORDNOTFOUND"/>
          <return value="-4" message="ATUALIZAÇÃO NEGADA: OS STATUS SÃO IGUAIS" error="FAILUREUPDATECARD"/>
        </returns>
      </item>

      <item webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="ChangePin" return="int" procname="PRREGCRTCHGPSW" desc ="Efetua a alteração da senha do cartão" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @OLDPSW VARCHAR(100) = N''
IF(EXISTS (SELECT 1 FROM TBREGCRT (NOLOCK) WHERE CODCRT =@CODCRT AND STAREC=1))
  BEGIN
    SELECT @OLDPSW = ISNULL(PSWCRT,'') FROM TBREGCRT (NOLOCK) WHERE CODCRT =@CODCRT  
	  UPDATE TBREGCRT 
		   SET PSWCRT = @PSWCRT,
			     UPDUSU = @UPDUSU,
			     DATUPD = GETDATE()
	   WHERE CODCRT = @CODCRT
       AND STAREC = 1
    IF(@@ERROR=0)
        BEGIN
            SET @RETURN_VALUE=1        
            DECLARE @AUDSRC VARCHAR(100) = N'SENHA DO CARTAO ' + @OLDPSW
            DECLARE @AUDCHG VARCHAR(100) = N'SENHA DO CARTAO ' + @PSWCRT  
            INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                          VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,     105, OBJECT_NAME(@@PROCID),@AUDSRC, @AUDCHG)        

        END
  END  
ELSE
    SET @RETURN_VALUE=-2
RETURN @RETURN_VALUE   
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Novo Senha do Cartão" name="PSWCRT" type="System.String" size="10" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Endereço de Localização" name="NUMIPA" type="System.String" size="50" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="1" message="SENHA ALTERADA COM SUCESSO" error="OK">
            respond.Logged=true;
          </return>
          <return value="-1" message="" error="FAILUREUPDATECARD"/>
          <return value="-2" message="" error="CARDNOTFOUND"/>
        </returns>
      </item>

      <item webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="ChangeCVC" return="int" procname="PRREGCRTCHGCVC" desc ="Efetua a alteração do número o CVC do Cartão" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @OLDCVC VARCHAR(10) = N''
BEGIN TRANSACTION
BEGIN TRY
IF(EXISTS (SELECT 1 FROM TBCADCRT WHERE CODCRT =@CODCRT))
  BEGIN
    SELECT @OLDCVC = CONVERT(VARCHAR(10),ISNULL(NUMCVC,0)) 
     FROM TBCADCRT WHERE CODCRT =@CODCRT
	  UPDATE TBREGCRT 
		   SET NUMCVC = @NUMCVC,
			     UPDUSU = @UPDUSU,
			     DATUPD = GETDATE()
	   WHERE CODCRT = @CODCRT
       AND STAREC = 1
    IF(@@ERROR=0)
        BEGIN
            DECLARE @AUDSRC VARCHAR(100) = N'NUMERO DO CVC ' + @OLDCVC          
            DECLARE @AUDCHG VARCHAR(100) = N'NUMERO DO CVC ' + CONVERT(VARCHAR(10), @NUMCVC)  
            INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                          VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,     106, OBJECT_NAME(@@PROCID),@AUDSRC, @AUDCHG)        
        END
  END        
END TRY
BEGIN CATCH
  SET @RETURN_VALUE=-1
END CATCH

IF(@RETURN_VALUE=1)
  COMMIT TRAN
ELSE
   ROLLBACK TRAN
RETURN @RETURN_VALUE   
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Novo Número do CVC" name="NUMCVC" type="System.Int16" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="1" message="" error="OK"/>
          <return value="-1" message="" error="FAILUREUPDATECARD"/>
        </returns>
      </item>

      <item webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="CancelAssociation" return="int" procname="PRREGCRTCHGASS" desc ="Cancela a associação de um cartão" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @STAOLD SMALLINT
IF(EXISTS (SELECT 1 FROM TBREGCRT WHERE CODCRT =@CODCRT AND ASSUSU>0 AND STACRT<>101))
  BEGIN
    SELECT @STAOLD = STACRT FROM TBREGCRT (NOLOCK) WHERE CODCRT=@CODCRT
    UPDATE TBREGCRT 
       SET NOMPRT='',
           NOMCR1='',
           NOMCR2='',
	         NOMCR3='',
           STAPRO = @STAOLD,           
	         STACRT = 101,
	         UPDUSU = @UPDUSU,
	         DATUPD = GETDATE(),
           ASSUSU = 0
	   WHERE CODCRT = @CODCRT
        IF(@@ERROR=0)
            BEGIN
                DECLARE @AUDSRC VARCHAR(100) = N'STATUS ANTERIOR DO CARTAO : ' + CONVERT(VARCHAR, @STAOLD)
                DECLARE @AUDCHG VARCHAR(100) = N'ALTEROU O STATUS DO CARTAO PARA 101 - EM ESTOQUE' 
                INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                              VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,     104, OBJECT_NAME(@@PROCID),@AUDSRC, @AUDCHG)        
            END
  END        
RETURN @RETURN_VALUE   
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="1" message="" error="OK"/>
          <return value="-1" message="" error="FAILUREUPDATECARD"/>
        </returns>
      </item>

    </methods>
  </item>
  <item create="true"  id="15" name="TBLINPRO" friendlyname="ProductLine" modelversion="3" descriptor="Linha de Produto">
    <CSharpPartial>False</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <MaxFields>LINPRO</MaxFields>
    <extendedmodel>
      SELECT TOP 1 A.*, DSCREC= ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,'') FROM TBLINPRO (NOLOCK) A
      INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =7 AND B.KEYCOD=A.STAREC)
      LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU  AND C.REGATV=1)
    </extendedmodel>

    <insertcommand key="Key" exceptionparamns="'DATCAD'" method="Insert" processcode="010">
      <maxfield field="LINPRO"/>
      <nextnumber field="" id="" />
      <pre></pre>
      <body></body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="LINHA DE PRODUTO INCLUIDA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRLINPROINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="LINPRO" exceptionparamns="'DATCAD'" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="LINHA DE PRODUTO ALTERADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRLINPROUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="ProductLine" procname="" desc ="Seleciona o registro de acordo com o Código da Linha">
        <query>
          <![CDATA[SELECT * FROM TBLINPRO (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Linha de Produto" name="LINPRO" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>

  </item>


  <item create="true"  id="16" name="TBCADPRO" friendlyname="Product" modelversion="3" descriptor="Tabela de Produtos">
    <CSharpPartial>False</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      <![CDATA[
SELECT TOP 1 A.*      
      ,DSCLIN
      ,DSCREC = ISNULL(B.DSCTAB,'')    
      ,LGNUSU = ISNULL(C.LGNUSU,'')
      ,DSCCDT = CASE WHEN (A.ATVCDT=1) THEN 'Sim' else 'Não' END
      ,DSCGPA = CASE WHEN (A.ATVGPA=1) THEN 'Sim' else 'Não' END      
      ,DSCBNF = CASE WHEN (A.INDBNF=1) THEN 'Sim' else 'Não' END            
  FROM TBCADPRO A WITH (NOLOCK) 
  LEFT JOIN TBTABGER B (NOLOCK)  ON (7 = B.NUMTAB AND A.STAREC = B.KEYCOD)
  LEFT JOIN TBLGNUSU C (NOLOCK)  ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
  LEFT JOIN TBLINPRO D (NOLOCK)  ON (A.LINPRO = D.LINPRO)
    
    ]]>
    </extendedmodel>

    <insertcommand key="key" fieldreturn="CODPRO" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert" processcode="010">
      <maxfield field=""/>
      <nextnumber field="CODPRO" id="3" />
      <pre>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="PRODUTO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADPROINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </insertcommand>

    <updatecommand key="key" fieldreturn="CODPRO" exceptionparamns="'DATCAD'" procname=""  method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="CODPRO" id="3" />
      <pre>
        SET @DATUPD=GETDATE()
      </pre>
      <body></body>
      <pos>
        <![CDATA[
IF(@STAREC=0 AND @RETURN_VALUE>0)
  UPDATE TBUSUPRO SET STAREC=0,DATUPD=GETDATE() WHERE CODPRO=@CODPRO
]]>
      </pos>
      <returns>

        <return value="0" operator=">" message="PRODUTO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADPROUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>


    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="Product" procname="" desc ="Obtêm o registro do produto de acorco o código de produto informado">
        <query>
          <![CDATA[SELECT * FROM TBCADPRO (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Produto" name="CODPRO" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>

  </item>


  <item create="true"  id="17" name="TBUSUPRO" friendlyname="ProductManager" modelversion="3" descriptor="Gestores de Produtos">
    <CSharpPartial>TRUE</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1110000000</procedure>
    <asp>1110000000</asp>
    <csharp>1110000000</csharp>
    <extendedmodel>
      <![CDATA[
SELECT TOP 1 A.*
      , B.NOMUSU
      , C.DSCPRO
      , DSCAPL = CASE WHEN (APLINT=1 ) THEN 'Sim' ELSE 'Nao' END
      , DSCRVC = CASE WHEN (APLRVC=1 ) THEN 'Sim' ELSE 'Nao' END    
      , DSCCES = CASE WHEN (APLRVC=1 ) THEN 'Sim' ELSE 'Nao' END    
      , DSCTAD = CASE WHEN (APLRVC=1 ) THEN 'Sim' ELSE 'Nao' END    
      , DSCREC = ISNULL(D.DSCTAB, '')
      , LGNUSU = ISNULL(E.LGNUSU,'')      
      , HASCFG = CASE WHEN F.NIDCFG IS NULL THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END 
      , CNTTAR = ISNULL(G.CNTTAR,0)       
 FROM TBUSUPRO (NOLOCK) A 
INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
INNER JOIN TBCADPRO (NOLOCK) C ON (C.CODPRO = A.CODPRO)
INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 7 AND D.KEYCOD = A.STAREC)
 LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1 AND E.STAREC=1)          
 LEFT JOIN TBUSUCFG (NOLOCK) F ON (F.USUCFG  = A.USUPRO AND F.NIVCFG = 1)
 LEFT JOIN (SELECT USUCFG, NIVCFG, CNTTAR =COUNT(*)  FROM TBCADTAR (NOLOCK) GROUP BY USUCFG, NIVCFG) G ON (G.USUCFG = A.USUPRO AND G.NIVCFG = 1)     
    
    ]]>
    </extendedmodel>

    <insertcommand key="Field" fieldreturn="USUPRO" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="USUPRO" id="42" />
      <pre></pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRUSUPROINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </insertcommand>
    <updatecommand key="Field" fieldreturn="USUPRO" exceptionparamns="'DATCAD'" procname="" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="USUPRO" id="42" />
      <pre>

      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRUSUPROUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" processcode="105" method="Select" return="ProductManager" procname="PRUSUPROSEL" desc ="Obtêm o registro de Gerencia de Produto de acordo com ocódigo do gestor">
        <query>
          <![CDATA[SELECT * FROM TBUSUPRO (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Gestor" name="USUPRO" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>

      <item script="true" alias="A." sql="" processcode="110" method="Select" return="ProductManager" procname="PRUSUPROLOC" desc ="Obtêm o Código do Gestor de Produto com base no produto e usuário">
        <query>
          <![CDATA[SELECT * FROM TBUSUPRO (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código do Produto" name="CODPRO" type="System.Int16" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>

  <item create="true"  id="18" name="TBCADCRT" friendlyname="ProductCards" modelversion="3" descriptor="Cadastro de Cartões">
    <UpdateKey>Key</UpdateKey>
    <audit>true</audit>
    <CSharpPartial>true</CSharpPartial>
    <SqlTable></SqlTable>
    <extendedmodel><![CDATA[]]></extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>

    <insertcommand key="Key" fieldreturn="CODCRT" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="010">
      <maxfield field=""/>
      <nextnumber field="CODCRT" id="5" />
      <pre>
      </pre>
      <body></body>
      <pos>

      </pos>
      <returns>
        <return value="0" operator=">" message="CARTAO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRADMCRTINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>


    <migrationcommand key="Key" fieldreturn="CODCRT" source="ActiveCards" sql ="SELECT * FROM TBREGCRT (NOLOCK) WHERE CODCRT=-1" exceptionparamns="'DATCAD','DATUPD'" method="MigrateTo" processcode="015" procname="PRCADCRTREGCRT" desc ="Efetua a transferencia de um catão da base de disponíveis para o Registro de Cartões">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF (@STAREC!=1)
    SET @RETURN_VALUE=-1;

IF(@RETURN_VALUE=0)
  BEGIN
    IF(EXISTS (SELECT 1 FROM TBREGCRT (NOLOCK) WHERE CODCRT=@CODCRT))
      SET @RETURN_VALUE=-2;
  END
IF(@RETURN_VALUE=0)
  BEGIN
     SET @LOTMIG=0;
     EXEC @LOTMIG = PRGETNXTNUM 41
  END
  
]]>


      </pre>
      <body></body>
      <pos>
        <![CDATA[
IF(@RETURN_VALUE=0)
   BEGIN
       UPDATE TBCDCRT SET STACRT=131, SET STAREC=2, DATUPD=GETDATE(), UPDUSU=@UPDUSU WHERE CODCRT =@CODCRT
   END
]]>



      </pos>
      <returns>
        <return value="0" operator=">" message="CARTAO MIGRADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =pCODCRT;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADCRTREGCRT";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="O CARTAO INFORMADO NAO PODE SER MIGRADO" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </migrationcommand>
    <updatecommand key="key" fieldreturn="CODCRT" exceptionparamns="'DATCAD'" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        SET @DATUPD=GETDATE();
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="CARTAO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRADMCRTUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>


    <selectcommand>
      <item script="true" alias="A." sql="" method="Select" return="ProductCards" procname="PRADMCRTSEL" desc ="Seleciona o registro de acordo com o Código do Cartão">
        <query>
          <![CDATA[SELECT * FROM TBREGCRT (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
      <item script="true" alias="A." sql="" method="Select" return="ProductCards" procname="PRADMCRTSELCRT" desc ="Seleciona o registro de acordo com o Código Extendido do Cartão">
        <query>
          <![CDATA[SELECT * FROM TBREGCRT (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código Extendido do Cartão" name="NUMCRT" type="System.String" size="16" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>


    <methods>
      <item webtype="[HttpGet]" script="true" alias="A." sql="" method="IsAlocated" return="int" procname="PRADMCRTGETATV"  desc="Verifica se o cartão já foi alocado para um portador" remarks ="ADM : Verifica se o cartão pode ser alocado, retorna :@ [-1] - indicado que o cartão não possui uma alocação.@[ 1] - Indicando que o cartão possui uma alocação.@[ 0] - Se o cartão não foi encontrado" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
IF(EXISTS (SELECT 1 FROM TBADMCRT (NOLOCK) WHERE CODCRT = @CODCRT AND STACRT=131))
   SET @RETURN_VALUE=1
ELSE
   SET @RETURN_VALUE=-1
RETURN @RETURN_VALUE;        
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Cartão" name="CODCRT" type="System.Int32" size="16" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="1" message="O CARTAO JA ESTA ALOCADO PARA UM PORTADOR" error=""/>
          <return value="0" message="NAO FOI POSSIVEL LOCALIZAR O CARTAO" error="CARDNOTFOUND"/>
          <return value="-1" message="O CARTAO NAO POSSUI ALOCACAO" error=""/>
        </returns>
      </item>

      <item webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="ChangeStatus" return="int" procname="PRADMCRTCHGSTA" desc ="ADM : Altera o Status de um Cartão" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @OLDSTA VARCHAR(100) = N''
DECLARE @STAANT SMALLINT
DECLARE @CODUSU INT
DECLARE @DELMEN TINYINT =0

IF(NOT EXISTS(SELECT 1 FROM TBCADSTA (NOLOCK) WHERE CODSTA = @STACRT AND STAREC=1))
		SET @RETURN_VALUE=-3

IF(@RETURN_VALUE=0)
  BEGIN
    IF(NOT EXISTS(SELECT 1 FROM TBADMCRT (NOLOCK) WHERE CODCRT = @CODCRT))
		    SET @RETURN_VALUE=-2
  END


SELECT @OLDSTA = CONVERT(VARCHAR(10),ISNULL(STACRT,0))
      ,@STAANT = ISNULL(STAPRO,0)
      ,@CODUSU=ASSUSU 
  FROM TBADMCRT (NOLOCK) 
 WHERE CODCRT =@CODCRT  
        
IF(@RETURN_VALUE=0)
		BEGIN         
    	  UPDATE TBADMCRT 
    		   SET STAPRO = STACRT,
    			     STACRT = @STACRT,
    			     UPDUSU = @UPDUSU,
    			     DATUPD = GETDATE(),
					     CODBLO = @CODBLO,
               DSCMOT = @DSCMOT,
  		         DATCAN = CASE WHEN @MENDEL=1 THEN GETDATE() ELSE DATCAN END
    	   WHERE CODCRT = @CODCRT AND STACRT<>@STACRT
           
        IF(@@ERROR=0)
            BEGIN
                SET @RETURN_VALUE=1        
                DECLARE @AUDSRC VARCHAR(100) = N'STATUS DO CARTAO ' + @OLDSTA
                DECLARE @AUDCHG VARCHAR(100) = N'STATUS DO CARTAO ' + CONVERT(VARCHAR(10),@STACRT) 
                INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                              VALUES (@UPDUSU, GETDATE(),     18, @CODCRT,     104, OBJECT_NAME(@@PROCID),@AUDSRC, @AUDCHG)        
                SET @RETURN_VALUE=1                                          
            END
      END        
RETURN @RETURN_VALUE
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Novo Status do Cartão" name="STACRT" type="System.Int16" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código de Desbloqueio" name="CODBLO" type="System.Int16"  default="0" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Motivo" name="DSCMOT" type="System.String"  size="50" default="''" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="1" message="STATUS DO CARTAO ALTRADO COM SUCESSO" error="OK">
            respond.Logged=true;
          </return>
          <return value="-1" message="" error="FAILUREUPDATECARD"/>
          <return value="-2" message="" error="CARDNOTFOUND"/>
          <return value="-3" message="CODIGO DE STATUS INEXISTENTE" error="RECORDNOTFOUND"/>
        </returns>
      </item>

      <item webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="ChangePin" return="int" procname="PRADMCRTCHGPSW" desc ="Efetua a alteração da senha do cartão" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @OLDPSW VARCHAR(100) = N''
IF(EXISTS (SELECT 1 FROM TBADMCRT (NOLOCK) WHERE CODCRT =@CODCRT AND STAREC=1))
  BEGIN
    SELECT @OLDPSW = ISNULL(PSWCRT,'') FROM TBADMCRT (NOLOCK) WHERE CODCRT =@CODCRT  
	  UPDATE TBADMCRT 
		   SET PSWCRT = @PSWCRT,
			     UPDUSU = @UPDUSU,
			     DATUPD = GETDATE()
	   WHERE CODCRT = @CODCRT
       AND STAREC = 1
    IF(@@ERROR=0)
        BEGIN
            SET @RETURN_VALUE=1        
            DECLARE @AUDSRC VARCHAR(100) = N'SENHA DO CARTAO ' + @OLDPSW
            DECLARE @AUDCHG VARCHAR(100) = N'SENHA DO CARTAO ' + @PSWCRT  
            INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                          VALUES (@UPDUSU, GETDATE(),     18, @CODCRT,     105, OBJECT_NAME(@@PROCID),@AUDSRC, @AUDCHG)        

        END
  END  
ELSE
    SET @RETURN_VALUE=-2
END TRY
RETURN @RETURN_VALUE   
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Novo Senha do Cartão" name="PSWCRT" type="System.String" size="10" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Endereço de Localização" name="NUMIPA" type="System.String" size="50" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="1" message="SENHA ALTERADA COM SUCESSO" error="OK">
            respond.Logged=true;
          </return>
          <return value="-1" message="" error="FAILUREUPDATECARD"/>
          <return value="-2" message="" error="CARDNOTFOUND"/>
        </returns>
      </item>

      <item webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="ChangeCVC" return="int" procname="PRADMCRTCHGCVC" desc ="Efetua a alteração do número o CVC do Cartão" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @OLDCVC VARCHAR(10) = N''
BEGIN TRANSACTION
BEGIN TRY
IF(EXISTS (SELECT 1 FROM TBCADCRT WHERE CODCRT =@CODCRT))
  BEGIN
    SELECT @OLDCVC = CONVERT(VARCHAR(10),ISNULL(NUMCVC,0)) 
     FROM TBCADCRT WHERE CODCRT =@CODCRT
	  UPDATE TBREGCRT 
		   SET NUMCVC = @NUMCVC,
			     UPDUSU = @UPDUSU,
			     DATUPD = GETDATE()
	   WHERE CODCRT = @CODCRT
       AND STAREC = 1
    IF(@@ERROR=0)
        BEGIN
            DECLARE @AUDSRC VARCHAR(100) = N'NUMERO DO CVC ' + @OLDCVC          
            DECLARE @AUDCHG VARCHAR(100) = N'NUMERO DO CVC ' + CONVERT(VARCHAR(10), @NUMCVC)  
            INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                          VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,     106, OBJECT_NAME(@@PROCID),@AUDSRC, @AUDCHG)        
        END
  END        
END TRY
BEGIN CATCH
  SET @RETURN_VALUE=-1
END CATCH

IF(@RETURN_VALUE=1)
  COMMIT TRAN
ELSE
   ROLLBACK TRAN
RETURN @RETURN_VALUE   
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Novo Número do CVC" name="NUMCVC" type="System.Int16" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="1" message="" error="OK"/>
          <return value="-1" message="" error="FAILUREUPDATECARD"/>
        </returns>
      </item>

      <item webtype="[HttpPost]" responsemode="1" script="true" alias="A." sql="" method="CancelAssociation" return="int" procname="PRREGCRTCHGASS" desc ="Efetua o cancelamento da associação de um cartão" returnvalue="1">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
IF(EXISTS (SELECT 1 FROM TBREGCRT WHERE CODCRT =@CODCRT AND ASSUSU>0 AND ASSPRT>0))
  BEGIN
	  UPDATE TBREGCRT 
		   SET NOMPRT='',
		       NOMCR1='',
			     NOMCR2='',
			     NOMCR3='',
           STAPRO = STACRT,           
			     STACRT = 101,
			     UPDUSU = @UPDUSU,
			     DATUPD = GETDATE(),
           ASSPRT = 0,
           ASSUSU = 0
	   WHERE CODCRT = @CODCRT
    IF(@@ERROR=0)
        BEGIN
            DECLARE @AUDSRC VARCHAR(100) = N'ALTEROU O STATUS DO CARTAO PARA 101 - EM ESTOQUE
            DECLARE @AUDCHG VARCHAR(100) = N'ALTEROU O STATUS DO CARTAO PARA 101 - EM ESTOQUE  
            INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC, AUDCHG) 
                          VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,     104, OBJECT_NAME(@@PROCID),@AUDSRC, @AUDCHG)        
        END
  END        
RETURN @RETURN_VALUE   
   
          
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="1" message="" error="OK"/>
          <return value="-1" message="" error="FAILUREUPDATECARD"/>
        </returns>
      </item>
    </methods>
  </item>


  <!--<item create="true"  id="19" name="TBTIPCTO" friendlyname="AccountType" modelversion="3" descriptor="Tipo de Conta">
    <UpdateKey>Key</UpdateKey>
    <audit>FALSE</audit>
    <CSharpPartial>False</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <selectcommand>
      <item script="true" alias="A." sql="" method="Select" return="AccountType" procname="" desc ="Seleciona o tipo de conta">
        <query>
          <![CDATA[SELECT * FROM TBTIPCTO (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Tipo de Conta" name="TIPCTA" type="System.Byte" default="" output="" null="false"/>
        </parameters>
      </item>

      <item script="true" alias="A." sql="" method="List" return="AccountType" procname="" desc ="Obtêm uma lista de todos os tipos de contas existentes">
        <query>
          <![CDATA[SELECT * FROM TBTIPCTO (nolock) A]]>
        </query>
      </item>

    </selectcommand>

    <insertcommand key="Key" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert">
      <maxfield field="TIPCTO"/>
      <nextnumber field="" id="" />
      <pre>
        IF(EXISTS (SELECT 1 FROM TBTIPCTO (NOLOCK) WHERE DSCCTO = @DSCCTO))
        SET @RETURN_VALUE=-2;
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPCTAINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="FALHA NA INCLUSAO DO REGISTRO" error="FAILALL"/>
        <return value="-2" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </insertcommand>
    <updatecommand key="Key" fieldreturn="TIPCTO" exceptionparamns="'DATCAD'" procname="" method="Update">
      <maxfield field="TIPCTO"/>
      <nextnumber field="" id="" />
      <pre>
        SET @DATUPD = GETDATE();
        IF(EXISTS (SELECT 1 FROM TBTIPCTO (NOLOCK) WHERE DSCCTO = @DSCCTO AND TIPCTO!=@TIPCTO))
        SET @RETURN_VALUE=-2;

      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPCTAUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO PARA OUTRO REGISTRO" error="ATTRIBUTEFOUNDED"/>

      </returns>
    </updatecommand>
  </item>-->


  <item create="true"  id="20" name="TBTIPCTA" friendlyname="AccountType" modelversion="3" descriptor="Tipos de Conta">
    <UpdateKey>Key</UpdateKey>
    <audit>FALSE</audit>
    <CSharpPartial>False</CSharpPartial>
    <SqlTable></SqlTable>
    <extendedmodel>
      SELECT TOP 1 A.*, B.DSCTAB AS DSCREC, ISNULL(C.LGNUSU,'') LGNUSU
      FROM TBTIPCTA (NOLOCK) A INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC)
      LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <selectcommand>
      <item script="true" alias="A." sql="" method="Select" return="AccountType" procname="" desc ="Obtêm o registro do tipo de conta informado">
        <query>
          <![CDATA[SELECT * FROM TBTIPCTA (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Tipo de Conta" name="TIPCTA" type="System.Byte" default="" output="" null="false"/>
        </parameters>
      </item>


    </selectcommand>

    <insertcommand key="Key" exceptionparamns="'DATCAD','DATUPD'" procname="" method="Insert" processcode="10">
      <maxfield field="TIPCTA"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF(EXISTS (SELECT 1 FROM TBTIPCTA (NOLOCK) WHERE DSCCTA = @DSCCTA))
    SET @RETURN_VALUE=-2;
      
      ]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPCTOINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="FALHA NA INCLUSAO DO REGISTRO" error="FAILALL"/>
        <return value="-2" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </insertcommand>
    <updatecommand key="Key" fieldreturn="TIPCTA" exceptionparamns="'DATCAD'" procname="" method="Update" processcode="020">
      <maxfield field="TIPCTA"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD = GETDATE();
IF(EXISTS (SELECT 1 FROM TBTIPCTA (NOLOCK) WHERE DSCCTA = @DSCCTA AND TIPCTA!=@TIPCTA))
   SET @RETURN_VALUE=-2;
      ]]>

      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPCTOUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO PARA OUTRO REGISTRO" error="ATTRIBUTEFOUNDED"/>

      </returns>
    </updatecommand>
  </item>


  <item create="true"  id="21" name="TBSYSGRP" friendlyname="Groups" modelversion="3" descriptor="Groups">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>SELECT TOP 1 A.*, DSCREC= ISNULL(B.DSCTAB,''), LGNUSU= ISNULL(C.LGNUSU,'') FROM TBSYSGRP (NOLOCK) A INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC) LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)</extendedmodel>

    <insertcommand key="Key" fieldreturn="SYSGRP" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field="SYSGRP"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        IF((@DSCGRP IS NULL) OR (@DSCGRP = ''))
           SET @RETURN_VALUE=-3;

        IF(@RETURN_VALUE=0)
            BEGIN
                IF(EXISTS( SELECT 1 FROM TBSYSGRP (NOLOCK) WHERE DSCGRP=@DSCGRP))
                    SET @RETURN_VALUE=-2;
            END                    
      
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRSYSGRPINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="A DESCRICAO DO GRUPO NAO FOI INFORMADA" error="INVALIDARGUMENT"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="SYSGRP" exceptionparamns="'DATCAD'" method="Update" processcode="020">
      <maxfield field="SYSGRP"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        SET @DATUPD=GETDATE();
        
        IF((@DSCGRP IS NULL) OR (@DSCGRP = ''))
           SET @RETURN_VALUE=-3;

        IF(@RETURN_VALUE=0)
            BEGIN
                IF(EXISTS( SELECT 1 FROM TBSYSGRP (NOLOCK) WHERE DSCGRP=@DSCGRP AND SYSGRP<>@SYSGRP) )
                    SET @RETURN_VALUE=-2;
            END                    
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRSYSGRPUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
        <return value="-4" message="JA EXISTE UM REGISTRO DIFERENTE COM ESTA MESMA DESCRICAO" error="RECORDFOUND"/>
        <return value="-3" message="A DESCRICAO DO GRUPO NAO FOI INFORMADA" error="INVALIDARGUMENT"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="Groups" procname="PRSYSGRPSEL" desc ="Obtêm o registro do grupo">
        <query>
          <![CDATA[SELECT * FROM TBSYSGRP (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Grupo" name="SYSGRP" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
      <item script="true" alias="A." sql="" processcod="105" method="List" type="List" return="Groups" procname="PRSYSGRPSELALL" desc ="Obtêm uma lista de todos os grupos existentes">
        <query order="A.SYSGRP">
          <![CDATA[SELECT A.*, DSCREC= ISNULL(B.DSCTAB,''), LGNUSU= ISNULL(C.LGNUSU,'') FROM TBSYSGRP (NOLOCK) A INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC) LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)]]>
        </query>
      </item>
    </selectcommand>
  </item>

  <item create="true"  id="22" name="TBSYSUXG" friendlyname="UserGroup" modelversion="3" descriptor="User Group">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      SELECT TOP 1 A.*, B.NOMUSU, C.DSCGRP, DSCREC = ISNULL(D.DSCTAB,''), LGNUSU = ISNULL(E.LGNUSU,'')
      FROM TBSYSUXG (NOLOCK) A
      INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
      INNER JOIN TBSYSGRP (NOLOCK) C ON (C.SYSGRP = A.SYSGRP)
      LEFT JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 7 AND D.KEYCOD = A.STAREC)
      LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1)
    </extendedmodel>

    <insertcommand key="Identity" fieldreturn="USUGRP" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[

      IF(@RETURN_VALUE=0)
            BEGIN
                IF(EXISTS( SELECT 1 FROM TBUSUGRP (NOLOCK) WHERE CODUSU = @CODUSU AND SYSGRP = @SYSGRP))
                    SET @RETURN_VALUE=-2;
            END                    
      
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRSYSUXGINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="O USUARIO JÁ ESTÁ ASSOCIADO AO GRUPO" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="USUGRP" exceptionparamns="'DATCAD'" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        SET @DATUPD=GETDATE();
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRUSYSUXGUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="UserGroup" procname="PRUSUGRPSEL" desc ="Obtêm o registro de associação do usuário e grupo">
        <query>
          <![CDATA[SELECT * FROM TBSYSUXG (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID de Associação Usuário x Grupo" name="USUGRP" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
      <item script="true" alias="A." sql="" processcod="105" method="List" type="List" return="Groups" procname="PRSYSGRPSELALL" desc ="Obtêm uma lista de todos os registros de usuário x grupo existentes">
        <query order="A.SYSGRP">
          <![CDATA[
SELECT A.*, B.NOMUSU, C.DSCGRP, DSCREC = ISNULL(D.DSCTAB,''), LGNUSU = ISNULL(E.LGNUSU,'')
FROM TBSYSUXG (NOLOCK) A
INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
INNER JOIN TBSYSGRP (NOLOCK) C ON (C.SYSGRP = A.SYSGRP)
LEFT JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 7 AND D.KEYCOD = A.STAREC)
LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1)
]]>
        </query>
      </item>
    </selectcommand>
  </item>

  <item create="true"  id="23" name="TBSYSFXG" friendlyname="FeaturesGroup" modelversion="3" descriptor="Features x Group">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      SELECT TOP 1 A.*, B.SYSDSC, C.DSCGRP, DSCREC = ISNULL(D.DSCTAB,''), LGNUSU = ISNULL(E.LGNUSU,'') FROM TBSYSFXG (NOLOCK) A
      INNER JOIN TBSYSFUN (NOLOCK) B ON (B.SYSFUN = a.SYSFUN)
      INNER JOIN TBSYSGRP (NOLOCK) C ON (C.SYSGRP = A.SYSGRP)
      INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 7 AND D.KEYCOD = A.STAREC)
      LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV = 1)
    </extendedmodel>

    <insertcommand key="identity" fieldreturn="FUNGRP" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[

      IF(@RETURN_VALUE=0)
            BEGIN
                IF(EXISTS( SELECT 1 FROM TBSYSFXG (NOLOCK) WHERE SYSFUN = @SYSFUN AND SYSGRP = @SYSGRP))
                    SET @RETURN_VALUE=-2;
            END                    
      
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="INCLUSAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRSYSFXGINS";
          audit.AUDSRC ="";
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="A FUNCIONALIDE JÁ ESTÁ ASSOCIADA AO GRUPO" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="FUNGRP" exceptionparamns="'DATCAD'" method="Update" processcode="020">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        SET @DATUPD=GETDATE();
      IF(@RETURN_VALUE=0)
            BEGIN
                IF(NOT (EXISTS( SELECT 1 FROM TBSYSFXG (NOLOCK) WHERE SYSFUN = @SYSFUN AND SYSGRP = @SYSGRP)))
                    SET @RETURN_VALUE=-2;
            END                    
        
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="ALTERACAO EFETUADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRSYSFXGUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="NAO EXISTE ESSA FUNCIONALIDADE ASSOCIADA AO GRUPO" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="FeaturesGroup" procname="PRSYSFXGSEL" desc ="Obtêm o registro de associação do funcionalidade x grupo">
        <query>
          <![CDATA[SELECT * FROM TBSYSFXG (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID de Associação Usuário x Grupo" name="FUNGRP" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
      <item script="true" alias="A." sql="" processcod="105" method="List" type="List" return="FeaturesGroup" procname="PRSYSFXGSELALL" desc ="Obtêm uma lista de todos os registros de usuário x grupo existentes">
        <query order="A.SYSGRP">
          <![CDATA[
      SELECT A.*, B.SYSDSC, C.DSCGRP, DSCREC = ISNULL(D.DSCTAB,''), LGNUSU = ISNULL(E.LGNUSU,'') FROM TBSYSFXG (NOLOCK) A
      INNER JOIN TBSYSFUN (NOLOCK) B ON (B.SYSFUN = a.SYSFUN)
      INNER JOIN TBSYSGRP (NOLOCK) C ON (C.SYSGRP = A.SYSGRP)
      INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 7 AND D.KEYCOD = A.STAREC)
      LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV = 1)          
]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Grupo" name="SYSGRP" type="System.Int32" default="" output="" null="false"/>
        </parameters>

      </item>
    </selectcommand>
  </item>


  <item create="true"  id="24" name="TBREGMEN" friendlyname="MonthlyPayment" modelversion="3" descriptor="Mensalidades">
    <UpdateKey>Identity</UpdateKey>
    <audit>false</audit>
    <procedure>1111000000</procedure>
    <asp>100000000</asp>
    <csharp>11110000</csharp>

    <objectclass>
      <item script="true" alias="A." sql="" method="QueryMonthlyPayment" return="int" returnmode="1" procname="" desc ="Objeto de Retenção de Informações sobre Mensalidades Abertas" returnvalue="1">
        <query>
          <![CDATA[
SELECT TOP 1
     A.NIDMEN 
    ,A.USUPRO 
	,NOMGST = C.NOMUSU
    ,A.CODUSU 
	,D.NOMUSU
    ,A.USRREF 
    ,A.TIPMEN
	,DSCMEN = ISNULL(E.DSCTAB,'')
    ,A.CODREF 
    , REFMEN = ''
    ,A.MODREG 
	,DSCMOD = CASE WHEN (A.MODREG=1) THEN 'PROVISAO' ELSE 'BAIXA' END
    ,A.REGBXA 
    ,A.STAMEN 
	,F.DSCSTA
    ,A.NUMMES 
    ,A.NUMANO 
    ,A.NUMPCL 
    ,A.DATMEN 
    ,A.DATVCT 
    ,CNVMEN = FORMAT(A.DATMEN, 'dd/MM/yyyy HH:mm')
    ,CNVVCT = FORMAT(A.DATVCT, 'dd/MM/yyyy HH:mm')    
    ,A.SIGOPE 
    ,A.VLRCOB
	,VLRMOV = (A.SIGOPE*A.VLRCOB)
    ,A.LOTINS 
    ,A.NUMTEN 
    ,A.STAREC 
	,DSCREC= ISNULL(G.DSCTAB,'')
    ,DATCAD = FORMAT(A.DATCAD, 'dd/MM/yyyy HH:mm')
    ,DATUPD = FORMAT(A.DATUPD, 'dd/MM/yyyy HH:mm')    
    ,A.UPDUSU 
	,LGNUSU = ISNULL(H.LGNUSU,'')
 FROM TBREGMEN (NOLOCK) A
INNER JOIN TBUSUPRO (NOLOCK) B ON  (B.USUPRO = A.USUPRO)
INNER JOIN TBCADGER (NOLOCK) C ON  (C.CODUSU = B.CODUSU)
INNER JOIN TBCADGER (NOLOCK) D ON  (D.CODUSU = A.CODUSU)
INNER JOIN TBTABGER (NOLOCK) E ON  (E.NUMTAB = 50 AND E.KEYCOD = A.TIPMEN)
INNER JOIN TBCADSTA (NOLOCK) F ON  (F.CODSTA = A.STAMEN)
INNER JOIN TBTABGER (NOLOCK) G ON  (G.NUMTAB =  7 AND G.KEYCOD = A.STAREC)
INNER JOIN TBLGNUSU (NOLOCK) H ON  (H.CODUSU = A.UPDUSU AND H.REGATV = 1)          
        ]]>
        </query>
      </item>
    </objectclass>

    <trigger>
      <item script="true" alias="A." sql="" method="" return="" procname="TR_TBREGCRT_TBREGOPE" after="INSERT, UPDATE" desc ="Trigger de Eventos da Tabela de Registro de Mensalidades">
        <query>
          <![CDATA[
BEGIN          
     INSERT INTO TBREGOPE(SUBSYS,NIDREF,DATOPE,CODMOV,VLRBAS,VLRPCT,SIGOPE,VLRPCP,VLROPE,STAREC,UPDUSU)
     SELECT inserted.SUBSYS,inserted.NIDBOL,inserted.DATCAD,500,inserted.VLRCOB,100,1,1,inserted.VLRCOB,inserted.STAREC,inserted.UPDUSU FROM inserted WHERE inserted.VLRCOB>0
END
       ]]>
        </query>
      </item>
    </trigger>

    <insertcommand key="identity" exceptionparamns="'DATCAD','DATUPD', 'NIDMEN'" method="Insert" processcode="10" >
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre></pre>
      <body></body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO DE MENSALIDADE INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGMENINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="identity" exceptionparamns="'DATCAD'" method="Update" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        SET @DATUPD=GETDATE();
      </pre>
      <body></body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO DE MENSALIDADE ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGMENINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </updatecommand>
    <selectcommand>
      <item script="false" alias="A." sql="" method="Select" return="MonthlyPayment" procname="PRREGMENSEL" desc ="Obtêm o registro de mensalidade de acordo com o ID">
        <query>
          <![CDATA[SELECT * FROM TBREGMEN (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Mensalidade" name="NIDMEN" type="int" default="" output="" null="false"/>
        </parameters>
      </item>

      <item script="true" alias="A." sql="" type="List" method="Select" return="MonthlyPayment" procname="PRREGMENSELMEN" desc ="Localiza um registro de mensalidae conforme os parâmetros abaixo">
        <query order="A.DATMEN DESC">
          <![CDATA[SELECT * FROM TBREGMEN (NOLOCK) A WHERE STAREC=1]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Tipo de Mensalidade" name="TIPMEN" type="System.Int32" sysnull="false" default="" output="" null="false"/>
          <parameter input="true" desc ="Código de Referência" name="CODREF" type="System.Int32" sysnull="false" default="" output="" null="false"/>
          <parameter input="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" sysnull="false" default="" output="" null="false"/>
          <parameter input="true" desc ="Indicador de Baixa" name="REGBXA" type="System.Byte" sysnull="false" default="0" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>


  </item>


  <item create="true"  id="25" name="TBTIPTAR" friendlyname="TariffType" modelversion="3" descriptor="Tipo de Tarifa">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      SELECT TOP 1 A.*, DSCREC= B.DSCTAB, DSCBLO = C.DSCTAB, DSCOPE = D.DSCTAB, LGNUSU = ISNULL(E.LGNUSU,''), DSCSYS = F.DSCTAB
      FROM TBTIPMOV (NOLOCK) A
      INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB= 7 AND B.KEYCOD=A.STAREC)
      INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB=29 AND C.KEYCOD=A.CNDBLO)
      INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=10 AND D.KEYCOD=A.SIGOPE)
      LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1)
      INNER JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB=93 AND F.KEYCOD=A.SUBSYS)

    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Key" fieldreturn="CODTAR" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field="CODTAR"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[

IF(EXISTS (SELECT 1 FROM TBTIPTAR (NOLOCK) WHERE DSCTAR= @DSCTAR))
   SET @RETURN_VALUE=-3;
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE TARIFA INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPTARINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="CODTAR" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field="CODTAR"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();

   
IF(EXISTS (SELECT 1 FROM TBTIPTAR (NOLOCK) WHERE DSCTAR = @DSCTAR AND CODTAR <>@CODTAR))
    SET @RETURN_VALUE=-3;
      
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE TARIFA ALTERADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPTARUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql=""  processcode="100" method="Select" return="TariffType" procname="PRTIPENDSEL" desc ="Obtêm o registro de Tipo de Tarifa com base no id informado">
        <query>
          <![CDATA[
SELECT A.*, DSCREC= B.DSCTAB, DSCBLO = C.DSCTAB, DSCOPE = D.DSCTAB, LGNUSU = ISNULL(E.LGNUSU,''), DSCSYS = F.DSCTAB
  FROM TBTIPMOV (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB= 7 AND B.KEYCOD=A.STAREC)
 INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB=29 AND C.KEYCOD=A.CNDBLO)
 INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=10 AND D.KEYCOD=A.SIGOPE)
  LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1)
 INNER JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB=93 AND F.KEYCOD=A.SUBSYS)
          ]]>
        </query>

        <parameters>
          <parameter input="true" apply="true"  alias="A." desc ="Tipo de Tarifa" name="CODTAR" type="System.Byte"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>


  <item create="true"  id="26" name="TBTIPMOV" friendlyname="Operations" modelversion="3" descriptor="Operações">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      <![CDATA[
SELECT TOP 1 A.*, DSCREC= B.DSCTAB, DSCBLO = C.DSCTAB, DSCOPE = D.DSCTAB, LGNUSU = ISNULL(E.LGNUSU,''), DSCSYS = F.DSCTAB
  FROM TBTIPMOV (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB= 7 AND B.KEYCOD=A.STAREC)
 INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB=29 AND C.KEYCOD=A.CNDBLO)
 INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=10 AND D.KEYCOD=A.SIGOPE)
  LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1)
 INNER JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB=93 AND F.KEYCOD=A.SUBSYS)
    ]]>
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Key" fieldreturn="CODMOV" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        
IF(@DSCEXT IS NULL)
   SET @DSCEXT='';
IF(@DSCEXC IS NULL)
   SET @DSCEXC='';
        
IF(EXISTS (SELECT 1 FROM TBTIPMOV (NOLOCK) WHERE DSCMOV= @DSCMOV))
   SET @RETURN_VALUE=-3;
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE MOVIMENTO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPMOVINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="CODMOV" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();

IF(@DSCEXT IS NULL)
   SET @DSCEXT='';
IF(@DSCEXC IS NULL)
   SET @DSCEXC='';

IF(EXISTS (SELECT 1 FROM TBTIPMOV (NOLOCK) WHERE DSCMOV = @DSCMOV AND CODMOV <>@CODMOV))
    SET @RETURN_VALUE=-3;
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE MOVIMENTO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPMOVUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql=""  processcode="100" method="Select" return="Operations" procname="PRTIPMOVSEL" desc ="Obtêm o registro de operação com base no id informado">
        <query>
          <![CDATA[SELECT * FROM TBTIPMOV (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código da Tarifa" name="CODMOV" type="System.Int16"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>



  <item create="true"  id="27" name="TBEXPTAR" friendlyname="ExpandedTariff" modelversion="3" descriptor="Tabela de Registro de Expansão de Tarifas">
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      <![CDATA[
SELECT TOP 1 A.*
      ,B.DSCEXP
      ,ISNULL(E.LGNUSU,'') LGNUSU 
    	,ISNULL(C.DSCTAB,'') DSCREC
  FROM TBEXPTAR (NOLOCK) A 
 INNER JOIN TBTIPEXP (NOLOCK) B ON (B.TIPEXP = A.TIPEXP)
 INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB = 7 AND C.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = B.UPDUSU AND E.REGATV=1)    
    ]]>
    </extendedmodel>

    <insertcommand key="Identity" fieldreturn="NIDEXP" exceptionparamns="'DATCAD','DATUPD'" procname="PREXPTARINS" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @LVLAPL = 0;
IF(EXISTS(SELECT 1 FROM TBEXPTAR (NOLOCK) WHERE TIPEXP=@TIPEXP))
   SELECT @LVLAPL = MAX(ISNULL(LVLAPL,0)) + 1  FROM TBEXPTAR (NOLOCK) WHERE TIPEXP = @TIPEXP
ELSE
   SET @LVLAPL=1
        ]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PREXPTARINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="NIDEXP" exceptionparamns="'DATCAD'" procname="PREXPTARUPD" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>SET @DATUPD=GETDATE()</pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PREXPTARUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>
    <selectcommand>
      <item script="false" alias="A." sql="" processcode="100" method="Select" return="ExpandedTariff" procname="" desc ="Seleciona o registro de acordo com o codigo do produto">
        <query>
          <![CDATA[SELECT A.*, B.DSCEXP
      ,ISNULL(E.LGNUSU,'') LGNUSU 
    	,ISNULL(C.DSCTAB,'') DSCREC
  FROM TBEXPTAR (NOLOCK) A 
 INNER JOIN TBTIPEXP (NOLOCK) B ON (B.TIPEXP = A.TIPEXP)
 INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB = 7 AND C.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = B.UPDUSU AND E.REGATV=1]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Expansão" name="NIDEXP" type="int" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
    <selectallcommand>
      <item script="true" alias="A." sql="" processcode="115" method="List" type="List" return="ExpandedTariff" procname="" desc ="Seleciona todos os registros de expansão de tarifa do id de tarifação fornecido">
        <query order="A.TIPEXP, A.LVLAPL">
          <![CDATA[
IF(@TIPEXP<=0)          
   SET @TIPEXP=NULL;
          
SELECT A.*
      ,B.DSCEXP
      ,ISNULL(E.LGNUSU,'') LGNUSU 
    	,ISNULL(C.DSCTAB,'') DSCREC
  FROM TBEXPTAR (NOLOCK) A 
 INNER JOIN TBTIPEXP (NOLOCK) B ON (B.TIPEXP = A.TIPEXP)
 INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB = 7 AND C.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = B.UPDUSU AND E.REGATV=1)
 ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código da Expansão" name="TIPEXP" type="System.Int16"  sysnull="true" default="" output="" null="true"/>
        </parameters>
      </item>
      <item script="false" alias="A." sql=""  processcode="110" method="ListTypes" type="List" return="ExpandedTypes" procname="" desc ="Obtêm uma Lista das Expansões Associadas">
        <query>
          <![CDATA[SELECT TIPEXP, DSCEXP FROM TBTIPEXP (NOLOCK) WHERE STAREC IN (1,2)]]>
        </query>
      </item>

    </selectallcommand>
  </item>

  <item create="true"  id="28" name="TBTIPEXP" friendlyname="ExpandedTypes" modelversion="3" descriptor="Tipo de Expansão de Tarifa">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      <![CDATA[SELECT TOP 1 A.*, DSCREC= ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,''), DSCREG = D.DSCTAB
FROM TBTIPEXP (NOLOCK) A
INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =7 AND B.KEYCOD=A.STAREC)
 LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV =1)
INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB =94 AND D.KEYCOD=A.LVLREG)]]>
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Key" fieldreturn="TIPEXP" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field="TIPEXP"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF(@LVLREG<0)
   SET @RETURN_VALUE=-4;
       
IF(EXISTS (SELECT 1 FROM TBTIPEXP (NOLOCK) WHERE DSCEXP= @DSCEXP))
   SET @RETURN_VALUE=-3;
   
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE EXPANSAO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPEXPINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
        <return value="-4" message="" replaces="REGRA DE APLICACAO" error="INVALIDARGUMENT"/>
      </returns>
    </insertcommand>
    <updatecommand key="KEY" fieldreturn="TIPEXP" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field="TIPEXP"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();

IF(@LVLREG<0)
   SET @RETURN_VALUE=-4;

IF(EXISTS (SELECT 1 FROM TBTIPEXP (NOLOCK) WHERE DSCEXP = @DSCEXP AND TIPEXP <>@TIPEXP))
    SET @RETURN_VALUE=-3;
      
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE EXPANSAO ALTERADA COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPEXPUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
        <return value="-4" message="" replaces="REGRA DE APLICACAO" error="INVALIDARGUMENT"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql=""  processcode="100" method="Select" return="ExpandedTypes" procname="" desc ="Obtêm o registro de Tipo de Expansão com base no id informado">
        <query>
          <![CDATA[SELECT A.*, DSCREC= ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,''), DSCREG = D.DSCTAB
FROM TBTIPEXP (NOLOCK) A
INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =7 AND B.KEYCOD=A.STAREC)
 LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV =1)
INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB =94 AND D.KEYCOD=A.LVLREG)    
]]>
        </query>
        <parameters>
          <parameter input="true" apply="true"  alias="A." desc ="Código do Tipo de Expansão" name="TIPEXP" type="System.Int16"  default="" output="" null="false"/>
        </parameters>
      </item>

    </selectcommand>

    <selectallcommand>
      <item script="true" alias="A." sql=""  processcode="105" method="List" type="List" return="ExpandedTypes" procname="" desc ="Obtêm uma Lista dos Tipos de Expansão">
        <query order="A.TIPEXP">
          <![CDATA[SELECT A.*, DSCREC= ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,''), DSCREG = D.DSCTAB
FROM TBTIPEXP (NOLOCK) A
INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =7 AND B.KEYCOD=A.STAREC)
 LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV =1)
INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB =94 AND D.KEYCOD=A.LVLREG) ]]>
        </query>
      </item>

      <item script="false" alias="A." sql=""  processcode="110" method="ListRules" type="List" return="GeneralTable" procname="" desc ="Obtêm uma Lista das Regras de Expansão">
        <query order="A.KEYCOD">
          <![CDATA[SELECT KEYCOD, DSCTAB FROM TBTABGER (NOLOCK) A WHERE NUMTAB=94 AND STAREC IN (1,2)]]>
        </query>
      </item>

    </selectallcommand>
  </item>


  <item create="true"  id="29" name="TBCFGBOL" friendlyname="TicketConfiguration" modelversion="3" descriptor="Configuração de Boletos">
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>

    <extendedmodel>
      <![CDATA[
SELECT TOP 1 A.*
      ,DSCTAR =ISNULL(DSCTAR,'N/A')
  	  ,NOMUSU =CASE
       WHEN A.NIVCFG=1 THEN G.NOMUSU
 		   WHEN A.NIVCFG =2 THEN F.NOMUSU
 		   ELSE
		       'PADRÃO'
	     END
      ,LGNUSU = ISNULL(D.LGNUSU,'')
      ,DSCREC = ISNULL(C.DSCTAB,'')
   	  ,DSCTBL = ISNULL(E.DSCTAB,'')
      ,DSCTDP = ISNULL(H.DSCTAB,'')
  FROM TBCFGBOL (NOLOCK) A
  LEFT JOIN TBTIPTAR (NOLOCK) B ON (B.CODTAR = A.CODTAR)
 INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB =  7 AND C.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) D ON (D.CODUSU = A.UPDUSU AND D.REGATV=1)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB = 16 AND E.KEYCOD = A.TIPBOL)
  LEFT JOIN TBCADGER (NOLOCK) F ON (F.CODUSU = A.USUCFG AND 2 = A.NIVCFG )
 INNER JOIN TBTABGER (NOLOCK) H ON (H.NUMTAB = 912 AND H.KEYCOD = A.APLTDP)
  LEFT JOIN (SELECT CODUSU = USUPRO, NOMUSU = A2.NOMUSU + ' - ' + A3.DSCPRO
               FROM TBUSUPRO (NOLOCK) A1
 INNER JOIN TBCADGER (NOLOCK) A2 ON (A2.CODUSU = A1.CODUSU)
 INNER JOIN TBCADPRO (NOLOCK) A3 ON (A3.CODPRO = A1.CODPRO)) G ON (G.CODUSU = A.USUCFG AND 1 = A.NIVCFG) 
      
    ]]>

    </extendedmodel>

    <insertcommand key="Identity" fieldreturn="NIDCBL" exceptionparamns="'DATCAD','DATUPD'" procname="PRCFGBOLINS" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        ]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCFGBOLINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="NIDCBL" exceptionparamns="'DATCAD'" procname="PRCFGBOLUPD" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>SET @DATUPD=GETDATE()</pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCFGBOLUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>
    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="TicketConfiguration" procname="" desc ="Obtêm o registro de configuração de boleto conforme o id informado">
        <query>
          <![CDATA[SELECT * FROM TBCFGBOL (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Configuração de Boleto" name="NIDCBL" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
    <methods>
      <item script="true" alias="A." sql="" processcode="200" method="Locate" return="int" returnmode="2" procname="PRCFGBOLOCREC" desc ="Localiza um id de registro de configuração de boleto de acordo com os parâmetros fornecidos" returnvalue="0" remarks="A busca inicial procura pelo usuário cedente do boleto, no nivel de configuração usuário, caso não encontre, procura pelo Código do Gestor no nivel de gestor, caso não encontre, procura pelo padrão">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT=0

/* Cedente - nivel usuário */
IF(EXISTS(SELECT 1 FROM TBCFGBOL (NOLOCK) WHERE USUCFG=@USUCED AND NIVCFG=2 AND TIPBOL=@TIPBOL))
	SELECT @RETURN_VALUE = ISNULL(NIDCBL,0) FROM TBCFGBOL (NOLOCK) WHERE USUCFG=@USUCED AND NIVCFG=1 AND STAREC IN (1,2) AND TIPBOL=@TIPBOL

SET @RETURN_VALUE = ISNULL(@RETURN_VALUE,0)
/* GESTOR - nivel gestão */
IF(@RETURN_VALUE=0)
   BEGIN
		IF(EXISTS(SELECT 1 FROM TBCFGBOL (NOLOCK) WHERE USUCFG=@USUPRO AND NIVCFG=1 AND TIPBOL=@TIPBOL))
			SELECT @RETURN_VALUE = ISNULL(NIDCBL,0) FROM TBCFGBOL (NOLOCK) WHERE USUCFG=@USUPRO AND NIVCFG=1 AND STAREC IN (1,2) AND TIPBOL=@TIPBOL
	END

SET @RETURN_VALUE = ISNULL(@RETURN_VALUE,0)
/* Não existe nenhuma configuração, acesso padrão */
IF(@RETURN_VALUE=0)
    BEGIN
		IF(EXISTS(SELECT 1 FROM TBCFGBOL (NOLOCK) WHERE USUCFG=0 AND NIVCFG=0 AND TIPBOL=@TIPBOL))
			SELECT @RETURN_VALUE = NIDCBL FROM TBCFGBOL (NOLOCK) WHERE USUCFG=0 AND NIVCFG=0 AND STAREC IN (1,2) AND TIPBOL=@TIPBOL
	END
SET @RETURN_VALUE = ISNULL(@RETURN_VALUE,0)
RETURN @RETURN_VALUE
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Gestor" name="USUPRO" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código do Cedente" name="USUCED" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Tipo de Boleto" name="TIPBOL" type="System.Byte" default="" output="" null="false"/>
        </parameters>
      </item>

    </methods>
  </item>

  <item create="true"  id="30" name="TBMODTAR" friendlyname="TariffModality" modelversion="3" descriptor="Modalidade de Tarifa">
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      <![CDATA[
SELECT A.MODCRT,
  A.DSCMOD,
  A.PARINI,
  A.PARFIN,
  EXTMOD = 
      CASE 
		WHEN PARINI = 0 AND PARFIN=0 THEN ' '
		WHEN (PARINI >0 AND PARFIN=0) THEN 'EM ' + CONVERT(VARCHAR,PARINI) + ' VEZES'
		WHEN (PARINI >0 AND PARFIN>0) THEN 'DE ' + CONVERT(VARCHAR,PARINI) + ' A '  + CONVERT(VARCHAR,PARFIN) + ' VEZES'
		WHEN (PARINI =0 AND PARFIN>0) THEN 'ATE ' + CONVERT(VARCHAR,PARFIN) + ' VEZES'
	END, 
  A.STAREC,
  DSCREC = ISNULL(B.DSCTAB,''),
  A.DATCAD,
  A.DATUPD,
  A.UPDUSU,
  LGNUSU = ISNULL(C.LGNUSU,'')
  FROM TBMODTAR (NOLOCK) A 
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =  7 AND B.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
 ]]>
    </extendedmodel>

    <insertcommand key="key" fieldreturn="MODCRT" exceptionparamns="'DATCAD','DATUPD'" procname="PRMODTARINS" method="Insert" processcode="10">
      <maxfield field="MODCRT"/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        ]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRMODTARINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" fieldreturn="MODCRT" exceptionparamns="'DATCAD'" procname="PRMODTARUPD" method="Update" processcode="20">
      <maxfield field="MODCRT"/>
      <nextnumber field="" id="" />
      <pre>SET @DATUPD=GETDATE()</pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRMODTARUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>
    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="TariffModality" procname="PRMODTARSEL" desc ="Seleciona o registro de acordo com o codigo dA modalidade">
        <query>
          <![CDATA[SELECT A.MODCRT,
  A.DSCMOD,
  A.PARINI,
  A.PARFIN,
  EXTMOD = 
      CASE 
		WHEN PARINI = 0 AND PARFIN=0 THEN ' '
		WHEN (PARINI >0 AND PARFIN=0) THEN 'EM ' + CONVERT(VARCHAR,PARINI) + ' VEZES'
		WHEN (PARINI >0 AND PARFIN>0) THEN 'DE ' + CONVERT(VARCHAR,PARINI) + ' A '  + CONVERT(VARCHAR,PARFIN) + ' VEZES'
		WHEN (PARINI =0 AND PARFIN>0) THEN 'ATE ' + CONVERT(VARCHAR,PARFIN) + ' VEZES'
	END, 
  A.STAREC,
  DSCREC = ISNULL(B.DSCTAB,''),
  A.DATCAD,
  A.DATUPD,
  A.UPDUSU,
  LGNUSU = ISNULL(C.LGNUSU,'')
  FROM TBMODTAR (NOLOCK) A 
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =  7 AND B.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Modalidade de Aplicação da Tarifa" name="MODCRT" type="int" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
    <selectallcommand>
      <item script="true" alias="A." sql="" processcode="115" method="List" type="List" return="TariffModality" procname="" desc ="Seleciona todos os registros de modalidade de tarifa existentes">
        <query>
          <![CDATA[SELECT A.MODCRT,
  A.DSCMOD,
  A.PARINI,
  A.PARFIN,
  EXTMOD = 
      CASE 
		WHEN PARINI = 0 AND PARFIN=0 THEN ' '
		WHEN (PARINI >0 AND PARFIN=0) THEN 'EM ' + CONVERT(VARCHAR,PARINI) + ' VEZES'
		WHEN (PARINI >0 AND PARFIN>0) THEN 'DE ' + CONVERT(VARCHAR,PARINI) + ' A '  + CONVERT(VARCHAR,PARFIN) + ' VEZES'
		WHEN (PARINI =0 AND PARFIN>0) THEN 'ATE ' + CONVERT(VARCHAR,PARFIN) + ' VEZES'
	END, 
  A.STAREC,
  DSCREC = ISNULL(B.DSCTAB,''),
  A.DATCAD,
  A.DATUPD,
  A.UPDUSU,
  LGNUSU = ISNULL(C.LGNUSU,'')
  FROM TBMODTAR (NOLOCK) A 
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =  7 AND B.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
]]>
        </query>
      </item>
    </selectallcommand>
  </item>


  <item create="true"  id="31" name="TBTARMOV" friendlyname="TariffOperations" modelversion="3" descriptor="Associação de Tarifas e Operações">
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      <![CDATA[
SELECT TOP 1 A.*, DSCREC = ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,''), D.DSCTAR, E.DSCMOV
  FROM TBTARMOV (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =  7 AND B.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV = 1)
 INNER JOIN TBTIPTAR (NOLOCK) D ON (D.CODTAR = A.CODTAR)
 INNER JOIN TBTIPMOV (NOLOCK) E ON (E.CODMOV = A.CODMOV)
]]>
    </extendedmodel>

    <insertcommand key="Identity" fieldreturn="NIDTXM" exceptionparamns="'DATCAD','DATUPD'" procname="PRTARMOVINS" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF(@CODTAR<=0)
   SET @RETURN_VALUE=-2
IF(@CODMOV<0)
   SET @RETURN_VALUE=-3
        
        ]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTARMOVINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" replaces="CODIGO DA TARIFA" error="INVALIDARGUMENT"/>
        <return value="-3" message="" replaces="CODIGO DO MOVIMENTO" error="INVALIDARGUMENT"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="NIDTXM" exceptionparamns="'DATCAD'" procname="PRTARMOVUPD" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE()
IF(@CODTAR<=0)
   SET @RETURN_VALUE=-2
IF(@CODMOV<0)
   SET @RETURN_VALUE=-3

]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTARMOVUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" replaces="CODIGO DA TARIFA" error="INVALIDARGUMENT"/>
        <return value="-3" message="" replaces="CODIGO DO MOVIMENTO" error="INVALIDARGUMENT"/>
      </returns>
    </updatecommand>
    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="TariffOperations" procname="" desc ="Seleciona o registro de acordo com o codigo do produto">
        <query>
          <![CDATA[
SELECT A.*, DSCREC = ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,''), D.DSCTAR, E.DSCMOV
  FROM TBTARMOV (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =  7 AND B.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV = 1)
 INNER JOIN TBTIPTAR (NOLOCK) D ON (D.CODTAR = A.CODTAR)
 INNER JOIN TBTIPMOV (NOLOCK) E ON (E.CODMOV = A.CODMOV)
]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID Tarifa x Movimento" name="NIDTXM" type="int" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
    <selectallcommand>
      <item script="true" alias="A." sql="" processcode="115" method="List" type="List" return="TariffOperations" procname="" desc ="Seleciona todos os registros de expansão de tarifa do id de tarifação fornecido">
        <query>
          <![CDATA[SELECT A.*, DSCREC = ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,''), D.DSCTAR, E.DSCMOV
  FROM TBTARMOV (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =  7 AND B.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV = 1)
 INNER JOIN TBTIPTAR (NOLOCK) D ON (D.CODTAR = A.CODTAR)
 INNER JOIN TBTIPMOV (NOLOCK) E ON (E.CODMOV = A.CODMOV)
]]>
        </query>
      </item>


      <item script="false" alias="A." sql="" processcode="125" method="ListTariffs" type="List" return="TariffType" procname="" desc ="Obtêm a Lista de Tarifas">
        <query>
          <![CDATA[SELECT CODTAR, DSCTAR FROM TBTIPTAR (NOLOCK) WHERE STAREC=1 ORDER BY DSCTAR]]>
        </query>
      </item>


    </selectallcommand>
  </item>

  <item create="true"  id="32" name="TBCADTAR" friendlyname="Tariff" modelversion="3" descriptor="Tabela de Cadastro de Tarifas">
    <listselect></listselect>
    <CSharpPartial>true</CSharpPartial>
    <SqlTable></SqlTable>
    <extendedmodel/>
    <extendedobject>SELECT A.NIDTAR,A.NIVTAR,A.USUPRO,A.CODTAR,a.STAREC,A.CODMOE,A.DATCAD,A.UPDUSU,A.FMTCOB,A.PCTTAR,A.VLRTAR,A.TARBAS,A.TARMAX,A.RSPTAR,A.VLRINF,A.VLRMAX,A.CODBND,A.TIPLIN,A.MODCRT,PARINI = isnull(B.parini,0),PARFIN = isnull(B.parfin,0),EXTVBS = A.NIDTAR,EXTVLR = A.VLRMAX,NIDCAL = A.NIDTAR FROM TBCADTAR (NOLOCK) a LEFT JOIN TBMODTAR (nolock) b ON (a.modcrt = b.modcrt) left join tbcaltar (nolock) c on (c.nidcal = 0) WHERE A.NIDTAR = -1</extendedobject>
    <procedure>1111000000</procedure>
    <asp>111100000</asp>
    <csharp>11110000</csharp>

    <objectproperty>
      <parameters>
        <parameter input="true" apply="true" desc ="ID de Registro da Memória de Cálculo" name="NIDCAL" type="System.Int32" default="" output="" null="false"/>
      </parameters>
    </objectproperty>


    <objectclass>
      <item script="true" alias="A." sql="" method="QueryTariff" return="int" returnmode="1" procname="" desc ="Objeto de Retenção de Informações de Tarifas" returnvalue="1">
        <query>
          <![CDATA[
SELECT TOP 1 A.* 
  ,NOMUSU = CASE WHEN A.NIVCFG=2 THEN ISNULL(B.NOMUSU,'') ELSE ISNULL(D.NOMUSU,'' ) + ' - ' + ISNULL(E.DSCPRO,'') END
  ,DSCCFG = ISNULL(F.DSCTAB,'')
  ,DSCRSP = ISNULL(G.DSCTAB,'')
  ,H.DSCTAR
  ,DSCLIN = ISNULL(J.DSCTAB,'')
  ,DSCBND = ISNULL(I.DSCTAB,'')
  ,K.DSCMOD
  ,L.DSCEXP
  ,DSCMOE = ISNULL(M.DSCTAB,'')  
  ,DSCCOB = ISNULL(N.DSCTAB,'')    
  ,DSCREC = ISNULL(O.DSCTAB,'')    
  ,LGNUSU = ISNULL(P.LGNUSU,'')    
  FROM TBCADTAR (NOLOCK) A
  LEFT JOIN TBCADGER B (NOLOCK) ON (B.CODUSU = A.USUCFG AND 2 = A.NIVCFG) 
  LEFT JOIN TBUSUPRO C (NOLOCK) ON (C.USUPRO = A.USUCFG AND 1 = A.NIVCFG) 
  LEFT JOIN TBCADGER D (NOLOCK) ON (D.CODUSU = C.CODUSU) 
  LEFT JOIN TBCADPRO E (NOLOCK) ON (E.CODPRO = C.CODPRO)
  INNER JOIN TBTABGER F (NOLOCK) ON (F.NUMTAB=947 AND F.KEYCOD=A.NIVCFG)
  INNER JOIN TBTABGER G (NOLOCK) ON (G.NUMTAB=105 AND G.KEYCOD=A.RSPTAR)
  INNER JOIN TBTIPTAR H (NOLOCK) ON (H.CODTAR = A.CODTAR)
  INNER JOIN TBTABGER I (NOLOCK) ON (I.NUMTAB=63 AND I.KEYCOD=A.CODBND)
  INNER JOIN TBTABGER J (NOLOCK) ON (J.NUMTAB=44 AND J.KEYCOD=A.TIPLIN)
  INNER JOIN TBMODTAR K (NOLOCK) ON (K.MODCRT = A.MODCRT)
  INNER JOIN TBTIPEXP L (NOLOCK) ON (L.TIPEXP = A.CODEXP)
   LEFT JOIN TBTABGER M (NOLOCK) ON (M.NUMTAB=298 AND M.KEYCOD=A.CODMOE)
  INNER JOIN TBTABGER N (NOLOCK) ON (N.NUMTAB=30 AND N.KEYCOD=A.FMTCOB)   
  INNER JOIN TBTABGER O (NOLOCK) ON (O.NUMTAB=7 AND O.KEYCOD=A.STAREC)   
   LEFT JOIN TBLGNUSU P (NOLOCK) ON (P.CODUSU = A.UPDUSU AND P.REGATV = 1)             
          
        ]]>

        </query>
      </item>


    </objectclass>


    <view>
      <item script="true" alias="A." sql="" method="" return="" procname="VWREGCCRTAR" desc ="View de Informações consolidados de Tipo de Movimento por Usuário">
        <query>
          <![CDATA[
SELECT A.CODUSU, 
		   A.CODMOV,
		   YEAR(DATCAD) NUMANO,
		   MONTH(DATCAD) NUMMES,
		   ABS(SUM(VLRMOV*SIGOPE)) AS VLRMOV,	
		   COUNT(*) QTDMOV
  FROM TBREGCCR (NOLOCK) A 
 WHERE A.STAREC=1
   AND A.INDLCT=2
   AND YEAR(DATCAD)=YEAR(GETDATE())
 GROUP BY A.CODUSU, A.CODMOV, YEAR(DATCAD), MONTH(DATCAD)          
        ]]>
        </query>
      </item>

      <item script="true" alias="A." sql="" method="" return="" procname="VWCADTAR" desc ="View de Informações consolidadas de informações do cadastro de tarifas">
        <query>
          <![CDATA[
SELECT A.* 
  ,NOMUSU = CASE WHEN A.NIVCFG=2 THEN ISNULL(B.NOMUSU,'') ELSE ISNULL(D.NOMUSU,'' ) + ' - ' + ISNULL(E.DSCPRO,'') END
  ,DSCCFG = ISNULL(F.DSCTAB,'')
  ,DSCRSP = ISNULL(G.DSCTAB,'')
  ,H.DSCTAR
  ,DSCLIN = ISNULL(J.DSCTAB,'')
  ,DSCBND = ISNULL(I.DSCTAB,'')
  ,K.DSCMOD
  ,L.DSCEXP
  ,DSCMOE = ISNULL(M.DSCTAB,'')  
  ,DSCCOB = ISNULL(N.DSCTAB,'')    
  ,DSCREC = ISNULL(O.DSCTAB,'')    
  ,LGNUSU = ISNULL(P.LGNUSU,'')    
  FROM TBCADTAR (NOLOCK) A
  LEFT JOIN TBCADGER B (NOLOCK) ON (B.CODUSU = A.USUCFG AND 2 = A.NIVCFG) 
  LEFT JOIN TBUSUPRO C (NOLOCK) ON (C.USUPRO = A.USUCFG AND 1 = A.NIVCFG) 
  LEFT JOIN TBCADGER D (NOLOCK) ON (D.CODUSU = C.CODUSU) 
  LEFT JOIN TBCADPRO E (NOLOCK) ON (E.CODPRO = C.CODPRO)
  INNER JOIN TBTABGER F (NOLOCK) ON (F.NUMTAB=947 AND F.KEYCOD=A.NIVCFG)
  INNER JOIN TBTABGER G (NOLOCK) ON (G.NUMTAB=105 AND G.KEYCOD=A.RSPTAR)
  INNER JOIN TBTIPTAR H (NOLOCK) ON (H.CODTAR = A.CODTAR)
  INNER JOIN TBTABGER I (NOLOCK) ON (I.NUMTAB=63 AND I.KEYCOD=A.CODBND)
  INNER JOIN TBTABGER J (NOLOCK) ON (J.NUMTAB=44 AND J.KEYCOD=A.TIPLIN)
  INNER JOIN TBMODTAR K (NOLOCK) ON (K.MODCRT = A.MODCRT)
  INNER JOIN TBTIPEXP L (NOLOCK) ON (L.TIPEXP = A.CODEXP)
   LEFT JOIN TBTABGER M (NOLOCK) ON (M.NUMTAB=298 AND M.KEYCOD=A.CODMOE)
  INNER JOIN TBTABGER N (NOLOCK) ON (N.NUMTAB=30 AND N.KEYCOD=A.FMTCOB)   
  INNER JOIN TBTABGER O (NOLOCK) ON (O.NUMTAB=7 AND O.KEYCOD=A.STAREC)   
   LEFT JOIN TBLGNUSU P (NOLOCK) ON (P.CODUSU = A.UPDUSU AND P.REGATV = 1)             
        ]]>
        </query>
      </item>

    </view>


    <insertcommand key="identity" fieldreturn="NIDTAR" exceptionparamns="'DATCAD','DATUPD', 'NIDTAR'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF(EXISTS (SELECT 1 FROM TBCADTAR (NOLOCK) 
            WHERE NIVCFG =@NIVCFG
              AND USUCFG =@USUCFG
              AND CODTAR = @CODTAR
              AND CODBND =@CODBND
              AND TIPLIN = @TIPLIN
              AND MODCRT =@MODCRT))
    SET @RETURN_VALUE=-2
        
      ]]>

      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADTARINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="identity" fieldreturn="NIDTAR" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>SET @DATUPD=GETDATE()</pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADTARUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="Tariff" procname="PRCADTARSEL" desc ="Obtêm o Id de Tarifação Tarifação de Acordo com o ID de Registro de Tarifação fornecido">
        <query>
          <![CDATA[SELECT * FROM TBCADTAR (NOLOCK) A INNER JOIN TBMODTAR (NOLOCK) B ON (A.MODCRT = B.MODCRT)]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Tarifação" name="NIDTAR" type="int" default="" output="" null="false"/>
        </parameters>
      </item>
      <!--<item script="true" alias="A." sql="" processcode="105" method="Select" return="Tariff" procname="PRCADTARSELPAR" desc ="Obtêm o ID de Tarifação de Acordo com os parâmetros fornecidos">
        <query>
          <![CDATA[SELECT * FROM TBCADTAR (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Usuário/Gestor" name="USUCFG" type="int" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Nível de Tarifação" name="NIVCFG" type="System.Byte" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código de Tarifa" name="CODTAR" type="System.Int16" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Status de Registro" name="STAREC" type="System.Byte" default="1" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código de Bandeira" name="CODBND" type="System.Int16" default="0" output="" null="false"/>
        </parameters>
      </item>

      <item script="true" alias="A." sql="" processcode="110" method="Select" return="Tariff" procname="PRCADTARSELPAR2" desc ="Obtêm o ID de Tarifação de Acordo com os parâmetros fornecidos" >
        <query>
          <![CDATA[SELECT * FROM TBCADTAR (nolock) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Usuário/Gestor" name="USUCFG" type="int" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código de Tarifa" name="CODTAR" type="System.Int16" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Status de Registro" name="STAREC" type="System.Byte" default="1" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código de Bandeira" name="CODBND" type="System.Int16" default="0" output="" null="false"/>
        </parameters>
      </item>-->
      <!--<item script="false" alias="A." sql="" method="Select"  type="List" return="Tariff" procname="PRCADTARSELALL"   desc ="Seleciona todos os registros com base no usuario e nivel de tarifação">
        <query/>
        <parameters>
          <parameter input="true" desc ="Código do Usuario" name="USUCFG" type="int" sysnull="false" default="" output="" null="false"/>
          <parameter input="true" desc ="Nivel de Tarifação" name="NIVTAR" type="System.Byte" sysnull="false" default="" output="" null="false"/>
        </parameters>
      </item>-->



    </selectcommand>
    <selectallcommand>
      <item script="true" alias="A." sql="" processcode="120" method="List" return="QueryTariff" procname="PRCADTARSELALL" desc ="Seleciona todos os registros com base nos parâmetros fornecidos">
        <query order="A.CODTAR, A.CODBND, A.TIPLIN, A.MODCRT, A.CODEXP">
          <![CDATA[SELECT * FROM VWCADTAR A]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Código do Usuario" name="USUCFG" type="int" sysnull="false" default="" output="" null="false"/>
          <parameter input="true" desc ="Nivel de Tarifação" name="NIVCFG" type="System.Byte" sysnull="false" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectallcommand>
    <methods>


      <!--<item webtype="POST" script="true" alias="A." sql="" method="Copy" return="int" returnmode="5" procname="PRCADTARCPY" desc ="Copia os registros de configuração de tarifas de um usuário base para outro usuário">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0
IF(@SRCUSU=0 AND @NIVTAR=2)
  BEGIN
  
    SELECT @SRCUSU=USUPRO FROM TBREGCRT (NOLOCK) WHERE ASSUSU = @SRCUSU AND STAREC=1
    IF(@SRCUSU>0)
       SET @SRCNIV=1
  END

IF(@SRCUSU>0 AND @SRCNIV>0)
    BEGIN  
        INSERT 
          INTO TBCADTAR (NIVTAR, USUPRO, FMTCOB, TARBAS, CODMOE, CODTAR, VLRTAR, VLRINF, VLRMAX,UPDUSU,CODBND,TIPLIN,MODCRT,TARMAX,RSPTAR,CODEXP ) 
        SELECT @NIVTAR, @USUPRO, FMTCOB, TARBAS, CODMOE, CODTAR, vlrtar, vlrinf, vlrmax,@UPDUSU,CODBND,TIPLIN,MODCRT, TARMAX, RSPTAR,CODEXP 
          FROM TBCADTAR (NOLOCK)
         WHERE STAREC = 1 
           AND USUPRO =@SRCUSU
           AND NIVTAR=@SRCNIV 
           AND RIGHT('000' + CONVERT(VARCHAR(3),CODTAR),3) 
		        + RIGHT('000' + CONVERT(VARCHAR(3),CODBND),3) 
		        + RIGHT('000' + CONVERT(VARCHAR(3),TIPLIN),3) 
		        + RIGHT('000' + CONVERT(VARCHAR(3),MODCRT),3) 
           NOT IN (SELECT RIGHT('000' + CONVERT(VARCHAR(3),CODTAR),3) 
                      + RIGHT('000' + CONVERT(VARCHAR(3),CODBND),3) 
                      + RIGHT('000' + CONVERT(VARCHAR(3),TIPLIN),3) 
                        + RIGHT('000' + CONVERT(VARCHAR(3),MODCRT),3) 
                     FROM TBCADTAR (NOLOCK) 
			        WHERE USUPRO=@USUPRO AND NIVTAR=@NIVTAR)
        SET @RETURN_VALUE = @@ROWCOUNT;
    END
RETURN @RETURN_VALUE;
]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Usuário de Configuração de Destino" name="USUPRO" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Nivel de Configuração de Destino" name="NIVTAR" type="System.Byte" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Configuração de Origem" name="SRCUSU" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Nivel de Configuração de Origem" name="SRCNIV" type="System.Byte" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Código do Usuário de Atualização" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return operator=">" value="0" message="" error="OK">
            <![CDATA[TrappedError.UserError = string.Format("{0} REGISTROS COPIADOS", RETURN_VALUE);]]>
          </return>
          <return value="0" message="" error="">
            <![CDATA[TrappedError.UserError= "NENHUM REGISTRO COPIADO";]]>
          </return>
          <return value="-2" message="" error="TRANSACTIONNOTHASRECORD"/>
        </returns>
      </item>-->



      <item webtype="[HttpGet]" script="true" alias="A." sql="" method="GetExpandeTariff" return="int" returnmode="2" procname="PRCADTARGETEXPTAR" desc ="Obtêm a tarifa expandida de registro de tarifação" returnvalue="1" remarks="Retorna o id de Registro de Aplicação de uma Tarifa [TBCALTAR]">
        <query>
          <![CDATA[
    DECLARE @NUMANO INT = DATEPART(year,GETDATE())
    DECLARE @NUMMES INT = DATEPART(month,GETDATE())
    DECLARE @QTDREG MONEY =0
    DECLARE @CODTAR SMALLINT    
    DECLARE @CODUSU INT =0
    DECLARE @NIVTAR TINYINT=0
    DECLARE @LVLREG TINYINT=0    
    DECLARE @CODEXP TINYINT=0    
    DECLARE @CODMOV SMALLINT = 0
    DECLARE @LVLAPL TINYINT = 0
    DECLARE @VLRTAR MONEY = 0
    SET @RETURN_VALUE=-1
                
    SELECT @CODUSU = USUCFG,
           @NIVTAR = NIVCFG,
   		   @CODEXP = CODEXP,
   		   @CODTAR = CODTAR  
      FROM TBCADTAR (NOLOCK)  
     WHERE NIDTAR = @NIDTAR
           
    /*
     * Tipo de Expansao [1,2] - Diversos, [3,4] - Boletos, [5] - Base direta na Faixa de Valor da tabela de tarifas
     */
    IF (@CODEXP >0 )
        SELECT @LVLREG = ISNULL(LVLREG,0) FROM TBTIPEXP (NOLOCK) WHERE TIPEXP = @CODEXP AND STAREC=1
           
     /* BOLETOS */
        
    IF(@LVLREG IN (3,4) AND (@CODUSU>0 AND @NIVTAR IN (1,2)) ) 
       	BEGIN
       		SELECT @QTDREG = ISNULL(SUM(CASE WHEN @LVLREG=3 THEN ISNULL(QTDBOL,0) ELSE ISNULL(SUMBOL,0) END),0)
       		  FROM VWSUMBOL
       		 WHERE CODUSU = @CODUSU
       		   AND NIVSUM = @NIVTAR
       		   AND NUMANO = @NUMANO
       		   AND NUMMES = @NUMMES
                  
       		IF(@QTDREG>0)
 			    BEGIN 
   				  	IF(@LVLREG=3)
 					  	SET @QTDREG=@QTDREG+1
			        IF(@LVLREG=4)
		 		        SET @QTDREG= @QTDREG + @VLRTRA
				    SELECT @VLRTAR = VLRTAR, @LVLAPL=LVLAPL 
			   	      FROM TBEXPTAR
                   	 WHERE STAREC=1 AND TIPEXP = @CODEXP AND @QTDREG BETWEEN VLRMIN AND VLRMAX
                END
    	END
    
        
      /* Outras tarifas */
    	/*
    	   1 - por quantidade
    	   2 - por valor
    	*/
            
        IF(@LVLREG IN (1,2) AND (@CODUSU > 0)) 
           BEGIN
      	        SET @QTDREG=0				--NAO EXISTE MOVIMENTACAO
    		        SELECT @QTDREG = ISNULL(SUM(CASE WHEN @LVLREG=1 THEN ISNULL(QTDMOV,0) ELSE ISNULL(VLRMOV,0) END),0)
           			  FROM VWREGCCRTAR
    			       WHERE CODUSU = @CODUSU
                   AND NUMANO = @NUMANO
                   AND NUMMES = @NUMMES
                   AND CODMOV IN ( SELECT CODMOV 
                                     FROM TBTARMOV (NOLOCK) 
                                    WHERE CODTAR = @CODTAR)
    
                IF(@QTDREG>=0)
    						    BEGIN 
    						      IF(@LVLREG=1)
    								      SET @QTDREG= @QTDREG + 1
    						      IF(@LVLREG=2)
    								      SET @QTDREG= @QTDREG + @VLRTRA
    							    SELECT @VLRTAR = VLRTAR, @LVLAPL=LVLAPL  
     						        FROM TBEXPTAR (NOLOCK)
                       WHERE STAREC=1 AND TIPEXP = @CODEXP AND @QTDREG BETWEEN VLRMIN AND VLRMAX
    						    END
    				END
    
        
    /* O Valor da tarifa é calculada com base na faixa de valor informado */
    IF(@LVLREG=5 AND @VLRTRA<>0) 
        BEGIN
       			SELECT @VLRTAR = VLRTAR, @LVLAPL=LVLAPL  FROM TBEXPTAR (NOLOCK) WHERE STAREC=1 AND TIPEXP = @CODEXP AND @VLRTRA BETWEEN VLRMIN AND VLRMAX
        END      
    
    INSERT INTO TBCALTAR (USUCFG, NIVCFG,  CODTAR, CODEXP, LVLAPL, VLRBAS, VLRTAR)
          VALUES         (@CODUSU,@NIVTAR, @CODTAR,@CODEXP,@LVLAPL,@VLRTRA,@VLRTAR)
        IF(@@ERROR=0)
    	     SET @RETURN_VALUE = @@IDENTITY
    RETURN @RETURN_VALUE
]]>
        </query>
        <parameters>
          <parameter input="true" apply="false" desc ="ID do Registro de Tarifação" name="NIDTAR" type="System.Int32" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Valor da Transação" name="VLRTRA" type="System.Double" default="0" output="" null="false"/>
        </parameters>
      </item>

      <!--<item script="true" alias="A." sql="" method="CopyManagersFee" return="int" returnmode="5" procname="PRCADTARGERCPY" desc ="Processa a cópia de tarifas de gestores" returnvalue="0">
        <query merge="true">
          <![CDATA[
DECLARE @RETURN_VALUE INT =0          
DECLARE @RETVAL INT = 0          
DECLARE @USUPRO INT
DECLARE @INICIO INT = 1
DECLARE @FIM INT = 1
DECLARE @TPLIST TABLE(ID INT IDENTITY, USUPRO INT)
IF(@UPDUSU>0)
    BEGIN
        INSERT INTO @TPLIST (USUPRO)  SELECT USUPRO FROM TBUSUPRO WHERE STAREC=1 AND USUPRO NOT IN (SELECT GSTPAD FROM TBSYSCFG (NOLCOK))
        SELECT @FIM = MAX(ID) FROM @TPLIST
        WHILE (@INICIO <=@FIM)
	        BEGIN
		        SELECT @USUPRO = USUPRO FROM @TPLIST WHERE ID=@INICIO
		        EXEC @RETVAL = PRCADTARCPY @USUPRO,1,13,1,@UPDUSU
		        SET @INICIO = @INICIO + 1 
            SET @RETURN_VALUE= @RETURN_VALUE + @RETVAL
          END
    END
ELSE
   SET @RETURN_VALUE=-2;
RETURN @RETURN_VALUE  
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="int" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="-1" message="" error="REQUIREDUSEROPERATION"/>
        </returns>

      </item>-->
      <!--<item script="true" alias="A." sql="" method="CopyUsersFee" return="int" returnmode="5" procname="PRCADTARUSRCPY" desc ="Processa a cópia de tarifas de usuarios" returnvalue="0">
        <query merge="true">
          <![CDATA[
DECLARE @RETURN_VALUE INT = 0                    
DECLARE @RETVAL INT = 0                    
DECLARE @USUPRO INT
DECLARE @INICIO INT = 1
DECLARE @FIM INT = 1
DECLARE @NUMREC INT 

IF(@UPDUSU>0)
    BEGIN
        SELECT @NUMREC = COUNT(1) FROM TBCADTAR (NOLOCK) WHERE USUPRO=13 AND NIVTAR=1 AND STAREC=1
        DECLARE @TPLIST TABLE (ID INT IDENTITY, CODUSU INT )
        INSERT INTO @TPLIST (CODUSU) 
        SELECT TOP 1000 USUPRO 
         FROM TBCADTAR (NOLOCK) 
        WHERE NIVTAR=2 
          AND USUPRO IN (SELECT A.CODUSU 
                           FROM TBCADUSU (NOLOCK) A
                          INNER JOIN (SELECT CODUSU 
                                        FROM TBCADCTA (NOLOCK) 
                                       WHERE STAREC=1 
                                         AND ORGCTA IN (1,3) 
                                         AND STACTA=250) B ON (B.CODUSU= A.CODUSU)                       
					          WHERE STAREC=1 
					            AND CODATR NOT IN (2,3,5,4) 
							        AND TIPUSU IN (2,3,4)              
						        AND STAUSU=61)  
        GROUP BY USUPRO HAVING COUNT(*) <> @NUMREC
        SELECT @FIM = MAX(ID) FROM @TPLIST
        WHILE (@INICIO <=@FIM)
          BEGIN
            SELECT @USUPRO = CODUSU FROM @TPLIST WHERE ID=@INICIO
            EXEC @RETVAL = PRCADTARCPY @USUPRO,2,13,1,@UPDUSU
            SET @INICIO = @INICIO + 1
            SET @RETURN_VALUE= @RETURN_VALUE + @RETVAL  
          END
    END
ELSE
    SET @RETURN_VALUE=-2
RETURN @RETURN_VALUE]]>
        </query>
        <parameters>
          <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="int" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="" error="EMPTYDATA"/>
          <return value="-1" message="" error="REQUIREDUSEROPERATION"/>
        </returns>
      </item>

      <item script="true" alias="A." sql="" method="InactiveRates" return="int" returnmode="5" procname="PRCADTARINAALL" desc ="Processa a inativação de registros de tarifas de usuarios ou gestores inativos" returnvalue="0">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT = 0          
IF(@UPDUSU>0)
    BEGIN
        UPDATE TBCADTAR SET STAREC=13, UPDUSU = @UPDUSU,DATUPD=GETDATE()
         WHERE NIVCFG=2 AND USUCFG IN (SELECT CODUSU FROM TBCADGER WHERE STAREC IN (0,13) ) AND STAREC<>0
        SET @RETURN_VALUE= @RETURN_VALUE + @@ROWCOUNT
        UPDATE TBCADTAR
           SET STAREC=13, UPDUSU = @UDPUSU, DATUPD=GETDATE()
         WHERE NIVCFG=1 AND USUCFGIN (SELECT USUPRO TBUSUPRO WHERE STAREC IN (0,13)) AND STAREC<>0
        SET @RETURN_VALUE= @RETURN_VALUE + @@ROWCOUNT
    END
RETURN @RETURN_VALUE
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      
      </item>-->
    </methods>
  </item>



  <item create="true"  id="33" name="TBREGBOL" friendlyname="Ticket" modelversion="3" descriptor="Registro de Boletos">
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <extendedmodel>
      <![CDATA[SELECT TOP 1 A.*, VLRLIQ = VLRBOL FROM TBREGBOL (NOLOCK) A]]>
    </extendedmodel>

    <objectclass>
      <item script="true" alias="A." sql="" method="TicketQuery" return="int" returnmode="1" procname="" desc ="Objeto de Retenção de Pesquisa de Boletos" returnvalue="1">
        <query>
          <![CDATA[
SELECT TOP 1 A.*,
       EMPNOM = I.NOMUSU,
       CEDNOM = B.NOMUSU,
       CEDCMF = B.CODCMF,
       SACNOM = C.NOMUSU,
       SACCMF = C.CODCMF,
       SACMAL = ISNULL(F.DSCEND,''),
       AVANOM = D.NOMUSU,
       AVACMF = D.CODCMF,
	     VLRLIQ = ISNULL(H.VLRLIQ,0),
	     J.DSCSTA,
	     LGNUSU = ISNULL(K.LGNUSU,''),
       DSCBLT = L.DSCTAB -- TIPO DE BOLETO
  FROM TBREGBOL (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.USUCED)
 INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = A.USUSAC)
  LEFT JOIN TBCADGER (NOLOCK) D ON (D.CODUSU = A.CODAVA)
  LEFT JOIN (SELECT DSCEND, CODUSU FROM TBCADEND (NOLOCK) WHERE TIPEND = 3 AND STAREC=1 AND REGATV=1)  F ON (F.CODUSU = A.USUSAC)
 INNER JOIN (SELECT NIDREF, VLRLIQ = SUM(VLROPE*SIGOPE) FROM TBREGOPE (NOLOCK) WHERE SUBSYS =2 AND STAREC=1 GROUP BY NIDREF) H ON (H.NIDREF= A.NIDBOL)
 INNER JOIN TBCADGER (NOLOCK) I ON (I.CODUSU  = A.CODEMP)
 INNER JOIN TBCADSTA (NOLOCK) J ON (J.CODSTA  = A.STABOL)
  LEFT JOIN TBLGNUSU (NOLOCK) K ON (K.CODUSU = A.UPDUSU AND K.REGATV=1)
 INNER JOIN TBTABGER (NOLOCK) L ON  (L.NUMTAB= 16 AND L.KEYCOD = A.TIPBOL)
        ]]>

        </query>
      </item>
      <item script="true" alias="A." sql="" method="TicketInvoice " return="int" returnmode="1" procname="" desc ="Objeto de Retenção de Pesquisa de Boletos para emissão de fatura" returnvalue="1">
        <query>
          <![CDATA[
SELECT A.* 
      ,CEDNOM = B.NOMUSU
	  ,CEDCMF = dbo.FormatCMF(B.CODCMF)
      ,SACNOM = C.NOMUSU
	  ,SACCMF = dbo.FormatCMF(C.CODCMF)
	  ,SACMAL = F.DSCEND
      ,AVANOM = D.NOMUSU
	  ,AVACMF = dbo.FormatCMF(D.CODCMF)
	  ,DSCBLT = G.DSCTAB
	  ,H.DSCSTA
	  ,I.VLRLIQ
	  ,NOMEMP = J.NOMUSU
  FROM TBREGBOL (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.USUCED)
 INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = A.USUSAC)
 INNER JOIN TBCADGER (NOLOCK) D ON (D.CODUSU = A.CODAVA)
  LEFT JOIN TBCADEND (NOLOCK) E ON (E.CODEND = A.CODEND)
 INNER JOIN (SELECT DSCEND, CODUSU FROM TBCADEND (NOLOCK) WHERE TIPEND = 3 AND STAREC=1 AND REGATV=1)  F ON (F.CODUSU = A.USUSAC)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB=16 AND G.KEYCOD = A.TIPBOL)
 INNER JOIN TBCADSTA (NOLOCK) H ON (H.CODSTA = A.STABOL)
 INNER JOIN (SELECT NIDREF, VLRLIQ = ISNULL(SUM(VLROPE*SIGOPE),0) FROM TBREGOPE (NOLOCK) WHERE SUBSYS =2 AND STAREC=1 GROUP BY NIDREF) I ON (I.NIDREF= A.NIDBOL)
 INNER JOIN TBCADGER (NOLOCK) J ON (J.CODUSU  = A.CODEMP)
        ]]>

        </query>
      </item>

      <item script="true" alias="A." sql="" method="TicketRegister" return="int" returnmode="1" procname="" desc ="Objeto de Retenção para Registro de Boletos" returnvalue="1">
        <query>
          <![CDATA[
SELECT A.NIDBOL,
    A.CODEMP, 
    A.KEYBOL,
    A.SUBSYS,
    A.NIDCBL,
    A.USUPRO,
    A.USUCED,
    CEDNOM = B.NOMUSU,
    CEDCMF = B.CODCMF,
    A.USUSAC,
    SACNOM = C.NOMUSU,
    SACCMF = C.CODCMF,
    SACMAL = F.DSCEND,
    A.CODAVA,
    AVANOM = D.NOMUSU,
    AVACMF = D.CODCMF,
    A.CODMOE,
    A.TIPBOL,
	DATEMI = FORMAT(A.DATEMI,'dd/MM/yyyy'),
	DATVCT = FORMAT(A.DATVCT,'dd/MM/yyyy'),
    A.CODCED,
    A.NIDLIM,
    A.INSBC1,
    A.INSBC2,
    A.INSBC3,
    A.DSCBOL,
    A.LINDIG,
    A.CODESP,
    A.NUMCTR,
    A.NOSNUM,
    A.IMGSAV,
    A.RSPTAR,
    A.VLRBOL,
    A.VLRTAR,
    A.VLRTDP,
    A.STAREC,
    DSCLOG = ISNULL(G.DSCTAB,''),
	DSCEND = ISNULL(E.DSCEND,''),
	DSCCPL = ISNULL(E.DSCCPL,''),
	NUMEND = ISNULL(E.NUMEND,''),
	DSCCID = ISNULL(E.DSCCID,''),
	DSCBAI = ISNULL(E.DSCBAI,''),
	CODCEP=  dbo.FormatCep(E.CODCEP)
	,VLRLIQ = ISNULL(H.VLRLIQ,0)
	,J.DSCSTA
  FROM TBREGBOL (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.USUCED)
 INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = A.USUSAC)
  LEFT JOIN TBCADGER (NOLOCK) D ON (D.CODUSU = A.CODAVA)
  LEFT JOIN TBCADEND (NOLOCK) E ON (E.CODEND = A.CODEND)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB=81 AND G.KEYCOD = E.TIPLOG)
 INNER JOIN (SELECT DSCEND, CODUSU FROM TBCADEND (NOLOCK) WHERE TIPEND = 3 AND STAREC=1 AND REGATV=1)  F ON (F.CODUSU = A.USUSAC)
 INNER JOIN (SELECT NIDREF, VLRLIQ = SUM(VLROPE*SIGOPE) FROM TBREGOPE (NOLOCK) WHERE SUBSYS =2 AND STAREC=1 GROUP BY NIDREF) H ON (H.NIDREF= A.NIDBOL)
 INNER JOIN TBCADGER (NOLOCK) I ON (I.CODUSU  = A.CODEMP)
 INNER JOIN TBCADSTA (NOLOCK) J ON (J.CODSTA  = A.STABOL)
        ]]>

        </query>
      </item>

    </objectclass>

    <insertcommand key="Identity" fieldreturn="NIDBOL" exceptionparamns="'DATCAD','DATUPD','KEYBOL','SUBSYS','CODVER','CODEMP'" procname="PRREGBOLINS" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
DECLARE @NIDCAL INT
DECLARE @PRETAR MONEY
DECLARE @PRETDP MONEY
IF(@CODAVA=0)
   SET @CODAVA=@USUCED

IF(@CODAVA>0 AND @CODEND=0)
  BEGIN
      IF(EXISTS(SELECT 1 FROM TBCADEND (NOLOCK) WHERE CODUSU = @CODAVA AND STAREC=1 AND REGATV=1))
        SELECT @CODEND = ISNULL(CODEND,0) FROM TBCADEND (NOLOCK) WHERE CODUSU = @CODAVA AND STAREC=1 AND REGATV=1
  END

/* CALCULO DE TARIFAS POR PROCESSO DE INTEGRACAO (API, MASSIVO) */
IF(@MODCAL = 1)
   BEGIN
        /* LOCALIZA CONFIGURACAO */ 
        EXEC @NIDCBL = PRCFGBOLOCREC @USUPRO, @USUCED, @TIPBOL        
        IF(@NIDCBL>0)
           BEGIN
   			      DECLARE @CODTAR INT, @TARTDP INT
              SELECT @CODTAR = CODTAR,@TARTDP=TARTDP, @APLTAR=APLTAR, @APLTDP=@APLTDP FROM TBCFGBOL WHERE NIDCBL=@NIDCBL
              /* VALOR DA TARIFA */
              IF(@CODTAR > 0 AND @APLTAR=1)
                BEGIN
                  EXEC @NIDCAL = PRCADTARCALV2 @USUPRO, @USUCED, @CODTAR,@VLRBOL, @UPDUSU,1,1, NULL,NULL,1,0,0,0,0
                  IF(@NIDCAL>0)
                    SELECT @PRETAR = EXTVLR FROM TBCALTAR WHERE NIDCAL = @NIDCAL
                END
              /* VALOR DO TDP */                
              IF(@TARTDP>0 AND @APLTDP=1)
                BEGIN
                  EXEC @NIDCAL = PRCADTARCALV2 @USUPRO, @USUCED, @TARTDP,@VLRBOL, @UPDUSU,1,1, NULL,NULL,1,0,0,0,0
                  IF(@NIDCAL>0)
                     SELECT @PRETDP = EXTVLR FROM TBCALTAR WHERE NIDCAL = @NIDCAL
                END
          END              
   END
   
IF(@MODCAL=1 AND @RSPTAR=2) -- SACADO
   BEGIN
       SET @VLRTAR = @PRETAR
       SET @VLRTDP = @PRETDP       
   END
   
        ]]>
      </pre>
      <body></body>
      <pos>
        <![CDATA[
IF(@RETURN_VALUE>0)
  BEGIN
    IF(@NOSNUM=0)
       UPDATE TBREGBOL SET NOSNUM = @RETURN_VALUE WHERE NIDBOL=@RETURN_VALUE;
  END
IF(@MODCAL=1 AND @RSPTAR=2 AND (@RETURN_VALUE > 0)) 
   BEGIN
			IF( NOT EXISTS (SELECT 1 
				             FROM TBREGOPE (NOLOCK)
                            WHERE SUBSYS=2
                              AND NIDREF= @RETURN_VALUE
                              AND CODMOV = 510) AND @PRETAR > 0 )
				BEGIN
					INSERT INTO TBREGOPE (SUBSYS, NIDREF, DATOPE,CODMOV,  VLRBAS,VLRPCT,SIGOPE,VLRPCP,  VLROPE, STAREC, UPDUSU,USELCT)
							VALUES (     2,@RETURN_VALUE,GETDATE(),   510, @VLRBOL,     0,    -1,     0, @PRETAR,      2,@UPDUSU,-1)
				END

			IF( NOT EXISTS (SELECT 1 
				             FROM TBREGOPE (NOLOCK)
                            WHERE SUBSYS=2
                              AND NIDREF= @RETURN_VALUE
                              AND CODMOV = 530) AND @PRETDP > 0 )
				BEGIN
					INSERT INTO TBREGOPE (SUBSYS, NIDREF, DATOPE,CODMOV,  VLRBAS,VLRPCT,SIGOPE,VLRPCP,  VLROPE, STAREC, UPDUSU,USELCT)
							VALUES (     2,@RETURN_VALUE,GETDATE(),   530, @VLRBOL,     0,    -1,     0, @PRETDP,      2,@UPDUSU,-1)
				END

   END
        ]]>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGBOLINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="NIDBOL" exceptionparamns="'DATCAD','KEYBOL','SUBSYS','CODVER','CODEMP'" procname="PRCFGBOLUPD" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE()
IF(@CODAVA=0)
   SET @CODAVA=@USUCED

IF(@CODAVA>0 AND @CODEND=0)
   BEGIN
      IF(EXISTS(SELECT 1 FROM TBCADEND (NOLOCK) WHERE CODUSU = @CODAVA AND STAREC=1 AND REGATV=1))
          SELECT @CODEND = ISNULL(CODEND,0) FROM TBCADEND (NOLOCK) WHERE CODUSU = @CODAVA AND STAREC=1 AND REGATV=1
   END
      ]]>

      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGBOLUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>


    <trigger>
      <item script="true" alias="A." sql="" method="" return="" procname="TR_TBREGBOL_TBREGOPE" after="INSERT, UPDATE" desc ="Efetua a atualização da tabela de registro de operacoes para o subsistema 2 - boletos">
        <query>
          <![CDATA[
    BEGIN
       DECLARE @SIGOPE SMALLINT =1
       DECLARE @SUBSYS TINYINT, @RSPTAR TINYINT, @STAREC TINYINT, @UPDATED TINYINT
       DECLARE @NIDREF INT, @UPDUSU INT
	   DECLARE @VLRBOL FLOAT, @VLRTAR FLOAT, @VLRTDP FLOAT
	   
	   SELECT @RSPTAR = RSPTAR,
	          @SUBSYS = SUBSYS,
			  @NIDREF = NIDBOL,
			  @STAREC = STAREC,
			  @VLRBOL = VLRBOL,
			  @VLRTAR = VLRTAR,
			  @UPDUSU = UPDUSU,
			  @VLRTDP = VLRTDP
	    FROM inserted

	   SET @UPDATED=0;
       IF( EXISTS (SELECT 1 FROM TBREGOPE (NOLOCK)
                            WHERE SUBSYS=@SUBSYS
                              AND NIDREF= @NIDREF
                              AND CODMOV = 501))
          BEGIN
            UPDATE TBREGOPE
               SET VLROPE = @VLRBOL,
                   STAREC = @STAREC,
                   UPDUSU = @UPDUSU,
				   DATUPD = GETDATE()
            WHERE SUBSYS =@SUBSYS
			  AND NIDREF = @NIDREF
			  AND CODMOV = 501
			  AND STAREC <> @STAREC
			  AND VLROPE <> @VLRBOL
          END
       ELSE
            BEGIN
                INSERT INTO TBREGOPE(SUBSYS,NIDREF,DATOPE,CODMOV,VLRBAS,VLRPCT,SIGOPE,VLRPCP,VLROPE,STAREC,UPDUSU)
                SELECT inserted.SUBSYS,inserted.NIDBOL,inserted.DATCAD,501,inserted.VLRBOL,100,1,1,inserted.VLRBOL,inserted.STAREC,inserted.UPDUSU FROM inserted WHERE inserted.VLRBOL>0
            END
    
	   IF(@VLRTAR>0)
			BEGIN
			   IF(@RSPTAR=1)
				  SET @SIGOPE=0;
    
			   IF( EXISTS (SELECT 1 FROM TBREGOPE (NOLOCK)
									WHERE SUBSYS = @SUBSYS
									  AND NIDREF = @NIDREF
									  AND CODMOV = 510))
				  BEGIN
					UPDATE TBREGOPE
					   SET
						   VLROPE = @VLRTAR,
						   STAREC = @STAREC,
						   UPDUSU = @UPDUSU,
		   				   DATUPD = GETDATE()
					WHERE SUBSYS =@SUBSYS
					  AND NIDREF = @NIDREF
					  AND CODMOV = 510
					  AND STAREC <> @STAREC
					  AND VLROPE <> @VLRTAR

				  END
			   ELSE
					BEGIN
					   INSERT INTO TBREGOPE(SUBSYS,NIDREF,DATOPE,CODMOV,VLRBAS,VLRPCT,SIGOPE,VLRPCP,VLROPE,STAREC,UPDUSU)
						SELECT inserted.SUBSYS,inserted.NIDBOL,inserted.DATCAD,510,inserted.VLRBOL,0,@SIGOPE,1,inserted.VLRTAR,inserted.STAREC,inserted.UPDUSU FROM inserted WHERE inserted.VLRTAR>0
					END
			END    
    
	IF(@VLRTDP>0)
		BEGIN
			IF( EXISTS (SELECT 1 FROM TBREGOPE (NOLOCK)
	 					 WHERE SUBSYS = @SUBSYS
						   AND NIDREF = @NIDREF
						   AND CODMOV = 530))
				  BEGIN
					UPDATE TBREGOPE
					   SET VLROPE = @VLRTAR,
						   STAREC = @STAREC,
						   UPDUSU = @UPDUSU,
		   				   DATUPD = GETDATE()
					WHERE SUBSYS =@SUBSYS
					  AND NIDREF = @NIDREF
					  AND CODMOV = 530
					  AND STAREC <> @STAREC
					  AND VLROPE <> @VLRTDP
				  END
		   ELSE
				BEGIN
					INSERT INTO TBREGOPE(SUBSYS,NIDREF,DATOPE,CODMOV,VLRBAS,VLRPCT,SIGOPE,VLRPCP,VLROPE,STAREC,UPDUSU)
					SELECT inserted.SUBSYS,inserted.NIDBOL,inserted.DATCAD,530,0,0,1,1,inserted.VLRTDP,inserted.STAREC,inserted.UPDUSU FROM inserted WHERE inserted.VLRTDP>0
				END
		END
 END          
       ]]>
        </query>
      </item>
    </trigger>

    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="Ticket" procname="PRREGBOLSEL" desc ="Seleciona o registro de Boleto de acordo com o ID">
        <query>
          <![CDATA[SELECT A.*,  VLRLIQ= ISNULL(B.VLRLIQ,0) 
	  FROM TBREGBOL (NOLOCK) A INNER JOIN (SELECT NIDREF, 
	                                              VLRLIQ = SUM(VLROPE*SIGOPE) 
										     FROM TBREGOPE (NOLOCK) 
											 WHERE SUBSYS =2 AND STAREC IN (1,2) 
											 GROUP BY NIDREF) B ON (B.NIDREF= A.NIDBOL)
     WHERE (1=1)]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Boleto" name="NIDBOL" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>

    <methods>
      <item webtype="[HttpPos]" script="true" alias="A." processcode="200"  permission="UPDUSU" sql="" method="CloseTicket" return="int" returnmode="2" procname="PRREGBOLCLOTKT" desc ="Encerra um boleto" returnvalue="0">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT=0          
IF(NOT EXISTS(SELECT 1 FROM TBREGBOL (NOLOCK) WHERE NIDBOL=@NIDBOL))
   SET @RETURN_VALUE=-5;
IF(@TIPBXA<=0 AND @RETURN_VALUE=0)
   SET @RETURN_VALUE = -1
IF(@STABOL<=0 AND @RETURN_VALUE=0)
   SET @RETURN_VALUE = -2
IF(@UPDUSU<=0 AND @RETURN_VALUE=0)
   SET @RETURN_VALUE = -3
IF(@DATPGT='' OR @DATPGT IS NULL AND (@RETURN_VALUE=0))
   SET @RETURN_VALUE = -4
  
IF(@RETURN_VALUE=0)   
  BEGIN          
      UPDATE TBREGBOL 
         SET TIPBXA=@TIPBXA, 
             STABOL=@STABOL, 
             DATPGT=@DATPGT, 
             UPDUSU=@UPDUSU, 
             DATUPD=GETDATE(),
             STAREC=@STAREC 
       WHERE NIDBOL =@NIDBOL          
      IF(@@ERROR=0)
          SET @RETURN_VALUE=@NIDBOL
  END
RETURN @RETURN_VALUE;  
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Boleto" name="NIDBOL" type="int" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Status do Registro" name="STAREC" type="System.Byte" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Tipo de Baixa" name="TIPBXA" type="System.Int16" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Status do Boleto" name="STABOL" type="System.Int16" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Data de Pagamento" name="DATPGT" type="System.DateTime" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="int" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Valor Pagamento ou Baixa" name="VLRPGT" type="System.Decimal" default="" output="" null="false"/>
        </parameters>

        <returns>
          <return value="0" operator="==" message="FALHA DE ATUALIZAÇÃO" error="FAILWRITE"/>
          <return value="0"  operator=">" message="BOLETO BAIXADO COM SUCESSO" error="OK"/>
          <return value="-1" message="INFORME UM TIPO DE BAIXA VALIDO" error="INVALIDARGUMENT"></return>
          <return value="-2" message="INFORME UM STATUS DE MOVIMENTO VALIDO" error="INVALIDARGUMENT"></return>
          <return value="-3" message="" error="REQUIREDUSEROPERATION"/>
          <return value="-4" message="INFORME UMA DATA DE PAGAMENTO OU BAIXA VALIDA" error="INVALIDARGUMENT"></return>
          <return value="-5" message="BOLETO NAO EXISTE" error="RECORDNOTFOUND"></return>
        </returns>

      </item>
    </methods>

  </item>

  <item create="true"  id="34" name="TBREGOPE" friendlyname="OperationsRegister" modelversion="3" descriptor="Registro de Operações">
    <SqlTable></SqlTable>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>

    <extendedmodel>
      <![CDATA[
SELECT  TOP 1 A.*, 
B.DSCMOV, 
DSCOPE= ISNULL(C.DSCTAB,''),  
DSCREC= ISNULL(D.DSCTAB,''), 
LGNUSU = ISNULL(E.LGNUSU,''),
VLRTOT = VLROPE
FROM TBREGOPE (NOLOCK) A
INNER JOIN TBTIPMOV (NOLOCK) B ON (B.CODMOV = A.CODMOV)
INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB= 10 AND C.KEYCOD = A.SIGOPE)
INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=  7 AND D.KEYCOD = A.STAREC)
LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1)
    ]]>

    </extendedmodel>

    <insertcommand key="Identity" fieldreturn="NIDOPE" exceptionparamns="'DATCAD','DATUPD'" procname="PRVALBOLINS" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        ]]>
      </pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGOPEINS";
          audit.AUDSRC =_changed;
          audit.AUDCHG ="";
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" fieldreturn="NIDOPE" exceptionparamns="'DATCAD'" procname="PRCFGBOLUPD" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>SET @DATUPD=GETDATE()</pre>
      <body></body>
      <pos></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGOPEUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
      </returns>
    </updatecommand>
    <selectcommand>
      <item script="true" alias="A." sql="" processcode="100" method="Select" return="OperationsRegister" procname="" desc ="Obtêm o registro de operação selecionado">
        <query>
          <![CDATA[
SELECT  A.*, B.DSCMOV, DSCOPE= ISNULL(C.DSCTAB,''),  DSCREC= ISNULL(D.DSCTAB,''), LGNUSU = ISNULL(E.LGNUSU,'')
FROM TBREGOPE (NOLOCK) A
INNER JOIN TBTIPMOV (NOLOCK) B ON (B.CODMOV = A.CODMOV)
INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB= 10 AND C.KEYCOD = A.SIGOPE)
INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=  7 AND D.KEYCOD = A.STAREC)
LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1)          
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Operacoes" name="NIDOPE" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>


  <item create="true"  id="35" name="TBCADCVL" friendlyname="Linked Account" modelversion="3" descriptor="Contas Vinculadas">
    <UpdateKey>Key</UpdateKey>
    <audit>false</audit>
    <keyaudit></keyaudit>
    <FilterSelect>False</FilterSelect>
    <listselect></listselect>
    <CSharpPartial>False</CSharpPartial>
    <extendedmodel>
      <![CDATA[SELECT TOP 1 A.*
       ,B.NUMCTA 
	   ,B.NUMAGE
	   ,B.NUMDVE
	   ,C.NOMUSU
	   ,DSCBCO = NUMBCO + ' - ' + ISNULL(D.DSCTAB,''),DSCSTA
	   ,CODCMF = DBO.FormatCMF(B.CODCMF)
	   ,NOMBNF = CASE WHEN B.ORGCTA IN (1,3,4)  THEN 'O PROPRIO' ELSE B.NOMBNF END
     ,LGNUSU = ISNULL(F.LGNUSU,'')
     ,G.DSCCTA
  FROM TBCADCVL (NOLOCK) A 
 INNER JOIN TBCADCTA (NOLOCK) B ON (B.NIDCTA = A.NIDCTA)
 INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = B.CODUSU)
 INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=12 AND D.KEYTXT = B.NUMBCO) 
 INNER JOIN TBCADSTA (NOLOCK) E ON (E.CODSTA = B.STACTA)  
  LEFT JOIN TBLGNUSU (NOLOCK) F ON (F.CODUSU = A.UPDUSU AND F.REGATV = 1)   
 INNER JOIN TBTIPCTA (NOLOCK) G ON (G.TIPCTA = B.TIPCTA)     
]]>
    </extendedmodel>
    <SqlTable></SqlTable>
    <procedure>1100000000</procedure>
    <asp>110000000</asp>
    <csharp>11000000</csharp>
    <insertcommand key="identity" exceptionparamns="'DATCAD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
DECLARE @EXIREC TINYINT=0
IF(EXISTS(SELECT 1 FROM TBCADCTA (NOLOCK) WHERE NIDCTA =@NIDCTA))
   BEGIN
      IF(EXISTS(SELECT 1 FROM TBCADCVL (NOLOCK) WHERE CODUSU=@CODUSU AND NIDCTA =@NIDCTA))
          BEGIN
              SELECT @EXIREC = STAREC FROM TBCADCVL (NOLOCK) WHERE CODUSU=@CODUSU AND NIDCTA =@NIDCTA
              IF(@EXIREC=0)
                  BEGIN
                      UPDATE TBCADCVL SET STAREC=1, DATUPD = GETDATE(), UPDUSU=@UPDUSU WHERE CODUSU=@CODUSU AND NIDCTA =@NIDCTA
                      SET @RETURN_VALUE= 2
                  END
          END                  
     END        
ELSE
    SET @RETURN_VALUE = -3
    
      ]]>
      </pre>
      <body></body>
      <pos>
      </pos>
      <returns>
        <return value="1" message="CONTA VINCULADA COM SUCESSO" error="OK"/>
        <return value="2" message="CONTA REVINCULADA COM SUCESSO" error="OK"/>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="" error="ACCOUNTNOTFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="identity" fieldreturn="NIDCVL" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        SET @DATUPD=GETDATE();
      </pre>
      <body></body>
      <pos>
      </pos>
      <returns>
        <return value="2" message="VINCULO RESTABELECIDO COM SUCESSO" error="OK"/>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql="" processcode="100" method="Select" return="LinkedAccount" procname="PRCADCTOSEL" desc ="Obtêm o registro da conta vinculada com base no id informado">
        <query>
          <![CDATA[
SELECT A.*
       ,B.NUMCTA 
	   ,B.NUMAGE
	   ,B.NUMDVE
	   ,C.NOMUSU
	   ,DSCBCO = NUMBCO + ' - ' + ISNULL(D.DSCTAB,''),DSCSTA
	   ,CODCMF = DBO.FormatCMF(B.CODCMF)
	   ,NOMBNF = CASE WHEN B.ORGCTA IN (1,3,4)  THEN 'O PROPRIO' ELSE B.NOMBNF END
     ,LGNUSU = ISNULL(F.LGNUSU,'')
     ,G.DSCCTA
  FROM TBCADCVL (NOLOCK) A 
 INNER JOIN TBCADCTA (NOLOCK) B ON (B.NIDCTA = A.NIDCTA)
 INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = B.CODUSU)
 INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=12 AND D.KEYTXT = B.NUMBCO) 
 INNER JOIN TBCADSTA (NOLOCK) E ON (E.CODSTA = B.STACTA)  
  LEFT JOIN TBLGNUSU (NOLOCK) F ON (F.CODUSU = A.UPDUSU AND F.REGATV = 1)   
 INNER JOIN TBTIPCTA (NOLOCK) G ON (G.TIPCTA = B.TIPCTA)     
         
]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID da Conta Vinculada" name="NIDCVL" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>

    <methods>
      <item webtype="POST" script="true" alias="A." processcode="200"  permission="UPDUSU" sql="" method="RemoveLinkedID" return="int" returnmode="5" procname="PRCADCVLREMLNK" desc ="Remove um conta vinculada da lista" returnvalue="0">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0          
DECLARE @CANEXE INT =0          
IF(@UPDUSU<=0)
   SET @RETURN_VALUE = -2

IF(@RETURN_VALUE>0 AND @CANEXE=1)  
   BEGIN
      IF(EXISTS(SELECT 1 FROM TBCADCVL (NOLOCK) WHERE CODUSU = @CODUSU AND NIDCTA=@NIDCTA ) AND @RETURN_VALUE=0)         
          BEGIN
              UPDATE TBCADCVL SET STAREC=0, UPDUSU=@UPDUSU, DATUPD=GETDATE() WHERE CODUSU=@CODUSU AND NIDCTA = @NIDCTA
              SET @RETURN_VALUE=1
          END
   END          
ELSE
   SET @RETURN_VALUE=-1
RETURN @RETURN_VALUE   
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Código do Usuário" name="CODUSU" type="int" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Id da Conta" name="NIDCTA" type="int" default="" output="" null="false"/>
          <parameter input="true" apply="true" desc ="Usuário de Atualização" name="UPDUSU" type="int" default="" output="" null="false"/>
        </parameters>

        <returns>
          <return value="0" message="" error="FAILWRITE"/>
          <return value="1" message="VINCULO REMOVIDO COM SUCESSO" error="OK"/>
          <return value="-1" error="RECORDNOTFOUND"/>
          <return value="-2" message="" error="REQUIREDUSEROPERATION"/>
        </returns>

      </item>

      <item script="true" alias="A." sql="" processcode="205" method="LocateAccount" return="int" returnmode="1" procname="PRCADCVLLOCACT" desc ="Localiza uma conta digital conforme os parâmetros fornecidos" returnvalue="1" remarks="Retona o ID da Conta Virtual associada, caso contrário indica erro de pesquisa">
        <query>
          <![CDATA[
SET @RETURN_VALUE=0
DECLARE @NIDCTA INT=0
SET @NOMPSQ= LTRIM(RTRIM(@NOMPSQ))
IF(@CODUSU IS NULL OR @CODUSU <=0)
   SET @RETURN_VALUE=-2
   
IF(@NOMPSQ<>'' AND @RETURN_VALUE=0)
		BEGIN
			IF(@METPSQ=1)
				SELECT @NIDCTA = NIDCTA 
 				  FROM TBCADCTA (NOLOCK) 
         WHERE ORGCTA = 1
           AND stacta = 250
           AND starec = 1
           AND codusu in (SELECT CODUSU FROM TBCADGER (NOLOCK) WHERE CODCMF = @NOMPSQ AND STAREC=1 AND STAUSU=61)     	
			ELSE
				SELECT @NIDCTA = NIDCTA FROM TBCADCTA (NOLOCK) where orgcta=1 AND STACTA=250 AND STAREC=1 and NUMCTA = @NOMPSQ
				  SET @RETURN_VALUE = ISNULL(@NIDCTA,0)
		END

/*
IF(@NIDCTA>0 AND @RETURN_VALUE=0)
		BEGIN
			IF (EXISTS(SELECT 1 FROM TBCADCVL (NOLOCK) WHERE CODUSU=@CODUSU AND NIDCTA = @NIDCTA AND STAREC=1))
			    SET @RETURN_VALUE = -1
			ELSE
				  SET @RETURN_VALUE = @NIDCTA
		END
*/    
RETURN @RETURN_VALUE          
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="false" desc ="Método de Pesquisa (1 - POR CPF/CNPF, 2 - POR CONTA)" name="METPSQ" type="System.Byte" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Valor de Pesquisa" name="NOMPSQ" type="System.String" size="25" default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
        </parameters>
        <returns>
          <return operator=">" value="0" message="" error="OK"></return>
          <return value="0" message="" error="RECORDNOTFOUND"></return>
          <return value="-1" message="O REGISTRO JÁ ESTA VINCULADO AO USUARIO" error="INVALIDARGUMENT"></return>
          <return value="-2" message="" error="INVALIDUSER"></return>
        </returns>
      </item>
    </methods>
  </item>

  <item create="true"  id="36" name="TBCALTAR" friendlyname="Tariffed" modelversion="3" descriptor="Memória de Cáluclo de Tarifas">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel></extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
  </item>

  <item create="true"  id="37" name="TBREGCCR" friendlyname="CheckingAccount" modelversion="3" descriptor="Registro de Conta Corrente">
    <UpdateKey>Key</UpdateKey>
    <audit>False</audit>
    <keyaudit></keyaudit>
    <FilterSelect>False</FilterSelect>
    <listselect></listselect>
    <CSharpPartial>True</CSharpPartial>
    <SqlTable></SqlTable>
    <extendedmodel>
      <![CDATA[]]>
    </extendedmodel>
    <fieldreturn></fieldreturn>
    <procedure>111100000000</procedure>
    <asp>1110000000</asp>
    <csharp>111100000</csharp>

    <view>
      <item script="true" alias="A." sql="" method="" return="" procname="VWREGCCRSLDUSUORG" desc ="View de Informações consolidados de Saldo por Usuario e Origem de conta">
        <query>
          <![CDATA[
SELECT CODUSU, ORGCTA, SUM(VLRMOV*SIGOPE) SLDACT 
  FROM TBREGCCR (NOLOCK) A1 	
 WHERE A1.STAREC >0
   AND A1.TIPVAL = 1
   AND A1.REGHAB = 1
   AND A1.INDLCT = 2
 GROUP BY A1.CODUSU, A1.ORGCTA
        ]]>
        </query>
      </item>



    </view>

    <objectproperty>
      <parameters>
        <parameter input="true" apply="true" desc ="ID da Transação" name="NIDTRA" type="System.String" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Lote Financeiro" name="LOTFIN" type="System.Int32" default="" output="" null="false"/>
      </parameters>
    </objectproperty>

    <!--<objectclass>
      <item script="true" alias="A." sql="" method="ExtratoContaProduto" return="int" returnmode="1" procname="" desc ="Objeto de Retenção de Informações de Extrato de Cartoes com base em produto" returnvalue="1">
        <query>
          <![CDATA[
  DECLARE @RESULT TABLE 
  (
	  PAGNRO smallint NOT NULL,
	  NIDREX int NOT NULL,
	  PRNDAT VARCHAR(10) DEFAULT '',
	  PRNHOR VARCHAR(8) DEFAULT '',
	  NUMTRA varchar(17) NOT NULL  DEFAULT (''),
	  CODCRT int NOT NULL DEFAULT 0,
	  NOMEST varchar(70) NOT NULL DEFAULT (''),
	  DSCTRA varchar(50) NOT NULL DEFAULT (''),
	  VLRTRA money NOT NULL DEFAULT ((0)),
	  TIPPRO TINYINT NOT NULL DEFAULT 6,
    SBLMOE VARCHAR(6) DEFAULT 'R$',  
	  PAGMAX int NOT NULL DEFAULT 0  
  ) 
  SELECT * FROM @RESULT          
        ]]>

        </query>
      </item>
      -->
    <!--<item script="true" alias="A." sql="" method="DataOut" return="int" returnmode="1" procname="" desc ="Objeto de Retenção de Informações de Registro de Contabilização de Lançamentos" returnvalue="1">
        <query>
          <![CDATA[
            SELECT CODPRT 
                  ,CODUSU 
                  ,USUPRO
                  ,USUDEB = CODUSU
                  ,CTADEB = NIDCTA
                  ,DEBPRT = CODCRT
                  ,CRDPRT = CODCRT
                  ,USUCRD = CODUSU
                  ,CTACRD = NIDCTA
                  ,CRDCTA = NIDCTA
                  ,DEBCTA = NIDCTA, TIPLIN = CAST(0 AS TINYINT), CODRSP = '00', CODPRO = CAST(0 AS SMALLINT), VALCRT = '00/00', PSWCRT = '0000', OPRCRT, DSCERR='' FROM TBREGCCR (NOLOCK) WHERE NIDCCR=-1
        ]]>
        </query>
      </item>-->
    <!--

    </objectclass>-->


    <insertcommand key="Identity" audit="false" exceptionparamns="'DATCAD','DATUPD', 'NIDCCR'" procname="PRREGCCRINS" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
DECLARE @ORGCTA TINYINT = 1
EXEC @ORGCTA = PRGETACTSRC @NIDCTA
]]>

      </pre>
      <body></body>
      <pos>
        <![CDATA[
IF(@RETURN_VALUE>0)
   UPDATE TBREGCCR SET ORGCTA = @ORGCTA WHERE NIDCCR=@RETURN_VALUE]]>
      </pos>
      <returns>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="Identity" exceptionparamns="'DATCAD'" procname="PRREGCCRUPD" method="Update" processcode="20">
      >
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[SET @DATUPD =GETDATE();
DECLARE @ORGCTA TINYINT = 1
EXEC @ORGCTA = PRGETACTSRC @NIDCTA
        ]]>
      </pre>
      <body>
      </body>
      <pos>
        <![CDATA[
IF(@RETURN_VALUE>0)
   UPDATE TBREGCCR SET ORGCTA = @ORGCTA WHERE NIDCCR=@RETURN_VALUE]]>
      </pos>
      <returns>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" type="" method="Select" return="CheckingAccount" procname="" desc ="Seleciona o registro de acordo com o id de registro do conta corrente">
        <query>
          <![CDATA[SELECT * FROM TBREGCCR (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Conta Corrente" name="NIDCCR" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>

    <methods>
      <item script="true" alias="A." sql="" method="GetRecordID" return="int" returnmode="5" procname="PRREGCCRGETNIDCCR" desc ="Obtêm o ID do Registro de Conta Corrente de acordo com os parâmetros fornecidos" returnvalue="0">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT = 0
IF(@CODMOV>0)
    BEGIN
      SELECT TOP 1 @RETURN_VALUE = ISNULL(NIDCCR,0)
        FROM TBREGCCR (NOLOCK) 
       WHERE STAREC=1
         AND NIDTRA = @NIDTRA
         AND CODMOV = @CODMOV
    END         
ELSE
    BEGIN
      SELECT TOP 1 @RETURN_VALUE = ISNULL(NIDCCR,0)
        FROM TBREGCCR (NOLOCK) 
       WHERE STAREC=1
         AND NIDTRA = @NIDTRA
    END         
RETURN @RETURN_VALUE
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Número da Transação" name="NIDTRA" type="System.String"  size="13" default="" output="" null="false"/>
          <parameter input="true" desc ="Código de Movimento" name="CODMOV" type="System.Int16" default="0" output="" null="false"/>

        </parameters>
      </item>
      <item script="true" alias="A." sql="" method="HasSolicitation" return="int" returnmode="5" procname="PRREGCCRGETCODSOL" desc ="Obtêm o ID do Registro de Conta Corrente de uma solicitação de acordo com os parâmetros fornecidos" returnvalue="0">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT = 0
SELECT TOP 1 @RETURN_VALUE = ISNULL(NIDCCR,0)
  FROM TBREGCCR (NOLOCK) 
 WHERE STAREC=1
   AND TIPLCT = @TIPLCT
   AND CODMOV = @CODMOV   
   AND CODUSU = @CODUSU
   AND CODSOL = @CODSOL   
   AND CODTRM = @CODTRM      
RETURN @RETURN_VALUE   
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Tipo de Solicitação"   name="TIPLCT" type="System.Int16" output="" null="false"/>
          <parameter input="true" desc ="Código de Movimento"   name="CODMOV" type="System.Int16" output="" null="false"/>
          <parameter input="true" desc ="Código do Usuário"     name="CODUSU" type="System.Int32" output="" null="false"/>
          <parameter input="true" desc ="Número da Solicitação" name="CODSOL" type="System.String"  size="15" default="" output="" null="false"/>
          <parameter input="true" desc ="Tipo de Transação Registro" name="CODTRM" type="System.Byte" default="" output="" null="false"/>
        </parameters>
      </item>
    </methods>
  </item>

  <item create="true"  id="38" name="TBRBBBOL" friendlyname="Ticket Receipt Record" modelversion="3" descriptor="Registro de Recebimento de Boleto">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable></SqlTable>
    <extendedmodel>
      <![CDATA[SELECT TOP 1 A.*, NIDBOL = A.NIDLIM FROM TBRBBBOL (NOLOCK) A]]>
    </extendedmodel>
    <fieldreturn></fieldreturn>
    <procedure>111100000000</procedure>
    <asp>1110000000</asp>
    <csharp>111100000</csharp>
    <trigger>
      <item script="true" alias="A." sql="" method="" return="" procname="TR_TBRBBBOL" after="INSERT, UPDATE" desc ="Trigger de Eventos da Tabela de Registro de Recebimento de Boletos">
        <query>
          <![CDATA[
DECLARE @NIDRBB INT =0
SELECT @NIDRBB=NIDRBB FROM inserted
IF(inserted.STAREC=0)
   UPDATE TBBXABOL SET STAREC = 0, 
          DATUPD=GETDATE(), UPDUSU=INSERTED.UPDUSU WHERE NIDRBB = @NIDRBB AND STAREC<>9
       ]]>
        </query>
      </item>
    </trigger>
    <insertcommand key="Identity" audit="false" exceptionparamns="'DATCAD','DATUPD', 'NIDRBB'" procname="PRRBBBOLINS" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[

IF(@NUMREX<>'')
    BEGIN
       IF(EXISTS(SELECT 1 FROM TBRBBBOL (NOLOCK) WHERE NUMREX=@NUMREX AND STAREC=1))
           SET @RETURN_VALUE=-3
    END
        
]]>

      </pre>
      <body></body>
      <pos/>
      <returns>
        <return value="-1" message="FALHA NA INCLUSAO DO REGISTRO" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="AUTORIZAÇÃO DE PAGAMENTO UTILIZADA" error="AUTHORIZATIONPAYMENTUSED"/>

      </returns>
    </insertcommand>
    <updatecommand key="Identity" audit="false" exceptionparamns="'DATCAD'" procname="PRRBBBOLUPD" method="Update" processcode="20">
      >
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[SET @DATUPD =GETDATE();]]>
      </pre>
      <body>
      </body>
      <pos>
        <![CDATA[]]>
      </pos>
      <returns>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="true" alias="A." sql="" type="" method="Select" return="TicketReceiptRecord" procname="" desc ="Seleciona o registro de acordo com o id de registro do conta corrente">
        <query>
          <![CDATA[SELECT * FROM TBRBBBOL (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Recebimento de Boleto" name="NIDRBB" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>

    <methods>
      <item webtype="[HttpPost]"  processcode="200" script="true" alias="A." sql="" method="CloseBatch" return="int" returnmode="5" procname="PRRBBBOLCLOBAT" desc ="Executa o fechamento de um lote de Registro de Recebimento de Boleto" returnvalue="0">
        <query>
          <![CDATA[
UPDATE TBRBBBOL SET STAREC = 9 
 WHERE NUMROW = (SELECT COUNT(*) 
  FROM TBBXABOL WHERE NIDRBB=@NIDRBB 
    AND STAREC=9)
AND NIDRBB=@NIDRBB
          
          ]]>
        </query>
        <parameters>
          <parameter input="true" apply="false" desc ="id do Registro de Recebimento de Boleto" name="NIDRBB" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </methods>


  </item>

  <item create="true"  id="39" name="TBBXABOL" friendlyname="Ticket Receipt Detail" modelversion="3" descriptor="Registro de Detalhe do Recebimento de Boleto" >
    <CSharpPartial>True</CSharpPartial>
    <SqlTable></SqlTable>
    <extendedmodel></extendedmodel>
    <fieldreturn></fieldreturn>
    <procedure>111100000000</procedure>
    <asp>1110000000</asp>
    <csharp>111100000</csharp>
    <insertcommand key="Identity" audit="false" exceptionparamns="'DATCAD','DATUPD', 'NIDRBD','CTLOPE'" procname="PRBXABOLINS" method="Insert" processcode="10" remarks="@@Retornos@-1 = Falha de Atualização de Inclusao do Registro de Baixa@-2 = Boleto nâo existe@-3 = Boleto não está em aberto@-4 = Registro de Baixa já existente@-5 = Valor do Reebimento difere do saldo do boleto@-6 = Falha na atualização de baixa do boleto@Maior que zero = Boleto Baixado com sucesso">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
    DECLARE @RSTLIQ MONEY =0    
    DECLARE @CTLOPE TINYINT =0    
    IF( NOT EXISTS(SELECT 1 FROM TBREGBOL (NOLOCK) WHERE NIDBOL=@NIDBOL))
       BEGIN
          SET @STAREC=13
          SET @DSCOBS = 'BOLETO NÃO EXISTE'
          SET @RETURN_VALUE=-2
       END
    
    IF(@STAREC<>13)
       BEGIN
          IF( NOT EXISTS(SELECT 1 FROM TBREGBOL (NOLOCK) WHERE NIDBOL=@NIDBOL AND STABOL = 1))
              BEGIN
                SET @STAREC=13
                SET @DSCOBS = 'BOLETO NÃO ESTÁ EM ABERTO'
                SET @RETURN_VALUE=-3                
              END
       END
    
    IF(@STAREC<>13)
       BEGIN
          IF(EXISTS(SELECT 1 FROM TBBXABOL (NOLOCK) WHERE NIDBOL=@NIDBOL AND STAREC=9))
		     BEGIN
				SET @STAREC = 13
				SET @DSCOBS = 'REGISTRO DE BAIXA DE BOLETO JA EXISTE'
          SET @RETURN_VALUE=-4        
		     END
       END          
    
    SELECT @IDXSEQ= (ISNULL(MAX(IDXSEQ),0) + 1) FROM TBBXABOL (NOLOCK) WHERE NIDBOL = @NIDBOL
    
    IF(@STAREC<>13)   
       BEGIN
          SELECT @RSTLIQ = ISNULL(SUM(VLROPE*SIGOPE),0) FROM TBREGOPE (NOLOCK) WHERE SUBSYS =2 AND STAREC IN (1,2) AND NIDREF=@NIDBOL GROUP BY NIDREF
          IF((@RSTLIQ-@VLRLIQ)!=0)
            BEGIN
                SET @STAREC=13
                SET @DSCOBS = 'VALOR DO RECEBIMENTO DIFERE DO SALDO DO BOLETO'
                SET @RETURN_VALUE=-5
            END   
       END
       
    IF(@STAREC<>13)
       SET @CTLOPE=1 -- INDICA QUE O REGISTRO PODE SER PROCESSADO

]]>

      </pre>
      <body></body>
      <pos>
        <![CDATA[
IF(@RETURN_VALUE>0 AND @CTLOPE=1)
    BEGIN
      DECLARE @IDPROC INT
      DECLARE @REGBXO INT      
			EXEC @IDPROC = PRGETNXTNUM 100      
       
			IF( NOT EXISTS (SELECT 1 
				               FROM TBREGOPE (NOLOCK)
                              WHERE SUBSYS=2
                                AND NIDREF= @NIDBOL
                                AND CODMOV = 540) AND @VLRLIQ > 0 )
			  BEGIN
					  INSERT INTO TBREGOPE (SUBSYS, NIDREF, DATOPE,CODMOV,  VLRBAS,VLRPCT,SIGOPE,VLRPCP,  VLROPE, STAREC, UPDUSU,USELCT,IDPROC)
						              VALUES (     2,@NIDBOL,@DATPGT,   540, @VLRLIQ,     0,    -1,     0, @VLRLIQ,      2,@UPDUSU,     1,@IDPROC)
			  END
        
  	  IF( NOT EXISTS (SELECT 1 
						            FROM TBREGOPE (NOLOCK)
							          WHERE SUBSYS=2
							            AND NIDREF= @NIDBOL
							            AND CODMOV = 522) AND @VLRMOR > 0 )
        BEGIN
				    INSERT INTO TBREGOPE (SUBSYS, NIDREF, DATOPE,CODMOV,  VLRBAS,VLRPCT,SIGOPE,VLRPCP,  VLROPE, STAREC, UPDUSU,IDPROC)
								         VALUES  (     2,@NIDBOL,@DATPGT,   522, @VLRMOR,     0,    1,     0, @VLRMOR,      2,@UPDUSU,@IDPROC)
			  END
      
		  IF( NOT EXISTS (SELECT 1 
								        FROM TBREGOPE (NOLOCK)
								       WHERE SUBSYS=2
								         AND NIDREF= @NIDBOL
								         AND CODMOV = 521) AND @VLRJUR > 0 )
		    BEGIN
				    INSERT INTO TBREGOPE (SUBSYS, NIDREF, DATOPE,CODMOV,  VLRBAS,VLRPCT,SIGOPE,VLRPCP,  VLROPE, STAREC, UPDUSU,IDPROC)
									        VALUES (     2,@NIDBOL,@DATPGT,   521, @VLRJUR,     0,    1,     0, @VLRJUR,      2,@UPDUSU,@IDPROC)
		    END
        
		  IF( NOT EXISTS (SELECT 1 
								    FROM TBREGOPE (NOLOCK)
								   WHERE SUBSYS=2
								     AND NIDREF= @NIDBOL
								     AND CODMOV = 523) AND @VLRDES > 0 )
		    BEGIN
					    INSERT INTO TBREGOPE (SUBSYS, NIDREF, DATOPE,CODMOV,  VLRBAS,VLRPCT,SIGOPE,VLRPCP,  VLROPE, STAREC, UPDUSU,IDPROC)
									  VALUES (     2,@NIDBOL,@DATPGT,   523, @VLRDES,     0,    -1,     0, @VLRDES,      2,@UPDUSU,@IDPROC)
		    END
		  IF( NOT EXISTS (SELECT 1 
								    FROM TBREGOPE (NOLOCK)
								   WHERE SUBSYS=2
								     AND NIDREF= @NIDBOL
								     AND CODMOV = 524) AND @VLRTEX > 0 )
		    BEGIN
					    INSERT INTO TBREGOPE (SUBSYS, NIDREF, DATOPE,CODMOV,  VLRBAS,VLRPCT,SIGOPE,VLRPCP,  VLROPE, STAREC, UPDUSU,IDPROC)
									  VALUES (     2,@NIDBOL,@DATPGT,   524, @VLRTEX,     0,     0,     0, @VLRTEX,      2,@UPDUSU,@IDPROC)
		    END


        EXEC @REGBXO = PRREGBOLCLOTKT @NIDBOL, 9, @TIPBXA, 2, @DATPGT,@UPDUSU,@VLRLIQ
           
        IF(@REGBXO>0)
            BEGIN
                    -- CONTABILIZA PARA O CONTA CORRENTE
                    
                    -- FECHA O REGISTRO COM STATUS DE PROCESSADO
                    UPDATE TBBXABOL SET STAREC=9 WHERE NIDRBD=@RETURN_VALUE                    
            END
        ELSE
            BEGIN
                 DELETE FROM TBREGOPE WHERE IDPROC=@IDPROC
                 UPDATE TBBXABOL SET STAREC=15 WHERE NIDRBD=@RETURN_VALUE
                 SET @RETURN_VALUE=-6
            END
    END
]]>

      </pos>
      <returns>
        <return value="0" operator=">" message="BOLETO BAIXADO COM SUCESSO" error=""/>
        <return value="0" message="FALHA NA LEITURA DO REGISTRO DE BAIXA"  error=""/>
        <return value="-1" message="FALHA NA ATUALIZAÇÃO DA INCLUSAO DO REGISTRO DE BAIXA"  error=""/>
        <return value="-2" message="BOLETO NAO EXISTE"  error=""/>
        <return value="-3" message="BOLETO NAO ESTA EM ABERTO"  error=""/>
        <return value="-4" message="REGISTRO DE BAIXA JÁ EXISTENTE"  error=""/>
        <return value="-5" message="VALOR DO RECEBIMENTO DIFERE DO SALDO DO BOLETO"  error=""/>
        <return value="-6" message="FALHA NA ATUALIZAÇÃO DE BAIXA DO BOLETO"  error=""/>
      </returns>
    </insertcommand>


    <selectcommand>
      <item script="true" alias="A." sql="" type="" method="Select" return="TicketReceiptDetail" procname="" desc ="Obtêm o Registro de Baixa de acordo com o id">
        <query>
          <![CDATA[SELECT * FROM TBBXABOL (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Detalhe de Recebimento de Boleto" name="NIDRBD" type="System.Int32" default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>

  </item>

  <item create="true"  id="40" name="TBTIPLCT" friendlyname="AccountEntryType" modelversion="3" descriptor="Tabela de Tipo de Lançamento">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      <![CDATA[
SELECT A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
	  ,DSCIBS = ISNULL(D.DSCTAB,'')
	  ,DSCIDB = ISNULL(E.DSCTAB,'')
	  ,DSCICR = ISNULL(F.DSCTAB,'')
	  ,DSCTAR = ISNULL(G.DSCTAR,'')
	  ,DSCADB = ISNULL(H.DSCTAB,'')    
	  ,DSCACR = ISNULL(I.DSCTAB,'')        
      FROM TBTIPLCT (NOLOCK) A
      INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
      INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=39 AND D.KEYCOD=A.INDLCT)
      INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB=39 AND E.KEYCOD=A.INDDEB)
      INNER JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB=39 AND F.KEYCOD=A.INDCRD)
      INNER JOIN TBTABGER (NOLOCK) H ON (H.NUMTAB=106 AND H.KEYCOD=A.ORGDEB)
      INNER JOIN TBTABGER (NOLOCK) I ON (I.NUMTAB=106 AND H.KEYCOD=A.ORGCRD)
      LEFT JOIN TBTIPTAR (NOLOCK) G ON (G.CODTAR =A.CODTAR)
      LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
     
WHERE TIPLCT=-1
      ]]>
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Key" audit="false" fieldreturn="" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
IF(EXISTS (SELECT 1 FROM TBTIPLCT (NOLOCK) WHERE DSCLCT = @DSCLCT))
   SET @RETURN_VALUE=-3;
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE LANÇAMENTO INCLUIDO COM SUCESSO" error="">
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" audit="true" fieldreturn="" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();
IF(EXISTS (SELECT 1 FROM TBTIPLCT (NOLOCK) WHERE DSCLCT = @DSCLCT AND TIPLCT <>@TIPLCT))
    SET @RETURN_VALUE=-3;
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE LANCAMENTO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRTIPLCTUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
        <return value="-3" message="O NOME FORNECIDO COMO ARGUMENTO JÁ ESTÁ CADASTRADO" error="ATTRIBUTEFOUNDED"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql="" processcode="100" method="Select" return="AccountEntryType" procname="PRTIPLCTSEL" desc ="Obtêm o registro de Tipo de Lançamento com base no id informado">
        <query>
          <![CDATA[SELECT * FROM TBTIPLCT (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="Tipo de Lançamento" name="TIPLCT" type="System.Int16"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>

  <item create="true"  id="41" name="TBCADFER" friendlyname="Holydays" modelversion="3" descriptor="Tabela de Feriados">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      <![CDATA[
      SELECT TOP 1 A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,''),DSCUFE = ISNULL(D.DSCTAB,'')
      FROM TBCADFER (NOLOCK) A
      INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
      INNER JOIN TBTABGER (NOLOCK) D ON (B.NUMTAB=2 AND B.KEYTXT=A.CODUFE)
      LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
      ]]>
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="identity" audit="false" fieldreturn="NIDHOL" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="TIPO DE LANÇAMENTO INCLUIDO COM SUCESSO" error="">
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="identity" audit="true" fieldreturn="NIDHOL" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="FERIADO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADFERUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql="" processcode="100" method="Select" return="Holydays" procname="PRTIPLCTSEL" desc ="Obtêm o registro de Feriado com base no id informado">
        <query>
          <![CDATA[SELECT * FROM TBCADFER (NOLOCK) A
        ]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Feriado" name="NIDHOL" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>

  <item create="true"  id="42" name="TBREGMOV" friendlyname="TransferRegistration" modelversion="3" descriptor="Tabela de Registro de Transferências">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      <![CDATA[
SELECT  TOP 1 A.*
   ,NUMDEB = 'LANCAMENTO : ' + ISNULL(D.DSCTAB,'N/D') + CHAR(13) + ' BANCO: ' + B.NUMBCO + ' AGÊNCIA: ' + B.NUMAGE + ' C/C :' + LTRIM(RTRIM(B.NUMCTA)) + '-' + B.NUMDVE + CHAR(13) + ' CORRENTISTA: ' + ISNULL(B1.NOMUSU,'')
   ,NUMCRD = 'LANCAMENTO : ' + ISNULL(E.DSCTAB,'N/D') + CHAR(13) + ' BANCO: ' + C.NUMBCO + ' AGÊNCIA: ' + C.NUMAGE + ' C/C :' + LTRIM(RTRIM(C.NUMCTA)) + '-' + C.NUMDVE + CHAR(13) + ' CORRENTISTA: ' + ISNULL(C1.NOMUSU,'')
   ,DSCREC = G.DSCTAB 
   ,LGNUSU  = ISNULL(H.LGNUSU,'')
   ,I.DSCSTA
   ,F.DSCLCT
FROM TBREGMOV (NOLOCK) A
INNER JOIN TBCADCTA (NOLOCK) B ON (B.NIDCTA = A.CTADEB)
LEFT JOIN TBCADGER (NOLOCK) B1 ON (B1.CODUSU = B.CODUSU)
INNER JOIN TBCADCTA (NOLOCK) C ON (C.NIDCTA = A.CTACRD)
LEFT JOIN TBCADGER (NOLOCK) C1 ON (C1.CODUSU = C.CODUSU)
LEFT JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=39 AND D.KEYCOD = A.INDDEB)
LEFT JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB=39 AND E.KEYCOD = A.INDCRD)
INNER JOIN TBTIPLCT (NOLOCK) F ON (F.TIPLCT = A.TIPLCT)
INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB=7 AND G.KEYCOD=A.STAREC)
LEFT JOIN TBLGNUSU (NOLOCK) H ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
INNER JOIN TBCADSTA (NOLOCK) I ON (I.CODSTA = A.STAMOV)      
      ]]>
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="identity" audit="false" fieldreturn="NIDTRF" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
DECLARE @ORGCTA TINYINT=0
DECLARE @GETVRT INT =0
DECLARE @TIPCTA TINYINT=1		      -- TIPO DE CONTA
DECLARE @STACTA SMALLINT =250
DECLARE @CODTAR SMALLINT =0    
DECLARE @SLDCTA MONEY =0                

/* 
    11 - TRANSFERENCIA PARA OUTROS BANCOS - 
    O CAMPO @USRCRD CORRESPONDE AO ID DA CONTA VIRTUAL EXTERNA
*/
IF(@ORGDEB=1 AND @ORGCRD=3)
  	BEGIN
   		 IF(@CODTRM=1)
       		BEGIN
				     SET @USUDEB = @USRDEB
        		 EXEC @CTADEB = PRGETCTAVRT  @USRDEB, @TIPCTA, @ORGCTA, @STACTA
             SELECT @GETVRT = CODUSU FROM TBCADCTA (NOLOCK) WHERE NIDCTA = @USRCRD AND STAREC=1 AND STACTA=250             
        		 SET @USUCRD = @CODUSU          
         		 SET @CTACRD = @USRCRD;
          END
			 ELSE
          BEGIN
				     SET @CTADEB = @USRCRD;
             SELECT @GETVRT = CODUSU FROM TBCADCTA (NOLOCK) WHERE NIDCTA = @USRCRD AND STAREC=1 AND STACTA=250                          
             SET @USUDEB = @GETVRT
             EXEC @CTACRD = PRGETCTAVRT  @USRDEB, @TIPCTA, @ORGCTA, @STACTA
             SELECT @GETVRT = CODUSU FROM TBCADCTA (NOLOCK) WHERE NIDCTA = @CTACRD AND STAREC=1 AND STACTA=250
             IF (@GETVRT>0)
                 BEGIN
                    SET @USUDEB = @GETVRT;
                 END
   		    END
    END
            
/*
    12 - RECARGA DE CARTAO
    21 - TRANSFERENCIA CCV PARA CARTAO
   112 - TIPO LANCAMENTO RECARGA EM LOTE 
     O CAMPO @USRCRD corresponde ao CODIGO DO CARTAO
*/
            
            
IF(@ORGDEB=1 AND @ORGCRD=2)
   BEGIN
      IF(@CODTRM = 1)
         BEGIN
            SET @USUDEB = @USRDEB
            EXEC @CTADEB = PRGETCTAVRT  @USRDEB, @TIPCTA, @ORGCTA, @STACTA
            EXEC @GETVRT = PRGETINFCRT @USRCRD, 2;
            IF(@GETVRT=0)
			         EXEC @CTACRD = PRGETCTAVRT @USUCRD, @TIPCTA, @ORGCTA, @STACTA
 			      ELSE
			         SET @CTACRD = @GETVRT
            EXEC @USUPRO = PRGETINFCRT @USRCRD, 3;
            SET @CODUSU = @USRDEB
         END
      ELSE
         BEGIN
   	        EXEC @GETVRT = PRGETINFCRT @USRDEB, 1;
            SET @USUDEB = @GETVRT;
            EXEC @GETVRT = PRGETINFCRT @USRCRD, 2;
            IF(@GETVRT=0)
                EXEC @CTADEB = PRGETCTAVRT  @USUDEB, @TIPCTA, @ORGCTA, @STACTA
            ELSE
                SET @CTADEB = @GETVRT
            EXEC @USUPRO = PRGETINFCRT @USRCRD, 3;
            SET @USUCRD = @USRCRD;
            EXEC @CTACRD = PRGETCTAVRT @USUCRD, @TIPCTA, @ORGCTA, @STACTA
         END
  END
            
            
            /*
               REVERSAO TRANSFERENCIA PARA OUTROS BANCOS
                O CAMPO @USRCRD CORRESPONDE AO ID DA CONTA VIRTUAL
             */
            
            --if (@TIPLCT = 79)
            --    BEGIN
            --		IF (@CODTRM = -1)
            --			BEGIN
            --				SELECT @USUDEB = ISNULL(CODUSU,0) FROM TBCADCTA (NOLOCK) WHERE NIDCTA = @USRCRD AND STAREC=1 AND STACTA=@STACTA;
            --		        SET @CTADEB = @USRCRD;
            --		        SET @USUCRD = @USRDEB;
           	--			    EXEC @CTACRD = PRGETCTAVRT @USUCRD, @TIPCTA, @ORGCTA, @STACTA
            --		        SET @USURET = @USUCRD;
            --		    END
            --    END
            
            
    /*
            	   PAY SMART
            		O Campo pUSRDEB, pUSRCRD corresponde ao ID do Usuário
               22 - TRANSFERENCIA CCV PARA CCV
              120 - CREDITO DE REFEICAO
              121 - CREDITO DE ALIMENTACAO
              122 - CREDITO DE COMBUSTIVEL
              123 - CREDITO DE SALARIO
              124 - CREDITO DE COMBO MULTI
              125 - CREDITO DE PREMIACAO
              126 - CREDITO DE AJUDA DE CUSTO
              127 - CREDITO INCENTIVO
              128 - CREDITO REMUNERACAO
              130 - COMBO MOBILIDADE                  (16/03/2021)
                34 - CREDITO AVULSO
                44 - LANCAMENTO DE COMPRAS
                55 - LANCAMENTO DE REFEICAO
                56 - LANCAMENTO DE ALIMENTACAO
                57 - LANCAMENTO DE COMBUSTIVEL
                58 - LANCAMENTO DE CHARGEBACK COMPRAS
                59 - LANCAMENTO DE CHARGEBACK REFEICAO
                60 - LANCAMENTO DE CHARGEBACK ALIMENTACAO
                61 - LANCAMENTO DE CHARGEBACK COMBUSTIVEL
                63 - LANCAMENTO DE COMBO MULTI
                64 - LANCAMENTO DE CHARGEBACK COMBO MULTI
                78 - RECARGA DE ORIGEM TED
               139 - COMBO MOBILIDADE
                65 - REGISTRO DE COMBO MOBILIDADE                      (16/03/2021)
                66 - REVERSAO DE REGISTRO DE COMBO MOBILIDADE          (16/03/2021)

            
            */
            
IF (@ORGDEB=1 AND @ORGCRD=1)
    BEGIN
       if (@CODTRM = 1)
  	        BEGIN
				      SET @USUDEB=@USRDEB
      		    EXEC @CTADEB = PRGETCTAVRT  @USRDEB, @TIPCTA, @ORGCTA, @STACTA
				      SET @USUCRD=@USRCRD
      		    EXEC @CTACRD = PRGETCTAVRT  @USRCRD, @TIPCTA, @ORGCTA, @STACTA
  	        END
			ELSE
          	BEGIN
       		     EXEC @CTADEB = PRGETCTAVRT  @USRCRD, @TIPCTA, @ORGCTA, @STACTA
       		     EXEC @CTACRD = PRGETCTAVRT  @USRDEB, @TIPCTA, @ORGCTA, @STACTA
          	END
      END
            
     /*
        *  TRANSFERENCIA CARTAO PARA CCV
          	14/11/2020
           	   O CAMPO @USRDEB CORRESPONDE AO CODIGO DO CARTAO
           	   O CAMPO @USRCRD CORRESPONDE AO CODIGO DO USUARIO
     */
     
IF(@ORGDEB=2 AND @ORGCRD=1)     
   BEGIN
      IF (@CODTRM = 1)
          BEGIN
              EXEC @USUDEB = PRGETINFCRT @USRDEB, 1;
 			        EXEC @GETVRT = PRGETINFCRT @USRDEB, 2;
 				      EXEC @USUPRO = PRGETINFCRT @USRDEB, 3;
 	            IF(@GETVRT=0)
 					       EXEC @CTADEB = PRGETCTAVRT  @USUDEB, @TIPCTA, @ORGCTA, @STACTA
 				      ELSE
 				         SET @CTADEB = @GETVRT
   				       EXEC @CTACRD = PRGETCTAVRT  @USRCRD, @TIPCTA, @ORGCTA, @STACTA
       				   SET @USUCRD = @USRCRD;
          END
	    ELSE
          BEGIN
  			     EXEC @CTADEB = PRGETCTAVRT  @USRCRD, @TIPCTA, @ORGCTA, @STACTA
	           SET @USUDEB = @USRCRD
    		     EXEC @USUCRD = PRGETINFCRT @USRDEB, 1;
    		     EXEC @GETVRT = PRGETINFCRT @USRDEB, 2;
    		     EXEC @USUPRO = PRGETINFCRT @USRDEB, 3;
             IF(@GETVRT=0)
    			       EXEC @CTACRD = PRGETCTAVRT  @USUCRD, @TIPCTA, @ORGCTA, @STACTA
    		     ELSE
    		         SET @CTACRD = @GETVRT
          END
  END                

            
            /*
             * TIPO_LANCAMENTO_TRANSFERENCIA_CARTAO_CARTAO
             */
IF(@ORGDEB=2 AND @ORGCRD=2)            
    BEGIN
       if (@CODTRM = 1)
         	 BEGIN
             	EXEC @USUDEB = PRGETINFCRT @USRDEB, 1;
        		  EXEC @GETVRT = PRGETINFCRT @USRDEB, 2;
        		  EXEC @USUPRO = PRGETINFCRT @USRDEB, 3;
             	IF(@GETVRT=0)
        		     EXEC @CTADEB = PRGETCTAVRT  @USUDEB, @TIPCTA, @ORGCTA, @STACTA
        		  ELSE
        		     SET @CTADEB = @GETVRT
             	EXEC @USUCRD = PRGETINFCRT @USRCRD, 1;
        		  EXEC @GETVRT = PRGETINFCRT @USRCRD, 2;
             	IF(@GETVRT=0)
        		     EXEC @CTACRD = PRGETCTAVRT  @USUCRD, @TIPCTA, @ORGCTA, @STACTA
        		  ELSE
        		     SET @CTACRD = @GETVRT
        	 END
        ELSE
         	 BEGIN
             	EXEC @USUDEB = PRGETINFCRT @USRCRD, 1;
        		  EXEC @GETVRT = PRGETINFCRT @USRCRD, 2;
        		  EXEC @USUPRO = PRGETINFCRT @USRCRD, 3;
             	IF(@GETVRT=0)
        		     EXEC @CTADEB = PRGETCTAVRT  @USUDEB, @TIPCTA, @ORGCTA, @STACTA
        		  ELSE
        		     SET @CTADEB = @GETVRT
             	EXEC @USUCRD = PRGETINFCRT @USRDEB, 1;
        		  EXEC @GETVRT = PRGETINFCRT @USRDEB, 2;
             	IF(@GETVRT=0)
        		     EXEC @CTACRD = PRGETCTAVRT  @USUCRD, @TIPCTA, @ORGCTA, @STACTA
        		  ELSE
        		     SET @CTACRD = @GETVRT
        	 END
     END
            
            
            /*
             *  TRANSFERENCIA CARTAO PARA CCV EXTERNA - TIPO_LANCAMENTO_TRANSFERENCIA_CARTAO_CCVEXTERNA
             	14/11/2020
             	   O CAMPO @USRDEB CORRESPONDE AO CODIGO DO CARTAO
             	   O CAMPO @USRCRD CORRESPONDE AO ID DA CONTA VIRTUAL EXTERNA
             */
IF(@ORGDEB=2 AND @ORGCRD=3)
  BEGIN
     if (@CODTRM = 1)
        BEGIN
           EXEC @USUDEB = PRGETINFCRT @USRDEB, 1;
         	 EXEC @GETVRT = PRGETINFCRT @USRDEB, 2;
         	 EXEC @USUPRO = PRGETINFCRT @USRDEB, 3;
           IF(@GETVRT=0)
         		  EXEC @CTADEB = PRGETCTAVRT  @USUDEB, @TIPCTA, @ORGCTA, @STACTA
         	 ELSE
         		  SET @CTADEB = @GETVRT
  				 SET @CTACRD = @USRCRD  
         	 SELECT @GETVRT = CODUSU FROM TBCADCTA (NOLOCK) WHERE NIDCTA = @USRCRD AND STAREC=1 AND STACTA=250
         	 IF (@GETVRT>0)
  			       BEGIN
        			    SET @USUCRD = @GETVRT;
         			 END
        END
  	 ELSE
       	BEGIN
           SELECT @GETVRT = CODUSU FROM TBCADCTA (NOLOCK) WHERE NIDCTA = @USRCRD AND STAREC=1 AND STACTA=250
           IF (@GETVRT>0)
         		   BEGIN
         		      SET @USUDEB = @GETVRT;
         		      SET @CTADEB = @USRCRD
 			         END
             	 EXEC @USUCRD = PRGETINFCRT @USRDEB, 1;
         			 EXEC @GETVRT = PRGETINFCRT @USRCRD, 2;
         			 EXEC @USUPRO = PRGETINFCRT @USRCRD, 3;
               IF(@GETVRT=0)
         			     EXEC @CTACRD = PRGETCTAVRT  @USUCRD, @TIPCTA, @ORGCTA, @STACTA
         			 ELSE
         			     SET @CTACRD = @GETVRT
        END
  END
  		

            
IF(@USUDEB=0 OR @USUCRD=0 OR @CTADEB=0 OR @CTACRD=0)
   BEGIN
      SET @CODRSP='57';
      SET @STAREC= 13;
      IF(@USUDEB=0)
         SET @DSCERR = 'USUARIO DE DEBITO INVALIDO'
      IF(@USUCRD=0)
        SET @DSCERR = 'USUARIO DE CREDITO INVALIDO'
      IF(@CTADEB=0)
      	 SET @DSCERR = 'CONTA DE DEBITO INVALIDA'
      IF(@CTACRD=0)
      	 SET @DSCERR = 'CONTA DE CREDITO INVALIDA'
   END
        ]]>
      </pre>
      <body>
      </body>
      <pos><![CDATA[]]></pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error=""></return>
        <return value="-1" message="REGISTRO INCLUIDO POREM NAO PROCESSADO" error="FAILALL"/>
      </returns>
    </insertcommand>

    <selectcommand>
      <item script="false" alias="A." sql="" processcode="100" method="Select" return="TransferRegistration" procname="PRTIPLCTSEL" desc ="Obtêm o registro de transferência com base no id informado">
        <query>
          <![CDATA[SELECT * FROM TBREGMOV (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Feriado" name="NIDHOL" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>

  <item create="true"  id="43" name="TBCADLCT" friendlyname="AccountEntryPosting" modelversion="3" descriptor="Tabela de Cadastro de Lançamentos">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      <![CDATA[
SELECT      
     A.NIDLCT
    ,A.TIPLCT
    ,A.LINLCT
    ,A.CODTRM
    ,A.NUMORD
    ,A.INDDEB
    ,A.INDCRD
    ,A.MOVDEB
    ,A.MOVCRD
    ,A.STAREG
    ,A.IDEPRE
    ,A.STAREC
    ,A.DATCAD
    ,A.DATUPD
    ,A.UPDUSU
    ,DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
	  ,DSCLCT
	  ,DSCIDB = ISNULL(E.DSCTAB,'')
	  ,DSCICR = ISNULL(F.DSCTAB,'')
	  ,DSCMDB = ISNULL(H.DSCMOV,'')
	  ,DSCMCR = ISNULL(I.DSCMOV,'')
	  ,DSCTRM = ISNULL(J.DSCTAB,'')
	  ,DSCSTA = ISNULL(K.DSCSTA,'')    
 FROM TBCADLCT (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
 INNER JOIN TBTIPLCT (NOLOCK) D ON (D.TIPLCT = A.TIPLCT)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB=39 AND E.KEYCOD=A.INDDEB)
 INNER JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB=39 AND F.KEYCOD=A.INDCRD)
  LEFT JOIN TBTIPTAR (NOLOCK) G ON (G.CODTAR =A.CODTAR)
  LEFT JOIN TBTIPMOV (NOLOCK) H ON (H.CODMOV =A.MOVDEB)
  LEFT JOIN TBTIPMOV (NOLOCK) I ON (I.CODMOV =A.MOVCRD)
 INNER JOIN TBTABGER (NOLOCK) J ON (J.NUMTAB=59 AND J.KEYCOD=A.CODTRM)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
  LEFT JOIN TBCADSTA (NOLOCK) K ON (K.CODSTA = A.STAREG)  
  
where nidlct=-1  
      
      ]]>
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="identity" audit="false" fieldreturn="NIDLCT" exceptionparamns="'DATCAD','DATUPD','CODTAR','AGRLCT','VEREXI','CODVER'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SELECT @NUMORD = (MAX( ISNULL(NUMORD,0) ) + 1) FROM TBCADLCT (NOLOCK) WHERE TIPLCT =@TIPLCT AND LINLCT = @LINLCT GROUP BY TIPLCT, LINLCT        
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="identity" audit="true" fieldreturn="NIDLCT" exceptionparamns="'DATCAD','CODTAR','AGRLCT','VEREXI','CODVER'" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRCADLCTUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>
        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql="" processcode="100" method="Select" return="AccountEntryPosting" procname="PRCADLCTSEL" desc ="Obtêm o registro de Cadastro de Lançamento com base no id informado">
        <query>
          <![CDATA[SELECT * FROM TBCADLCT (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Cadastro de Lançamento" name="NIDLCT" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
    <methods>
      <item  webtype="[HttpPost]" processcode="30"  permission="UPDUSU" script="true" alias="A." sql="" method="Copy" return="int" returnmode="2" procname="PRCADLCTCPY" desc ="Copia um conjunto de cadastro de lançamentos para outros" returnvalue="0" remarks="">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0
IF(@UPDUSU<=0)
   SET @RETURN_VALUE=-1
       
IF(@RETURN_VALUE=0 AND @TIPLCT>0 )
   BEGIN
      INSERT INTO TBCADLCT (TIPLCT, LINLCT, CODTRM, NUMORD,
              INDDEB, INDCRD, MOVDEB, MOVCRD,
              STAREG, IDEPRE, CODVER, STAREC, UPDUSU)
          SELECT
              @NEWTIP, LINLCT, CODTRM, NUMORD,
              INDDEB, INDCRD, MOVDEB, MOVCRD,
              STAREG, IDEPRE, CODVER, 1, @UPDUSU
          FROM TBCADLCT (NOLOCK) A WHERE A.STAREC=1 AND TIPLCT=@TIPLCT
          
		  SELECT @RETURN_VALUE = COUNT(*) FROM TBCADLCT WHERE TIPLCT = @NEWTIP AND STAREC=1          
    END
RETURN @RETURN_VALUE
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Tipo de Lançamento de Origem" name="TIPLCT" type="System.Int16"  default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Tipo de Lançamento de Destino" name="NEWTIP" type="System.Int16"  default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="NAO FOI POSSIVEL EFETUAR A COPIA DE REGISTROS" error=""/>
          <return value="0" operator=">" message="TIPO DE LANÇAMENTO COPIADO COM SUCESSO" error=""/>
          <return value="-1" message="" error="REQUIREDUSEROPERATION"/>
        </returns>
      </item>

      <item  webtype="[HttpPost]" processcode="40" script="true" alias="A." sql="" permission="UPDUSU" method="Delete" return="int" returnmode="2" procname="PRCADLCTDEL" desc ="Exclui um conjunto de cadastro de lançamentos" returnvalue="0" remarks="">
        <query>
          <![CDATA[
DECLARE @RETURN_VALUE INT =0
IF(@UPDUSU<=0)
   SET @RETURN_VALUE=-1
       
IF(@RETURN_VALUE=0 AND @TIPLCT > 0)
   BEGIN
      DECLARE @RECORDS INT
      SELECT @RECORDS=COUNT(*) FROM TBCADLCT WHERE TIPLCT=@TIPLCT
			IF(@RECORDS>0)
			     BEGIN
						  DELETE FROM TBCADLCT WHERE TIPLCT=@TIPLCT
						  SET @RETURN_VALUE=@RECORDS
				   END
   END
RETURN @RETURN_VALUE
          ]]>
        </query>
        <parameters>
          <parameter input="true" desc ="Tipo de Lançamento de Origem" name="TIPLCT" type="System.Int16"  default="" output="" null="false"/>
          <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
        <returns>
          <return value="0" message="NAO FOI POSSIVEL EFETUAR A REMOCAO DE REGISTROS" error=""/>
          <return value="0" operator=">" message="TIPO DE LANÇAMENTO REMOVIDO COM SUCESSO" error=""/>
          <return value="-1" message="" error="REQUIREDUSEROPERATION"/>
        </returns>
      </item>

    </methods>
  </item>

  <item create="true"  id="44" name="TBREGPAG" friendlyname="Payment" modelversion="3" descriptor="Tabela de Registro de Pagamentos">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      <![CDATA[
      ]]>
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Key" audit="false" fieldreturn="" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" audit="true" fieldreturn="" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGPAGUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql="" processcode="100" method="Select" return="Payment" procname="PRREGPAGSEL" desc ="Obtêm o registro de PAGAMENTO com base no id informado">
        <query>
          <![CDATA[SELECT * FROM TBREGPAG (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Pagamento" name="NIDPAG" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>

  <item create="true"  id="45" name="TBREGTED" friendlyname="EletronicTransfer" modelversion="3" descriptor="Tabela de TED">
    <CSharpPartial>True</CSharpPartial>
    <SqlTable>
    </SqlTable>
    <extendedmodel>
      <![CDATA[
      ]]>
    </extendedmodel>
    <procedure>1111000000</procedure>
    <asp>1111000000</asp>
    <csharp>1111000000</csharp>
    <insertcommand key="Key" audit="false" fieldreturn="" exceptionparamns="'DATCAD','DATUPD'" method="Insert" processcode="10">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO INCLUIDO COM SUCESSO" error="">
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDFOUND"/>
      </returns>
    </insertcommand>
    <updatecommand key="key" audit="true" fieldreturn="" exceptionparamns="'DATCAD'" method="Update" processcode="20">
      <maxfield field=""/>
      <nextnumber field="" id="" />
      <pre>
        <![CDATA[
SET @DATUPD=GETDATE();
        ]]>
      </pre>
      <body>
      </body>
      <pos>
      </pos>
      <returns>
        <return value="0" operator=">" message="REGISTRO ALTERADO COM SUCESSO" error="">
          Auditing audit = new Auditing();
          audit.UPDUSU =model.UPDUSU;
          audit.AUDDAT=DateTime.Now;
          audit.AUDKEY =KeyTableId;
          audit.AUDIDR =RETURN_VALUE;
          audit.AUDIMS =0;
          audit.AUDTSK =this.GetType().Name + "." + MethodBase.GetCurrentMethod().Name;
          audit.AUDOBJ = "PRREGTEDUPD";
          audit.AUDSRC =_original;
          audit.AUDCHG =_changed;
          audit.NIDTOK =0;
          audit.NUMIPA =Environment.MachineName;
          _AUDNUM=WriteAuditing.Insert(audit);
          respond.Logged=_AUDNUM>0;
        </return>

        <return value="-1" message="" error="FAILALL"/>
        <return value="-2" message="" error="RECORDNOTFOUND"/>
      </returns>
    </updatecommand>

    <selectcommand>
      <item script="false" alias="A." sql="" processcode="100" method="Select" return="Payment" procname="PRREGTEDSEL" desc ="Obtêm o registro de TED com base no id informado">
        <query>
          <![CDATA[SELECT * FROM TBREGTED (NOLOCK) A]]>
        </query>
        <parameters>
          <parameter input="true" apply="true" desc ="ID do Registro de Pagamento" name="NIDPAG" type="System.Int32"  default="" output="" null="false"/>
        </parameters>
      </item>
    </selectcommand>
  </item>

  <lists>
    <item reference="0" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="Tables" return="GeneralTable" procname="" desc ="Seleciona todos os Códigos de Índices da Tabela Geral">
      <query>
        <![CDATA[SELECT KEYCOD, DSCTAB FROM TBTABGR (NOLOCK) WHERE NUMTAB=0 AND STAREC IN (1,2) AND USRDSP=1 ORDER BY KEYCOD]]>
      </query>
    </item>

    <item reference="1" procbase="" script="false"  modifier="static" alias="A." sql="" type="List" method="Countries" return="GeneralTable" procname="" desc ="Lista de Países">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=1 AND STAREC=1 ]]></query>
    </item>
    <item reference="2" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="UF" return="GeneralTable" procname="" desc ="Lista de Unidades da Federação">
      <query> <![CDATA[SELECT NUMTAB,USECOD,KEYCOD,KEYTXT = LTRIM(RTRIM(KEYTXT)),NUMREF,DSCTAB,USRDSP,IDEPRE,STAREC,DATCAD,DATUPD,UPDUSU FROM TBTABGER (NOLOCK) A WHERE NUMTAB=2 AND STAREC IN(1,2)]]></query>
    </item>

    <item reference="7" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="RegistrationStatus" return="GeneralTable" procname="" desc ="Lista Status de Registro">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=7 AND STAREC IN (1,2)]]></query>
    </item>

    <item reference="10" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="Signals" return="GeneralTable" procname="" desc ="Lista de Sinal de Operação ">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=10 AND STAREC=1 ]]></query>
    </item>

    <item reference="12" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="Banks" return="GeneralTable" procname="" desc ="Lista de Bancos">
      <query> <![CDATA[SELECT NUMTAB,USECOD,KEYCOD,KEYTXT = LTRIM(RTRIM(KEYTXT)),NUMREF,DSCTAB,USRDSP,IDEPRE,STAREC,DATCAD,DATUPD,UPDUSU FROM TBTABGER (NOLOCK) WHERE NUMTAB=12 AND STAREC=1]]></query>
    </item>


    <item reference="13" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="Genders" return="GeneralTable" procname="" desc ="Lista de Gêneros">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=13 AND STAREC=1 ]]></query>
    </item>

    <item reference="14" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="Modules" return="GeneralTable" procname="" desc ="Lista de Módulos do Aplicativo">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=14 AND STAREC=1 ]]></query>
    </item>

    <item reference="16" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="TicketTypes" return="GeneralTable" procname="" desc ="Lista Tipos de Boleto">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=16 AND STAREC=1 ]]></query>
    </item>

    <item reference="20" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="BeneficiaryTypes" return="GeneralTable" procname="" desc ="Lista Tipos de Beneficiario">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=20 AND STAREC IN(1,2)]]></query>
    </item>

    <item reference="23" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="AccountOrigin" return="GeneralTable" procname="" desc ="Lista Origem da Conta">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=23 AND STAREC=1]]></query>
    </item>

    <item reference="29" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="BlockingCondition" return="GeneralTable" procname="" desc ="Lista Condição de Bloqueio">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=29 AND STAREC=1]]></query>
    </item>
    <item reference="39" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="AccountEntryIndicators" return="GeneralTable" procname="" desc ="Lista Indicadores de Lançamento">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=39 AND STAREC=1]]></query>
    </item>
    <item reference="45" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="TelephoneOperators" return="GeneralTable" procname="" desc ="Lista de Operadoras de Telefonia">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=45 AND STAREC=1 ]]></query>
    </item>
    <item reference="50" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="MonthlyPaymentTypes" return="GeneralTable" procname="" desc ="Lista de Tipos de Mensalidade">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=50 AND STAREC=1 ]]></query>
    </item>

    <item reference="54" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="TrustLevel" return="GeneralTable" procname="" desc ="Lista de Níveis de Confinaça">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=54 AND STAREC=1]]></query>
    </item>

    <item reference="59" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="TransactionMovement" return="GeneralTable" procname="" desc ="Lista de Tipo de Transação de Movimento">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=59 AND STAREC=1]]></query>
    </item>

    <item reference="80" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="Nationalities" return="GeneralTable" procname="" desc ="Lista de Nacionalidades">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=80 AND STAREC=1]]></query>
    </item>

    <item reference="81" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="PublicPlaces" return="GeneralTable" procname="" desc ="Lista de Logradouros">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=81 AND STAREC=1]]></query>
    </item>

    <item reference="93" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="Subsystems" return="GeneralTable" procname="" desc ="Lista de Subsistemas">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=93 AND STAREC=1]]></query>
    </item>

    <item reference="105" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="TariffResponsible" return="GeneralTable" procname="" desc ="Lista de Responsável pela Tarifa">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=105 AND STAREC IN (1,2)]]></query>
    </item>

    <item reference="106" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="OriginAssociation" return="GeneralTable" procname="" desc ="Lista de Associação de Origem">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=106 AND STAREC IN (1,2)]]></query>
    </item>

    <item reference="912" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="DepositorFee" return="GeneralTable" procname="" desc ="Lista de Regra de Aplicação da Taxa do Depositante">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=912 AND STAREC IN (1,2)]]></query>
    </item>

    <item reference="947" procbase="" script="false" modifier="static" alias="A." sql="" type="List" method="ConfigurationLevel" return="GeneralTable" procname="" desc ="Lista de Nivel de Configuração">
      <query> <![CDATA[SELECT * FROM TBTABGER (NOLOCK) WHERE NUMTAB=947 AND STAREC IN (1,2)]]></query>
    </item>

    <!-- Tarifados -->
    <item script="false" modifier="static" alias="A." sql="" processcode="" type="" method="GetTariffed" return="Tariffed" procname="" desc ="Obtêm o registro de calculo conforme o id informado">
      <query>
        <![CDATA[SELECT * FROM TBCALTAR (NOLOCK) A ]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" alias="C." desc ="Id do Registro de Cálculo" name="NIDCAL" type="System.Int32" default="" output="" null="false"/>
      </parameters>

    </item>

    <!-- Listas de Usuarios -->

    <item script="false" modifier="static" alias="A." sql="" processcode="" type="List" method="Guarantor" return="MyUsers" procname="" desc ="Lista de Avalista">
      <query>
        <![CDATA[SELECT CODUSU, NOMUSU FROM TBCADGER (NOLOCK) A WHERE A.CODATR= 1 AND A.STAREC IN (1,2) AND A.STAUSU=61]]>
      </query>
    </item>

    <item script="false" modifier="static" alias="A." sql="" processcode="" type="List" method="Managers" return="MyUsers" procname="" desc ="Lista de Gestores Ativos associados à tabela de usuários">
      <query>
        <![CDATA[SELECT CODUSU = USUPRO, NOMUSU = B.NOMUSU + ' -' + C.DSCPRO FROM TBUSUPRO (NOLOCK) A INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU) INNER JOIN TBCADPRO (NOLOCK) C ON (C.CODPRO = A.CODPRO)  WHERE A.STAREC = 1 AND B.STAREC=1 AND C.STAREC=1]]>
      </query>
    </item>
    <item script="false" modifier="static" alias="A." sql="" processcode="" type="List" method="Managers" return="MyUsers" procname="" desc ="Lista de Gestores Ativos associados à tabela de usuários por usuário">
      <query>
        <![CDATA[SELECT CODUSU = USUPRO, NOMUSU = B.NOMUSU + ' -' + C.DSCPRO FROM TBUSUPRO (NOLOCK) A INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU) INNER JOIN TBCADPRO (NOLOCK) C ON (C.CODPRO = A.CODPRO)  WHERE A.STAREC = 1 AND B.STAREC=1 AND C.STAREC=1]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" alias="A." desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
      </parameters>

    </item>


    <item script="false" modifier="static" alias="A." sql="" processcode="" method="ManagersByLine" type="list" return="MyUsers" procname="" desc ="Lista de Gestores por linha de produto">
      <query order="C.DSCPRO">
        <![CDATA[
SELECT CODUSU = A.USUPRO, NOMUSU = LTRIM(RTRIM(NOMUSU)) + ' - ' + C.DSCPRO, REFCOD= A.CODUSU
  FROM TBUSUPRO (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
 INNER JOIN TBCADPRO (NOLOCK) C ON (C.CODPRO = A.CODPRO)
           ]]>
      </query>

      <parameters>
        <parameter input="true" apply="true" alias="C." desc ="Linha de Produto" name="LINPRO" type="System.Int16" default="" output="" null="false"/>
      </parameters>
    </item>
    <item script="true" modifier="static" alias="A." sql="" method="UsersAccounts" type="List" return="MyUsers" procname="PRCADGERSELCTA" desc ="Obtêm uma lista de usuários com contas virtuais ativas">
      <query order="A.NOMUSU, A.CODCMF">
        <![CDATA[
IF(@CODUSU<=0)
   SET @CODUSU=NULL;

SELECT A.CODUSU, NOMUSU, REFCOD =ISNULL(B.NIDCTA,0) 
  FROM TBCADGER (NOLOCK) A 
  LEFT JOIN TBCADCTA (NOLOCK) B ON (B.CODUSU= A.CODUSU)
 WHERE CODATR IN (SELECT CODATR 
                   FROM TBTIPATR 
				   WHERE USEACT=1) AND A.STAREC=1 
        ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>

    <item script="false" modifier="static" alias="A." sql="" method="UsersLinkeds" type="List" return="MyUsers" procname="PRCADGERSELCTA" desc ="Lista de Contas Virtuais com o propósito de efetuar a vinculação para um determinado usuário">
      <query order="A.NOMBNF">
        <![CDATA[
SELECT CODUSU = NIDCTA, 
NOMUSU = C.NOMUSU + ' CONTA : ' + NUMAGE + '.' + LTRIM(RTRIM(NUMCTA))+'-'+NUMDVE + ' BANCO :' +A.NUMBCO + ' ' + B.DSCTAB
+ ' BENFICIARIO : ' + CASE WHEN A.ORGCTA IN (1,3,4)  THEN 'O PROPRIO' ELSE NOMBNF END
,REFCOD=A.CODUSU
FROM TBCADCTA (NOLOCK) A
INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=12 AND B.KEYTXT = A.NUMBCO)
INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = A.CODUSU)
WHERE A.STAREC=1 AND STACTA=250 AND NIDCTA NOT IN (SELECT NIDCTA FROM TBCADCVL  WHERE CODUSU = @CODUSU) 
        ]]>
      </query>
      <parameters>
        <parameter apply="false" input="true" desc ="Código do Usuário" operator="!=" name="CODUSU" type="System.Int32" sysnull="" default="" output="" null="false"/>
      </parameters>
    </item>

    <item script="true" modifier="static" alias="A." sql="" method="UsersByProduct" type="List" return="MyUsers" procname="PRCADGERSELUSRPRO" desc ="Obtêm uma lista de usuários vinculados ao gerenciamento de Produto">
      <query>
        <![CDATA[SELECT DISTINCT A.CODUSU, B.NOMUSU, REFCOD=A.CODPRO FROM TBUSUPRO (NOLOCK) A INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Código do Produto" name="CODPRO" type="System.Int16" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>
    <item script="false" modifier="static" alias="A." sql="" method="UsersManagers" type="List" return="MyUsers" procname="PRCADGERSELTIP" desc ="Lista de Usuários com atributo gestor">
      <query>
        <![CDATA[SELECT CODUSU, NOMUSU, REFCOD = TIPUSU FROM TBCADGER (NOLOCK) A WHERE CODATR=3]]>
      </query>
    </item>

    <item script="false" modifier="static" alias="A." sql="" method="UsersByType" type="List" return="MyUsers" procname="PRCADGERSELTIP" desc ="Obtêm uma lista de usuários por tipo de usuário">
      <query>
        <![CDATA[SELECT CODUSU, NOMUSU, REFCOD = TIPUSU FROM TBCADGER (NOLOCK) A ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Tipo de Usuário" name="TIPUSU" type="System.Byte" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>
    <item script="false" modifier="static" alias="A." sql="" method="UserTarifacion" type="List" return="MyUsers" procname="" desc ="Obtêm uma lista de usuários com permissão de uso da tarifação">
      <query>
        <![CDATA[SELECT CODUSU, NOMUSU, REFCOD = TIPUSU FROM TBCADGER (NOLOCK) A  WHERE STAREC=1 AND STAUSU=61 AND CODATR IN (SELECT CODATR FROM TBTIPATR WHERE USETAR=1)]]>
      </query>
    </item>
    <item script="false" modifier="static" alias="A." sql="" method="GetUsersByName" type="List" return="MyUsers" procname="" desc ="Obtêm uma lista de usuários com base no nome fornecido">
      <query>
        <![CDATA[SELECT CODUSU, NOMUSU, REFCOD = TIPUSU 
                  FROM TBCADGER (NOLOCK) A 
                  WHERE STAREC=1 AND STAUSU=61]]>
      </query>
      <parameters>
        <parameter input="true" islike="true" desc ="Nome do Usuário" name="NOMUSU" type="System.String" size="70" sysnull="" default="" output="" null="true"/>
      </parameters>
    </item>

    <item script="false" modifier="static" alias="A." sql="" method="UsersInTickets" type="List" return="MyUsers" procname="" desc ="Lista de Usuários contidos em um boleto" remarks="Origem de Leitura@1 - Cedente@2 - Sacado@3 - Gestor">
      <query>
        <![CDATA[
IF(@ORGREA=1)
  SELECT DISTINCT CODUSU = A.USUCED, B.NOMUSU FROM TBREGBOL (NOLOCK) A INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.USUCED)
IF(@ORGREA=2)
  SELECT DISTINCT CODUSU = A.USUSAC, B.NOMUSU FROM TBREGBOL (NOLOCK) A INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.USUSAC)
IF(@ORGREA=3)
  BEGIN
      SELECT CODUSU = A.USUPRO, NOMUSU = LTRIM(RTRIM(C.NOMUSU)) + ' - ' + D.DSCPRO, REFCOD=C.CODUSU
        FROM TBREGBOL (NOLOCK) A
       INNER JOIN TBUSUPRO (NOLOCK) B ON (B.USUPRO = A.USUPRO)
       INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = B.CODUSU)
       INNER JOIN TBCADPRO (NOLOCK) D ON (D.CODPRO = B.CODPRO)
  END       
        ]]>
      </query>
      <parameters>
        <parameter apply="false" input="true" islike="true" desc ="Origem de Leitura" name="ORGREA" type="System.Byte" sysnull="" default="" output="" null="false"/>
      </parameters>
    </item>

    <item script="false" modifier="static" alias="A." sql="" method="UsersInMonthly" type="List" return="MyUsers" procname="" desc ="Lista de Usuários contidos em mensalidades" remarks="">
      <query>
        <![CDATA[
SELECT DISTINCT CODUSU, B.NOMUSU, REFCOD=NIDMEN FROM TBREGBMEN (NOLOCK) A INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
        ]]>
      </query>
    </item>

    <item script="false" modifier="static" alias="A." sql="" method="UsersForTickets" type="List" return="MyUsers" procname="" desc ="Lista de Usuários contidos em um boleto" remarks="Origem de Leitura@1 - Cedente@2 - Sacado@3 - Gestor">
      <query>
        <![CDATA[
SELECT CODUSU, NOMUSU, REFCOD = SRCUSU, REFSEL=CODATR FROM TBCADGER (NOLOCK) A  WHERE A.STAREC=1 AND A.STAUSU=61 AND CODATR IN( SELECT CODATR FROM TBTIPATR WHERE USEBOL=1)
        ]]>
      </query>
      <parameters>
        <parameter input="true" islike="false" desc ="Usuário Gestor" name="SRCUSU" type="System.Int32" sysnull="null" default="" output="" null="true"/>
      </parameters>
    </item>


    <item script="true" alias="A." modifier="static" sql="" method="Users" type="List" return="QueryUsers" procname="PRCADGERSELALL" desc ="Obtêm uma lista de registros do cadastro geral conforme parâmetros informados">
      <query order="A.NOMUSU, A.CODCMF">
        <![CDATA[
          IF(@NOMUSU='')
             SET @NOMUSU=NULL
          IF(@STAREC<0)
             SET @STAREC=NULL
          IF(@SRCUSU<0)
             SET @SRCUSU=NULL
          IF(@CODATR<0)
             SET @CODATR=NULL
          IF(@STAUSU<0)
             SET @STAUSU=NULL
          SELECT * FROM VWCADGER A
        ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Atributo" name="CODATR" type="System.Int16" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" desc ="Status do Usuário" name="STAUSU" type="System.Int16" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" desc ="ID do Responsável" name="SRCUSU" type="System.Int32" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" islike="true" desc ="Nome" name="NOMUSU" type="System.String"  size="70" default="" output="" null="true"/>
        <parameter input="true" desc ="Status do Registro" name="STAREC" type="System.Byte" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>
    <item script="true" alias="A." modifier="static" sql="" method="Users" type="List" return="MyUsers" procname="PRCADGERSELRED" desc ="Obtêm uma lista de registros do cadastro geral simplificada por codio e descrição">
      <query order="A.NOMUSU, A.CODCMF">
        <![CDATA[
          IF(@SRCUSU<=0)
             SET @SRCUSU=NULL
          IF(@CODUSU<=0)
             SET @CODUSU=NULL
          SELECT CODUSU, NOMUSU, REFCOD = SRCUSU FROM VWCADGER A
        ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" desc ="Código do Gestor" name="SRCUSU" type="System.Int32" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>


    <!-- Tipo de Endereço -->
    <item script="false" modifier="static" alias="A." sql="" processcode="" method="AddressTypes" type="List" return="AddressType" procname="PRTIPENDSELALL" desc ="Lista de Tipos de Endereço">
      <query order="A.TIPEND">
        <![CDATA[
SELECT A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
  FROM TBTIPEND (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)          
          ]]>
      </query>
    </item>

    <!-- Tipo de Contato -->
    <item script="false" modifier="static" alias="A." sql="" processcode="" method="ContactTypes" type="List" return="ContactType" procname="" desc ="Lista de Tipos de Contato">
      <query>
        <![CDATA[SELECT A.*, B.DSCTAB AS DSCREC, ISNULL(C.LGNUSU,'') LGNUSU FROM TBTIPCTO (NOLOCK) A INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC) LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)]]>
      </query>
    </item>

    <!-- Tipo de Usuário -->
    <item script="false" modifier="static" alias="A." sql="" processcode="" method="UserTypes" type="List" return="UserType" procname="" desc ="Lista Tipos de Usuário">
      <query order="A.TIPUSU">
        <![CDATA[SELECT A.*, B.DSCTAB AS DSCREC, ISNULL(C.LGNUSU,'') LGNUSU 
    FROM TBTIPUSU (NOLOCK) A 
   INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC) 
   LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)]]>
      </query>
    </item>

    <!-- Tipo de Atributo -->
    <item script="false" modifier="static" alias="A." sql="" processcode="" method="AttributeTypes" type="List" return="AttributeType" procname="" desc ="Lista Tipos de Atributo">
      <query order="A.CODATR">
        <![CDATA[SELECT A.*, B.DSCTAB AS DSCREC, ISNULL(C.LGNUSU,'') LGNUSU 
    FROM TBTIPATR (NOLOCK) A 
   INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC) 
   LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)]]>
      </query>
    </item>

    <!-- Linha de Produto -->

    <item script="false" modifier="static" alias="A." processcode="" sql="" type="List" method="ProductLines" return="ProductLine" procname="" desc ="Lista Linha de Produtos">
      <query order="A.LINPRO">
        <![CDATA[SELECT A.*, DSCREC= ISNULL(B.DSCTAB,''), LGNUSU = ISNULL(C.LGNUSU,'') FROM TBLINPRO (NOLOCK) A
INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =7 AND B.KEYCOD=A.STAREC)
 LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU  AND C.REGATV=1)]]>
      </query>
    </item>

    <!-- Tipo de Conta -->
    <item script="false" modifier="static" alias="A." sql="" method="AccountTypes" type="List" return="AccountType" procname="" desc ="Lista de Tipos de Conta">
      <query>
        <![CDATA[
SELECT A.*, B.DSCTAB AS DSCREC, ISNULL(C.LGNUSU,'') LGNUSU 
FROM TBTIPCTA (NOLOCK) A INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD = A.STAREC) 
LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)         
        ]]>
      </query>
    </item>

    <!-- Operações -->

    <item script="true" modifier="static" alias="A." sql="" processcode="" method="Operations" type="List" return="Operations" procname="PRTIPMOVSELALL" desc ="Obtêm a Lista de Operacoes">
      <query>
        <![CDATA[
SELECT A.*, DSCREC= B.DSCTAB, DSCBLO = C.DSCTAB, DSCOPE = D.DSCTAB, LGNUSU = ISNULL(E.LGNUSU,''), DSCSYS = F.DSCTAB
  FROM TBTIPMOV (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB= 7 AND B.KEYCOD=A.STAREC)
 INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB=29 AND C.KEYCOD=A.CNDBLO)
 INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=10 AND D.KEYCOD=A.SIGOPE)
  LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1)
 INNER JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB=93 AND F.KEYCOD=A.SUBSYS)
          ]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="Subsistema" name="SUBSYS" type="System.Byte" sysnull="true" default="" output="" null="true"/>
      </parameters>

    </item>

    <!-- Status das Transacoes -->


    <item script="true" modifier="static" alias="A." sql="" processcode="" method="Transactions" type="List" return="TransactionStatus" procname="PRCADSTASELALL" desc ="Lista Status das Transações de acordo com o módulo informado">
      <query>
        <![CDATA[
SELECT A.*
,DSCCHG = CASE WHEN (A.CANCHG=1) THEN 'Sim' ELSE 'Não' END
,DSCDEL = CASE WHEN (A.DELMEN=1) THEN 'Sim' ELSE 'Não' END
,DSCREC = ISNULL(B.DSCTAB,'')
,DSCMOD = ISNULL(C.DSCTAB,'')
,LGNUSU = ISNULL(D.LGNUSU,'')
  FROM TBCADSTA (NOLOCK) A
 INNER JOIN TBTABGER B (NOLOCK) ON (B.NUMTAB =  7 AND B.KEYCOD = A.STAREC)
 INNER JOIN TBTABGER C (NOLOCK) ON (C.NUMTAB = 14 AND C.KEYCOD = A.CODMOD)
  LEFT JOIN TBLGNUSU D (NOLOCK) ON (D.CODUSU = A.UPDUSU  AND D.REGATV = 1)]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="Código do Módulo" name="CODMOD" type="System.Int16" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>

    <item script="true" modifier="static" alias="A." sql="" processcode="" method="Addresses" type="List" return="QueryAddressBook" procname="PRCADENDSELALL" desc ="Obtêm uma lista de todos os endereços de um usuário">
      <query>
        <![CDATA[

IF(@TIPEND<0)
   SET @TIPEND=NULL
IF(@REGATV<0)
   SET @REGATV=NULL
IF(@STAREC<0)
   SET @STAREC=NULL
   
SELECT CODEND,
    A.REGATV,
    DSCATV = CASE WHEN (A.REGATV=1) THEN 'Sim' ELSE 'Não' END,
    A.CODUSU,
	B.NOMUSU,
    A.TIPEND,
	C.DSCTEN,
  C.REFCTO,
    TIPLOG,
	DSCLOG = ISNULL(D.DSCTAB,''),
    CODUFE,
	DSCUFE = ISNULL(E.DSCTAB,''),
    DSCEND,
	FULEND =  CASE WHEN A.TIPEND IN (3,4) THEN DSCEND ELSE 	
	(ISNULL(D.DSCTAB,'') + ' ' + DSCEND +  CASE WHEN NUMEND > 0 THEN ',' + CONVERT(VARCHAR,NUMEND) ELSE '' END 
	+ ' ' + ISNULL(DSCCID,'') + ' ' + ISNULL(DSCBAI,'') +  CASE WHEN CODCEP<>'00000000' THEN ' - ' + dbo.FormatCEP(CODCEP) ELSE '' END) END,
	DSCCPL,
    NUMEND,
    DSCCID,
    DSCBAI,
    CODCEP,
    CODPAI,
	DSCPAI = ISNULL(F.DSCTAB,''),
    LATITU,
    LONGIT,
    A.STAREC,
    DSCREC = ISNULL(G.DSCTAB,''),
    DATCAD = FORMAT(A.DATCAD, 'dd/MM/yyyy HH:mm'),
    DATUPD = FORMAT(A.DATUPD, 'dd/MM/yyyy HH:mm'),    
    A.UPDUSU,
	LGNUSU = ISNULL(H.LGNUSU,'')
  FROM TBCADEND (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
 INNER JOIN TBTIPEND (NOLOCK) C ON (C.TIPEND = A.TIPEND)
  LEFT JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 81 AND D.KEYCOD = A.TIPLOG)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB = 2 AND E.KEYTXT = A.CODUFE)
  LEFT JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB = 1 AND F.KEYCOD = A.CODPAI)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB = 7 AND G.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) H ON (H.CODUSU = A.UPDUSU AND H.REGATV=1)
        ]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Tipo de Endereço" name="TIPEND" type="System.Int16" default="-1" output="" null="true"/>
        <parameter input="true" apply="true" desc ="Registro Ativo" name="REGATV" type="System.Int16" default="-1" output="" null="true"/>
        <parameter input="true" apply="true" desc ="Status de Registro" name="STAREC" type="System.Int16" default="-1" output="" null="true"/>
      </parameters>
    </item>

    <!-- Contatos -->

    <item script="true" modifier="static" alias="A." sql="" method="Contacts" type="List" return="QueryContactBook" procname="PRCADCTOSELALL" desc ="Seleciona todos os registros de contato do usuário fornecido">
      <query>
        <![CDATA[
SELECT    
    CODCTO
    ,A.CODUSU
	,B.NOMUSU
    ,A.CODEND
	,C.DSCEND
    ,A.TIPCTO
	,D.DSCCTO
    ,A.REGATV
	,DSCATV = CASE WHEN (A.REGATV=1) THEN 'Sim' ELSE 'Não' END
    ,A.CODPAI
	,DSCPAI = ISNULL(E.DSCTAB,'')
    ,CODOPR
    ,DSCOPR = ISNULL(F.DSCTAB,'')
    ,NUMDDD
    ,ISWHAT
    ,NUMTEL
    ,DSCOBS
    ,A.STAREC
    ,DSCREC = ISNULL(G.DSCTAB,'')
    ,DATCAD = FORMAT(A.DATCAD, 'dd/MM/yyyy HH:mm')
    ,DATUPD = FORMAT(A.DATUPD, 'dd/MM/yyyy HH:mm')    
    ,A.UPDUSU
	,LGNUSU  = ISNULL(H.LGNUSU,'')

  FROM TBCADCTO (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
  LEFT JOIN TBCADEND (NOLOCK) C ON (C.CODEND = A.CODEND)
 INNER JOIN TBTIPCTO (NOLOCK) D ON (D.TIPCTO = A.TIPCTO)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB= 1 AND E.KEYCOD = A.CODPAI)
  LEFT JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB= 45 AND F.KEYCOD = A.CODOPR)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB= 7 AND G.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) H ON (H.CODUSU = A.UPDUSU AND H.REGATV=1)          
        ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Usuário" name="CODUSU" type="System.Int32" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>

    <!-- Cartões Ativos -->


    <item script="true" modifier="static" alias="A." sql="" processcode="" method="ListCards" type="List" return="QueryActiveCards" procname="PRREGCRTSELALL" desc ="Obtêm uma lista de todos os cartões da base ativa conforme parâmetros de pesquisa informados">
      <query order="A.NUMCRT">
        <![CDATA[
SELECT A.CODCRT
      ,A.NIDCTA
      ,A.USUPRO
      ,A.TIPPRO
      ,A.ORGATV
      ,A.ASSUSU
      ,ISNULL(B.NOMUSU,'') AS NOMUSU      
      ,A.SECLVL
      ,A.DATATV
      ,CNVATV = ISNULL(FORMAT(A.DATATV, 'dd/MM/yyyy'),'')          
      ,A.DATCAN
      ,CNVCAN = ISNULL(FORMAT(A.DATCAN, 'dd/MM/yyyy'),'')                
      ,A.CALMEN
      ,A.USUMEN
      ,ISNULL(C.NOMUSU,'') AS DSCTOM      
      ,A.NOMPRT
      ,NUMCRT = dbo.FormatCard(A.NUMCRT)
      ,A.VALCRT
      ,A.PSWCRT
      ,A.NUMCVC
      ,A.STAPRO
      ,A.STACRT
      ,ISNULL(D.DSCSTA,'') AS DSCSTA      
      ,A.NOMCR1
      ,A.NOMCR2
      ,A.NOMCR3
      ,A.OPRCRT
      ,A.DATEXT
      ,A.CODBLO
      ,A.TIPPRT
      ,A.DSCMOT
      ,A.APLCON
      ,A.APLSAQ
      ,A.LOTMIG
      ,A.STAREC
      ,ISNULL(E.DSCTAB,'') AS DSCREC      
      ,A.DATCAD
      ,CNVCAD = FORMAT(A.DATCAD, 'dd/MM/yyyy HH:mm')      
      ,A.DATUPD
      ,CNVUPD = FORMAT(A.DATUPD, 'dd/MM/yyyy HH:mm')          
      ,A.UPDUSU
      ,LGNUSU = ISNULL(F.LGNUSU,'')      
      ,DSCPRO = ISNULL(I.DSCPRO,'')
	    ,QTDMEN = ISNULL(J.QTDMEN,0)
  FROM TBREGCRT (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (A.ASSUSU = B.CODUSU)
  LEFT JOIN TBCADGER (NOLOCK) C ON (A.USUMEN = C.CODUSU)
 INNER JOIN TBCADSTA (NOLOCK) D ON (A.STACRT = D.CODSTA)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB = 7 AND E.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) F ON (F.CODUSU = A.UPDUSU AND F.REGATV=1)
 INNER JOIN TBUSUPRO (NOLOCK) G ON (G.USUPRO = A.USUPRO)  
 INNER JOIN TBCADGER (NOLOCK) H ON (H.CODUSU = G.CODUSU)   
 INNER JOIN TBCADPRO (NOLOCK) I ON (I.CODPRO = G.CODPRO)    
  LEFT JOIN (SELECT USUPRO, CODREF, QTDMEN=COUNT(*) FROM TBREGMEN (NOLOCK) WHERE STAMEN=261 AND TIPMEN=1 AND MODREG=1 AND REGBXA=0 GROUP BY USUPRO, CODREF )J ON (J.USUPRO = A.USUPRO AND J.CODREF=A.CODCRT)    
 WHERE A.CODCRT>0
        ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Usuário Gestor" name="USUPRO" type="System.Int32" sysnull="false" default="" output="" null="false"/>
        <parameter input="true" desc ="Status do Cartão" name="STACRT" type="System.Int16" sysnull="true" default="null" output="" null="true"/>
        <parameter input="true" islike="true" desc ="Parte ou Número do Cartão" name="NUMCRT" type="System.String" size="16" default ="''" output="" null="true"/>
        <parameter input="true" islike="true" apply="true" desc ="Nome ou Parte " name="NOMPRT" type="System.String" size="100" sysnull="true" default="null" output="" null="true"/>
      </parameters>
    </item>

    <!-- Mensalidades -->

    <item script="true" modifier="static" alias="A." sql="" processcode="200" method="MonthlyPayments" type="List" return="QueryMonthlyPayment" procname="PRREGMENSELALL" desc ="Obtêm os registros de mensalidade conforme os parâmetros informados">
      <query>
        <![CDATA[
IF(@USUPRO<=0)
   SET @USUPRO=NULL
          
   SELECT
         A.NIDMEN 
        ,A.USUPRO 
    	,NOMGST = C.NOMUSU
        ,A.CODUSU 
    	,D.NOMUSU
        ,A.USRREF 
        ,A.TIPMEN
    	  ,DSCMEN = ISNULL(E.DSCTAB,'')
        ,A.CODREF 
		    ,REFMEN = CASE WHEN A.TIPMEN = 1 THEN ISNULL(DBO.FormatCard(I.NUMCRT),'')
		          END
        ,A.MODREG 
    	  ,DSCMOD = CASE WHEN (A.MODREG=1) THEN 'PROVISAO' ELSE 'BAIXA' END
        ,A.REGBXA 
        ,A.STAMEN 
      	,F.DSCSTA
        ,A.NUMMES 
        ,A.NUMANO 
        ,A.NUMPCL 
        ,A.DATMEN 
        ,A.DATVCT 
        ,CNVMEN = FORMAT(A.DATMEN, 'dd/MM/yyyy')
        ,CNVVCT = FORMAT(A.DATVCT, 'dd/MM/yyyy')    
        ,A.SIGOPE 
        ,A.VLRCOB
    	  ,VLRMOV = (A.SIGOPE*A.VLRCOB)
        ,A.LOTINS 
        ,A.NUMTEN 
        ,A.STAREC 
    	  ,DSCREC= ISNULL(G.DSCTAB,'')
        ,DATCAD = FORMAT(A.DATCAD, 'dd/MM/yyyy HH:mm')
        ,DATUPD = FORMAT(A.DATUPD, 'dd/MM/yyyy HH:mm')    
        ,A.UPDUSU 
    	,LGNUSU = ISNULL(H.LGNUSU,'')
     FROM TBREGMEN (NOLOCK) A
    INNER JOIN TBUSUPRO (NOLOCK) B ON  (B.USUPRO = A.USUPRO)
    INNER JOIN TBCADGER (NOLOCK) C ON  (C.CODUSU = A.CODUSU)
    INNER JOIN TBCADGER (NOLOCK) D ON  (D.CODUSU = A.USRREF)
    INNER JOIN TBTABGER (NOLOCK) E ON  (E.NUMTAB = 50 AND E.KEYCOD = A.TIPMEN)
    INNER JOIN TBCADSTA (NOLOCK) F ON  (F.CODSTA = A.STAMEN)
    INNER JOIN TBTABGER (NOLOCK) G ON  (G.NUMTAB =  7 AND G.KEYCOD = A.STAREC)
     LEFT JOIN TBLGNUSU (NOLOCK) H ON  (H.CODUSU = A.UPDUSU AND H.REGATV = 1)
     LEFT JOIN TBREGCRT (NOLOCK) I ON  (I.CODCRT = A.CODREF AND 1 = A.TIPMEN)          
          ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Gestor de Produto" name="USUPRO" type="int" sysnull="true" default="" output="" null="false"/>
        <parameter input="true" desc ="Tipo de Mensalidade" name="TIPMEN" type="System.Byte" sysnull="false" default="" output="" null="false"/>
        <parameter input="true" desc ="Status da Mensalidade" name="STAMEN" type="System.Int32" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" desc ="Código do Usuario" name="CODUSU" type="int" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>

    <item script="true" modifier="static" alias="A." sql="" processcode="205" method="MonthlyPaymentSummary" type="List" return="QueryMonthlyPayment" procname="PRREGMENRESALL" desc ="Obtêm os registros de resumo de mensalidade conforme os parâmetros informados">
      <query groupby="A.USUPRO, A.CODUSU, A.TIPMEN, A.STAMEN, A.STAREC">
        <![CDATA[
IF(@USUPRO<=0)
   SET @USUPRO=NULL

   SELECT
        A.USUPRO 
    	,NOMGST = MAX(C.NOMUSU)
        ,A.CODUSU 
    	,NOMUSU = MAX(D.NOMUSU)
        ,A.TIPMEN
    	,DSCMEN = MAX(ISNULL(E.DSCTAB,''))
        ,A.STAMEN 
      	,DSCSTA = MAX(F.DSCSTA)
        ,NUMPCL  = MAX(A.NUMPCL)
        ,DATMEN  = MAX(A.DATMEN)
        ,DATVCT = MAX(A.DATVCT) 
        ,CNVMEN = FORMAT(MAX(A.DATMEN), 'dd/MM/yyyy')
        ,CNVVCT = FORMAT(MAX(A.DATVCT), 'dd/MM/yyyy')    
    	,VLRMOV = SUM((A.SIGOPE*A.VLRCOB))
   	    ,DSCREC= ISNULL(MAX(G.DSCTAB),'')
     FROM TBREGMEN (NOLOCK) A
    INNER JOIN TBUSUPRO (NOLOCK) B ON  (B.USUPRO = A.USUPRO)
    INNER JOIN TBCADGER (NOLOCK) C ON  (C.CODUSU = A.CODUSU)
    INNER JOIN TBCADGER (NOLOCK) D ON  (D.CODUSU = A.USRREF)
    INNER JOIN TBTABGER (NOLOCK) E ON  (E.NUMTAB = 50 AND E.KEYCOD = A.TIPMEN)
    INNER JOIN TBCADSTA (NOLOCK) F ON  (F.CODSTA = A.STAMEN)
    INNER JOIN TBTABGER (NOLOCK) G ON  (G.NUMTAB =  7 AND G.KEYCOD = A.STAREC)
     LEFT JOIN TBLGNUSU (NOLOCK) H ON  (H.CODUSU = A.UPDUSU AND H.REGATV = 1)
     LEFT JOIN TBREGCRT (NOLOCK) I ON  (I.CODCRT = A.CODREF AND 1 = A.TIPMEN)          
          ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Gestor de Produto" name="USUPRO" type="int" sysnull="true" default="" output="" null="false"/>
        <parameter input="true" desc ="Tipo de Mensalidade" name="TIPMEN" type="System.Byte" sysnull="false" default="" output="" null="false"/>
        <parameter input="true" desc ="Status da Mensalidade" name="STAMEN" type="System.Int16" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>
    <item script="false" modifier="static" alias="A." sql="" processcode="210" method="ListUsers" type="List" return="MyUsers" procname="" desc ="Obtêm uma lista de usuários vinculados as mensalidades">
      <query>
        <![CDATA[SELECT DISTINCT A.CODUSU, B.NOMUSU, REFCOD=0 FROM TBREGMEN (NOLOCK) A INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Tipo de Mensalidade" name="TIPMEN" type="System.Byte" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>

    <!-- Produtos -->

    <item script="true" modifier="static" alias="A." sql="" processcode="" method="Products" type="list" return="Product" procname="PRCADPROSELALL" desc ="Obtêm uma lista de todos os produtos">
      <query order="A.DSCPRO">
        <![CDATA[
SELECT A.*      
      ,DSCLIN
      ,DSCREC = ISNULL(B.DSCTAB,'')    
      ,LGNUSU = ISNULL(C.LGNUSU,'')
      ,DSCCDT = CASE WHEN (A.ATVCDT=1) THEN 'Sim' else 'Não' END
      ,DSCGPA = CASE WHEN (A.ATVGPA=1) THEN 'Sim' else 'Não' END      
      ,DSCBNF = CASE WHEN (A.INDBNF=1) THEN 'Sim' else 'Não' END            
  FROM TBCADPRO A WITH (NOLOCK) 
  LEFT JOIN TBTABGER B (NOLOCK)  ON (7 = B.NUMTAB AND A.STAREC = B.KEYCOD)
  LEFT JOIN TBLGNUSU C (NOLOCK)  ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
  LEFT JOIN TBLINPRO D (NOLOCK)  ON (A.LINPRO = D.LINPRO)
           ]]>
      </query>

      <parameters>
        <parameter input="true" apply="true" desc ="Linha de Produto" name="LINPRO" type="System.Int16" default="" output="" null="true"/>
      </parameters>

    </item>

    <!-- Tipo de Tarifas -->

    <item script="false" modifier="static" alias="A." sql=""  processcode="" method="TariffTypes" type="List" return="TariffType" procname="PRTIPTARSELALL" desc ="Lista Tipos de Tarifa">
      <query order="A.CODTAR">
        <![CDATA[
SELECT A.*, DSCREC= ISNULL(B.DSCTAB,''), 
LGNUSU = ISNULL(C.LGNUSU,''), D.DSCMOV 
FROM TBTIPTAR (NOLOCK) A
INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB =7 AND B.KEYCOD=A.STAREC)
 LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV =1)
INNER JOIN TBTIPMOV (NOLOCK) D ON (D.CODMOV = A.CODMOV)
          ]]>
      </query>
    </item>


    <!-- Conta Virtual -->

    <item script="true" modifier="static" alias="A." sql="" method="Accounts" type="List" return="Accounts" procname="PRCADCTASELALL" desc ="Obtêm todos os registros de contas virtuais registradas conforme parametro fornecido" Remarks="Efetuar solicitações com bases distintas ou seja fornecedor um código de usuário e um status, irá recuperar um ou mais registros de um usuário, fornecer a pesquisa por usuário somente tem o mesmo efeito. Fornecer somente o status resulta em vários registros de usuários diferentes">
      <query>
        <![CDATA[
IF(@STACTA<=0)
   SET @STACTA=NULL;
IF(@NOMUSU='')
   SET @NOMUSU=NULL;
        
SELECT
    A.NIDCTA
   ,A.CODUSU
	 ,B.NOMUSU
   ,A.NUMAGE
   ,A.NUMBCO
	 ,DSCBCO = ISNULL(C.DSCTAB,'')
   ,A.NUMCTA
   ,A.NUMDVE
   ,A.ORGCTA
	 ,DSCORG = ISNULL(D.DSCTAB,'')
   ,A.TIPCTA
	 ,E.DSCCTA
	 ,E.TIPEXT
   ,A.STACTA
	 ,F.DSCSTA
   ,A.DATVAL
   ,A.APLLIM
   ,A.VLRLIM
   ,A.TIPBNF
   ,DSCBNF = ISNULL(G.DSCTAB,'')
   ,CODCMF = dbo.FormatCMF(A.CODCMF)
   ,A.NOMBNF
   ,A.STAREC
   ,DSCREC = ISNULL(H.DSCTAB,'')
   ,A.UPDUSU
	 ,LGNUSU = ISNULL(I.LGNUSU,'')
  FROM TBCADCTA (NOLOCK) A 
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
  LEFT JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB = 12 AND C.KEYTXT = A.NUMBCO)
 INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 23 AND D.KEYCOD = A.ORGCTA)
 INNER JOIN TBTIPCTA (NOLOCK) E ON (E.TIPCTA = A.TIPCTA)
 INNER JOIN TBCADSTA (NOLOCK) F ON (F.CODSTA = A.STACTA)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB = 20 AND G.KEYCOD = A.TIPBNF)
 INNER JOIN TBTABGER (NOLOCK) H ON (H.NUMTAB =  7 AND H.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) I ON (I.CODUSU = A.UPDUSU AND I.REGATV = 1)        ]]>
      </query>
      <parameters>
        <parameter apply="true" input="true" desc ="Status da Conta" name="STACTA" type="System.Int16" default="null" output="" null="true"/>
        <parameter apply="true" input="true"  block="1" islike="true" alias="B." desc ="Nome ou parte do nome" name="NOMUSU" size="70" type="System.String" default='""' output="" null="true"/>
        <parameter apply="true" input="false" block="2" relation="OR" fieldname="NOMBNF" islike="true" alias="A." desc ="Nome ou parte do nome" name="NOMUSU" size="70" type="System.String" default='""' output="" null="true"/>
      </parameters>
    </item>

    <!-- Contas Vinculadas -->
    <item script="true" modifier="static" alias="A." sql="" method="LinkedAccounts" type="List" return="LinkedAccount" procname="PRCADCVLSELALL" desc ="Lista de Contas vinculadas por usuário">
      <query>
        <![CDATA[
SELECT A.*
       ,B.NUMCTA 
	   ,B.NUMAGE
	   ,B.NUMDVE
	   ,C.NOMUSU
	   ,DSCBCO = NUMBCO + ' - ' + ISNULL(D.DSCTAB,''),DSCSTA
	   ,CODCMF = DBO.FormatCMF(B.CODCMF)
	   ,NOMBNF = CASE WHEN B.ORGCTA IN (1,3,4)  THEN 'O PROPRIO' ELSE B.NOMBNF END
     ,LGNUSU = ISNULL(F.LGNUSU,'')
     ,G.DSCCTA
  FROM TBCADCVL (NOLOCK) A 
 INNER JOIN TBCADCTA (NOLOCK) B ON (B.NIDCTA = A.NIDCTA)
 INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = B.CODUSU)
 INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=12 AND D.KEYTXT = B.NUMBCO) 
 INNER JOIN TBCADSTA (NOLOCK) E ON (E.CODSTA = B.STACTA)  
  LEFT JOIN TBLGNUSU (NOLOCK) F ON (F.CODUSU = A.UPDUSU AND F.REGATV = 1)   
 INNER JOIN TBTIPCTA (NOLOCK) G ON (G.TIPCTA = B.TIPCTA)     
          ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Código do Usuario" islike="true" alias ="C." name="NOMUSU" type="System.String" size="70" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>

    <!-- Gestores de Produtos -->
    <item script="true"  modifier="static" alias="A." sql="" processcode="" type="List" method="ProductManagers" return="ProductManager" procname="PRUSUPROSELALL" desc ="Listagem de Gestores de Produtos">
      <query>
        <![CDATA[
          
if(@CODUSU<=0) SET @CODUSU=NULL          
if(@CODPRO<=0) SET @CODPRO=NULL          
SELECT A.*
      , B.NOMUSU
      , C.DSCPRO
      , DSCAPL = CASE WHEN (APLINT=1 ) THEN 'Sim' ELSE 'Nao' END
      , DSCRVC = CASE WHEN (APLRVC=1 ) THEN 'Sim' ELSE 'Nao' END    
      , DSCCES = CASE WHEN (APLRVC=1 ) THEN 'Sim' ELSE 'Nao' END    
      , DSCTAD = CASE WHEN (APLRVC=1 ) THEN 'Sim' ELSE 'Nao' END    
      , DSCREC = ISNULL(D.DSCTAB, '')
      , LGNUSU = ISNULL(E.LGNUSU,'')      
      , HASCFG = CASE WHEN F.NIDCFG IS NULL THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END 
      , CNTTAR = ISNULL(G.CNTTAR,0)  
      , DSCTAD = ISNULL(H.DSCTAB, '')      
     
 FROM TBUSUPRO (NOLOCK) A 
INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
INNER JOIN TBCADPRO (NOLOCK) C ON (C.CODPRO = A.CODPRO)
INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB = 7 AND D.KEYCOD = A.STAREC)
 LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1 AND E.STAREC=1)          
 LEFT JOIN TBUSUCFG (NOLOCK) F ON (F.USUCFG  = A.USUPRO AND F.NIVCFG = 1)
 LEFT JOIN (SELECT USUCFG, NIVCFG, CNTTAR =COUNT(*)  FROM TBCADTAR (NOLOCK) GROUP BY USUCFG, NIVCFG) G ON (G.USUCFG = A.USUPRO AND G.NIVCFG = 1)
INNER JOIN TBTABGER (NOLOCK) H ON (H.NUMTAB = 912 AND H.KEYCOD = A.TIPTAD) 
 
 ]]>

      </query>
      <parameters>
        <parameter input="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="null" output="" null="true"/>
        <parameter input="true" desc ="Código do Produto" name="CODPRO" type="System.Int16" default="null" output="" null="true"/>
      </parameters>
    </item>

    <!-- Configuração de Boleto -->
    <item script="true" modifier="static" alias="A." sql="" processcode="115" method="TicketConfigurations" type="List" return="TicketConfiguration" procname="PRCFGBOLSELALL" desc ="Obtêm todos os registro de configuração de boleto de acordo com os parâmetros fornecidos">
      <query order="A.USUCFG, A.NIVCFG, A.TIPBOL">
        <![CDATA[
        
IF(@USUCFG <0)
  SET @USUCFG=NULL
SELECT A.*
      ,DSCTAR =ISNULL(DSCTAR,'N/A')
  	  ,NOMUSU =CASE
       WHEN A.NIVCFG=1 THEN G.NOMUSU
 		   WHEN A.NIVCFG =2 THEN F.NOMUSU
 		   ELSE
		       'PADRÃO'
	     END
      ,LGNUSU = ISNULL(D.LGNUSU,'')
      ,DSCREC = ISNULL(C.DSCTAB,'')
   	  ,DSCTBL = ISNULL(E.DSCTAB,'')
      ,DSCTDP = ISNULL(H.DSCTAB,'')
  FROM TBCFGBOL (NOLOCK) A
  LEFT JOIN TBTIPTAR (NOLOCK) B ON (B.CODTAR = A.CODTAR)
 INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB =  7 AND C.KEYCOD = A.STAREC)
  LEFT JOIN TBLGNUSU (NOLOCK) D ON (D.CODUSU = A.UPDUSU AND D.REGATV=1)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB = 16 AND E.KEYCOD = A.TIPBOL)
  LEFT JOIN TBCADGER (NOLOCK) F ON (F.CODUSU = A.USUCFG AND 2 = A.NIVCFG )
 INNER JOIN TBTABGER (NOLOCK) H ON (H.NUMTAB = 912 AND H.KEYCOD = A.APLTDP)
  LEFT JOIN (SELECT CODUSU = USUPRO, NOMUSU = A2.NOMUSU + ' - ' + A3.DSCPRO
               FROM TBUSUPRO (NOLOCK) A1
 INNER JOIN TBCADGER (NOLOCK) A2 ON (A2.CODUSU = A1.CODUSU)
 INNER JOIN TBCADPRO (NOLOCK) A3 ON (A3.CODPRO = A1.CODPRO)) G ON (G.CODUSU = A.USUCFG AND 1 = A.NIVCFG) 
        
]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="Nivel de Configuração" name="NIVCFG"  type="System.Byte" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Código do Usuário de configuração" name="USUCFG" sysnull="true" type="System.Int32" default="" output="" null="true"/>

      </parameters>

    </item>

    <!-- Boletos -->
    <item script="true" modifier="static" alias="A." sql="" processcode="" method="TicketInvoice" type="List" return="TicketInvoice" procname="PRREGBOLSELTCK" desc ="Obtêm informações do boleto para fatura">
      <query>
        <![CDATA[
SELECT A.* 
      ,CEDNOM = B.NOMUSU
	    ,CEDCMF = dbo.FormatCMF(B.CODCMF)
      ,SACNOM = C.NOMUSU
	    ,SACCMF = dbo.FormatCMF(C.CODCMF)
	    ,SACMAL = F.DSCEND
      ,AVANOM = D.NOMUSU
	    ,AVACMF = dbo.FormatCMF(D.CODCMF)
	    ,DSCBLT = G.DSCTAB
	    ,H.DSCSTA
	    ,I.VLRLIQ
	    ,NOMEMP = J.NOMUSU
  FROM TBREGBOL (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.USUCED)
 INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = A.USUSAC)
 INNER JOIN TBCADGER (NOLOCK) D ON (D.CODUSU = A.CODAVA)
  LEFT JOIN TBCADEND (NOLOCK) E ON (E.CODEND = A.CODEND)
 INNER JOIN (SELECT DSCEND, CODUSU FROM TBCADEND (NOLOCK) WHERE TIPEND = 3 AND STAREC=1 AND REGATV=1)  F ON (F.CODUSU = A.USUSAC)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB=16 AND G.KEYCOD = A.TIPBOL)
 INNER JOIN TBCADSTA (NOLOCK) H ON (H.CODSTA = A.STABOL)
 INNER JOIN (SELECT NIDREF, VLRLIQ = ISNULL(SUM(VLROPE*SIGOPE),0) FROM TBREGOPE (NOLOCK) WHERE SUBSYS =2 AND STAREC=1 GROUP BY NIDREF) I ON (I.NIDREF= A.NIDBOL)
 INNER JOIN TBCADGER (NOLOCK) J ON (J.CODUSU  = A.CODEMP)
 WHERE A.STAREC=1
        
]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="ID do Boleto" name="NIDBOL" type="System.Int32" default="" output="" null="false"/>
      </parameters>
    </item>
    <item script="true" modifier="static" alias="A." sql="" processcode="" method="TicketForRegister" type="select" return="TicketRegister" procname="PRREGBOLSELREC" desc ="Obtêm informações do boleto para obtenção de registro">
      <query>
        <![CDATA[
SELECT A.NIDBOL,
    A.CODEMP, 
    A.KEYBOL,
    A.SUBSYS,
    A.NIDCBL,
    A.USUPRO,
    A.USUCED,
    CEDNOM = B.NOMUSU,
    CEDCMF = B.CODCMF,
    A.USUSAC,
    SACNOM = C.NOMUSU,
    SACCMF = C.CODCMF,
    SACMAL = F.DSCEND,
    A.CODAVA,
    AVANOM = D.NOMUSU,
    AVACMF = D.CODCMF,
    A.CODMOE,
    A.TIPBOL,
	  DATEMI = FORMAT(A.DATEMI,'dd/MM/yyyy'),
	  DATVCT = FORMAT(A.DATVCT,'dd/MM/yyyy'),
    A.CODCED,
    A.NIDLIM,
    A.INSBC1,
    A.INSBC2,
    A.INSBC3,
    A.DSCBOL,
    A.LINDIG,
    A.CODESP,
    A.NUMCTR,
    A.NOSNUM,
    A.IMGSAV,
    A.RSPTAR,
    A.VLRBOL,
    A.VLRTAR,
    A.VLRTDP,
    A.STAREC,
    DSCLOG = ISNULL(G.DSCTAB,''),
	  DSCEND = ISNULL(E.DSCEND,''),
	  DSCCPL = ISNULL(E.DSCCPL,''),
	  NUMEND = ISNULL(E.NUMEND,''),
	  DSCCID = ISNULL(E.DSCCID,''),
	  DSCBAI = ISNULL(E.DSCBAI,''),
	  CODCEP=  dbo.FormatCep(E.CODCEP)
	  ,VLRLIQ = ISNULL(H.VLRLIQ,0)
	  ,J.DSCSTA
  FROM TBREGBOL (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.USUCED)
 INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = A.USUSAC)
  LEFT JOIN TBCADGER (NOLOCK) D ON (D.CODUSU = A.CODAVA)
  LEFT JOIN TBCADEND (NOLOCK) E ON (E.CODEND = A.CODEND)
 INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB=81 AND G.KEYCOD = E.TIPLOG)
 INNER JOIN (SELECT DSCEND, CODUSU FROM TBCADEND (NOLOCK) WHERE TIPEND = 3 AND STAREC=1 AND REGATV=1)  F ON (F.CODUSU = A.USUSAC)
 INNER JOIN (SELECT NIDREF, VLRLIQ = SUM(VLROPE*SIGOPE) FROM TBREGOPE (NOLOCK) WHERE SUBSYS =2 AND STAREC=1 GROUP BY NIDREF) H ON (H.NIDREF= A.NIDBOL)
 INNER JOIN TBCADGER (NOLOCK) I ON (I.CODUSU  = A.CODEMP)
 INNER JOIN TBCADSTA (NOLOCK) J ON (J.CODSTA  = A.STABOL)
	 WHERE A.CODVER=3  AND A.STAREC=1 AND E.CODCEP <>'00000000'
]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="ID do Boleto" name="NIDBOL" type="System.Int32" default="" output="" null="false"/>
      </parameters>
    </item>

    <item script="true" modifier="static" alias="A." sql="" processcode="" method="Tickets" type="List" return="TicketQuery" procname="PRREGBOLSELALL" desc ="Lista de Boletos conforme parâmetros">
      <query>
        <![CDATA[
        
IF(@USUPRO <=0) SET @USUPRO=NULL                
IF(@USUCED <=0) SET @USUCED=NULL                
IF(@USUSAC <=0) SET @USUSAC=NULL                
IF(@CODAVA <=0) SET @CODAVA=NULL                
IF(@STABOL <=0) SET @STABOL=NULL                
IF(@TIPBOL <=0) SET @TIPBOL=NULL                
IF(@NIDBOL <=0) SET @NIDBOL=NULL                
IF(@DATEMI1 = '') SET @DATEMI1=NULL        
IF(@DATEMI2 = '') SET @DATEMI2=NULL        
IF(@DATVCT1 = '') SET @DATVCT1=NULL        
IF(@DATVCT2 = '') SET @DATVCT2=NULL        
IF(@DATPGT1 = '') SET @DATPGT1=NULL        
IF(@DATPGT2 = '') SET @DATPGT2=NULL        


SELECT A.*,
       EMPNOM = I.NOMUSU,
       CEDNOM = B.NOMUSU,
       CEDCMF = B.CODCMF,
       SACNOM = C.NOMUSU,
       SACCMF = C.CODCMF,
       SACMAL = ISNULL(F.DSCEND,''),
       AVANOM = D.NOMUSU,
       AVACMF = D.CODCMF,
	     VLRLIQ = ISNULL(H.VLRLIQ,0),
	     J.DSCSTA,
	     LGNUSU = ISNULL(K.LGNUSU,''),
       DSCBLT = L.DSCTAB -- TIPO DE BOLETO
  FROM TBREGBOL (NOLOCK) A
 INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.USUCED)
 INNER JOIN TBCADGER (NOLOCK) C ON (C.CODUSU = A.USUSAC)
  LEFT JOIN TBCADGER (NOLOCK) D ON (D.CODUSU = A.CODAVA)
  LEFT JOIN (SELECT DSCEND, CODUSU FROM TBCADEND (NOLOCK) WHERE TIPEND = 3 AND STAREC=1 AND REGATV=1)  F ON (F.CODUSU = A.USUSAC)
 INNER JOIN (SELECT NIDREF, VLRLIQ = SUM(VLROPE*SIGOPE) FROM TBREGOPE (NOLOCK) WHERE SUBSYS =2 AND STAREC=1 GROUP BY NIDREF) H ON (H.NIDREF= A.NIDBOL)
 INNER JOIN TBCADGER (NOLOCK) I ON (I.CODUSU  = A.CODEMP)
 INNER JOIN TBCADSTA (NOLOCK) J ON (J.CODSTA  = A.STABOL)
  LEFT JOIN TBLGNUSU (NOLOCK) K ON (K.CODUSU = A.UPDUSU AND K.REGATV=1)
 INNER JOIN TBTABGER (NOLOCK) L ON  (L.NUMTAB= 16 AND L.KEYCOD = A.TIPBOL)
 WHERE A.STAREC = 1 
   AND ( (@DATEMI1 IS  NULL AND @DATEMI2 IS NULL) OR (A.DATEMI BETWEEN  @DATEMI1 AND @DATEMI2))    
   AND ( (@DATVCT1 IS  NULL AND @DATVCT2 IS NULL) OR (A.DATVCT BETWEEN @DATVCT1 AND @DATVCT2))    
   AND ( (@DATPGT1 IS  NULL AND @DATPGT2 IS NULL) OR (A.DATPGT BETWEEN @DATPGT1 AND @DATPGT2))    
]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="ID do Gestor" name="USUPRO" type="System.Int32" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" apply="true" desc ="ID do Cedente" name="USUCED" type="System.Int32" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" apply="true" desc ="ID do Sacado" name="USUSAC" type="System.Int32" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" apply="true" desc ="ID do Avalista" name="CODAVA" type="System.Int32" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" apply="true" desc ="Status do Boleto" name="STABOL" type="System.Int16" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" apply="true" desc ="Tipo de Boleto" name="TIPBOL" type="System.Int16" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" apply="true" desc ="ID do Boleto" name="NIDBOL" type="System.Int32" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" apply="false" desc ="Data de Emissão Inicial (yyyyMMdd)" name="DATEMI1" type="System.String" size="10" sysnull="" default="" output="" null="true"/>
        <parameter input="true" apply="false" desc ="Data de Emissão Final (yyyyMMdd HH:mm:ss)" name="DATEMI2" type="System.String" size="25" sysnull="" default="" output="" null="true"/>
        <parameter input="true" apply="false" desc ="Data de Vencimento Inicial (yyyyMMdd)" name="DATVCT1" type="System.String" size="10" sysnull="" default="" output="" null="true"/>
        <parameter input="true" apply="false" desc ="Data de Vencimento Final (yyyyMMdd HH:mm:ss)" name="DATVCT2" type="System.String" size="25" sysnull="" default="" output="" null="true"/>
        <parameter input="true" apply="false" desc ="Data de Pagamento Inicial (yyyyMMdd)" name="DATPGT1" type="System.String" size="10" sysnull="" default="" output="" null="true"/>
        <parameter input="true" apply="false" desc ="Data de Pagamento Final (yyyyMMdd HH:mm:ss)" name="DATPGT2" type="System.String" size="25" sysnull="" default="" output="" null="true"/>

      </parameters>
    </item>
    <!-- TBREGOPE -->

    <item script="true" modifier="static" alias="A." sql="" processcode="" method="OperationsRegisters" type="List" return="OperationsRegister" procname="PRREGOPESELALL" desc ="Obtêm todos os registros de operações de um susbsistema e ID de referencia específico">
      <query order="A.DATOPE, A.CODMOV">
        <![CDATA[
    SELECT A.*,
           B.DSCMOV,
           DSCOPE= ISNULL(C.DSCTAB,''),
           DSCREC= ISNULL(D.DSCTAB,''),
           LGNUSU = ISNULL(E.LGNUSU,''),
		   VLRTOT = ISNULL(F.VLRTOT,0)	
    FROM TBREGOPE (NOLOCK) A
    INNER JOIN TBTIPMOV (NOLOCK) B ON (B.CODMOV = A.CODMOV)
    INNER JOIN TBTABGER (NOLOCK) C ON (C.NUMTAB= 10 AND C.KEYCOD = A.SIGOPE)
    INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=  7 AND D.KEYCOD = A.STAREC)
    LEFT JOIN TBLGNUSU (NOLOCK) E ON (E.CODUSU = A.UPDUSU AND E.REGATV=1)
    LEFT JOIN (SELECT SUBSYS, NIDREF, VLRTOT = COALESCE(SUM(SIGOPE * VLROPE),0) 
	             FROM TBREGOPE (NOLOCK) WHERE STAREC IN(1,2) 
				 GROUP BY SUBSYS, NIDREF) F ON (F.SUBSYS = A.SUBSYS AND F.NIDREF = A.NIDREF)

]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="ID do SubSistema" name="SUBSYS" type="System.Byte" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="ID de Referência" name="NIDREF" type="System.Int32" default="" output="" null="false"/>
      </parameters>

    </item>

    <!-- Tipo de Lançamento -->
    <item script="true" modifier="static" alias="A." sql="" processcode="0" method="AccountEntryTypes" type="List" return="AccountEntryType" procname="PRTIPLCTSELALL" desc ="Lista de Tipos de Lançamento">
      <query order="TIPLCT">
        <![CDATA[
SELECT A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
	  ,DSCIBS = ISNULL(D.DSCTAB,'')
	  ,DSCIDB = ISNULL(E.DSCTAB,'')
	  ,DSCICR = ISNULL(F.DSCTAB,'')
	  ,DSCTAR = ISNULL(G.DSCTAR,'')
	  ,DSCADB = ISNULL(H.DSCTAB,'')    
	  ,DSCACR = ISNULL(I.DSCTAB,'')        
      FROM TBTIPLCT (NOLOCK) A
      INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
      INNER JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=39 AND D.KEYCOD=A.INDLCT)
      INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB=39 AND E.KEYCOD=A.INDDEB)
      INNER JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB=39 AND F.KEYCOD=A.INDCRD)
      INNER JOIN TBTABGER (NOLOCK) H ON (H.NUMTAB=106 AND H.KEYCOD=A.ORGDEB)
      INNER JOIN TBTABGER (NOLOCK) I ON (I.NUMTAB=106 AND I.KEYCOD=A.ORGCRD)
      LEFT JOIN TBTIPTAR (NOLOCK) G ON (G.CODTAR =A.CODTAR)
      LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
          ]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="Usar Transferencias" name="USETRF" type="System.Byte" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>
    <item script="true" modifier="static" alias="A." sql="" processcode="0" method="AccountEntryPostings" type="List" return="AccountEntryPosting" procname="PRCADLCTSELALL" desc ="Lista de Cadastro de Lançamentos">
      <query order="A.TIPLCT, A.LINLCT, A.CODTRM, A.NUMORD">
        <![CDATA[
SELECT A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,'')
	  ,DSCLCT
	  ,DSCIDB = ISNULL(E.DSCTAB,'')
	  ,DSCICR = ISNULL(F.DSCTAB,'')
	  ,DSCMDB = ISNULL(H.DSCMOV,'')
	  ,DSCMCR = ISNULL(I.DSCMOV,'')
	  ,DSCTRM = ISNULL(J.DSCTAB,'')
	  ,DSCSTA = ISNULL(K.DSCSTA,'')    
 FROM TBCADLCT (NOLOCK) A
 INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
 INNER JOIN TBTIPLCT (NOLOCK) D ON (D.TIPLCT = A.TIPLCT)
 INNER JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB=39 AND E.KEYCOD=A.INDDEB)
 INNER JOIN TBTABGER (NOLOCK) F ON (F.NUMTAB=39 AND F.KEYCOD=A.INDCRD)
  LEFT JOIN TBTIPTAR (NOLOCK) G ON (G.CODTAR =A.CODTAR)
  LEFT JOIN TBTIPMOV (NOLOCK) H ON (H.CODMOV =A.MOVDEB)
  LEFT JOIN TBTIPMOV (NOLOCK) I ON (I.CODMOV =A.MOVCRD)
 INNER JOIN TBTABGER (NOLOCK) J ON (J.NUMTAB=59 AND J.KEYCOD=A.CODTRM)
  LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
  LEFT JOIN TBCADSTA (NOLOCK) K ON (K.CODSTA = A.STAREG)  
          ]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="Tipo de Lançamento" name="TIPLCT" type="System.Int16" sysnull="true" default="" output="" null="true"/>
      </parameters>
    </item>


    <!-- Feriados -->
    <item script="false" modifier="static" alias="A." sql="" processcode="0" method="Holydays" type="List" return="Holydays" procname="" desc ="Lista de Feriados">
      <query order="A.DATMOV, A.CODUFE">
        <![CDATA[
    SELECT A.*, DSCREC = B.DSCTAB, LGNUSU  = ISNULL(C.LGNUSU,''),DSCUFE = ISNULL(D.DSCTAB,'')
    FROM TBCADFER (NOLOCK) A
    INNER JOIN TBTABGER (NOLOCK) B ON (B.NUMTAB=7 AND B.KEYCOD=A.STAREC)
    INNER JOIN TBTABGER (NOLOCK) D ON (B.NUMTAB=2 AND B.KEYTXT=A.CODUFE)
    LEFT JOIN TBLGNUSU (NOLOCK) C ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
          ]]>
      </query>
    </item>
    <!-- TBREGMOV -->
    <item script="true" modifier="static" alias="A." sql="" processcode="" method="TransferRegistrations" type="List" return="TransferRegistration" procname="PRREGMOVSELALL" desc ="Obtêm todos os registros de transferências de acordo com os parâmetros informados">
      <query order="A.DATMOV DESC">
        <![CDATA[

IF(@CODUSU<0)
   SET @CODUSU =NULL
IF(@NIDTRA='')
   SET @NIDTRA = NULL
   
SELECT  A.*
   ,NUMDEB = 'LANCAMENTO : ' + ISNULL(D.DSCTAB,'N/D') + CHAR(13) + ' BANCO: ' + B.NUMBCO + ' AGÊNCIA: ' + B.NUMAGE + ' C/C :' + LTRIM(RTRIM(B.NUMCTA)) + '-' + B.NUMDVE + CHAR(13) + ' CORRENTISTA: ' + ISNULL(B1.NOMUSU,'')
   ,NUMCRD = 'LANCAMENTO : ' + ISNULL(E.DSCTAB,'N/D') + CHAR(13) + ' BANCO: ' + C.NUMBCO + ' AGÊNCIA: ' + C.NUMAGE + ' C/C :' + LTRIM(RTRIM(C.NUMCTA)) + '-' + C.NUMDVE + CHAR(13) + ' CORRENTISTA: ' + ISNULL(C1.NOMUSU,'')
   ,DSCREC = G.DSCTAB 
   ,LGNUSU  = ISNULL(H.LGNUSU,'')
   ,I.DSCSTA
   ,F.DSCLCT
FROM TBREGMOV (NOLOCK) A
INNER JOIN TBCADCTA (NOLOCK) B ON (B.NIDCTA = A.CTADEB)
LEFT JOIN TBCADGER (NOLOCK) B1 ON (B1.CODUSU = B.CODUSU)
INNER JOIN TBCADCTA (NOLOCK) C ON (C.NIDCTA = A.CTACRD)
LEFT JOIN TBCADGER (NOLOCK) C1 ON (C1.CODUSU = C.CODUSU)
LEFT JOIN TBTABGER (NOLOCK) D ON (D.NUMTAB=39 AND D.KEYCOD = A.INDDEB)
LEFT JOIN TBTABGER (NOLOCK) E ON (E.NUMTAB=39 AND E.KEYCOD = A.INDCRD)
INNER JOIN TBTIPLCT (NOLOCK) F ON (F.TIPLCT = A.TIPLCT)
INNER JOIN TBTABGER (NOLOCK) G ON (G.NUMTAB=7 AND G.KEYCOD=A.STAREC)
LEFT JOIN TBLGNUSU (NOLOCK) H ON (C.CODUSU = A.UPDUSU AND C.REGATV=1)
INNER JOIN TBCADSTA (NOLOCK) I ON (I.CODSTA = A.STAMOV)      
]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="Tipo de Lançamento" name="TIPLCT" type="System.Int16" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" apply="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" sysnull="true" default="" output="" null="true"/>
        <parameter input="true" apply="true" desc ="ID da Transação" name="NIDTRA" type="System.String" sysnull="true" default="" size="13" output="" null="true"/>
        <parameter input="true" apply="true" desc ="Status de Registro" name="STAREC" type="System.Byte" sysnull="true" default=""  output="" null="true"/>
      </parameters>
    </item>

    <item script  ="true" modifier="static" alias="A." sql="" method="AccountsByEntryCondition" type="List" return="MyUsers" procname="PRCADCTASELACTCND" desc ="Obtêm uma lista de usuários com contas virtuais ativas">
      <query>
        <![CDATA[
IF ((@FUNLCT = 2))
   BEGIN
      SELECT CODUSU = CASE WHEN A.NIDCTA>0 THEN A.NIDCTA ELSE B.NIDCTA END
            ,NOMUSU = dbo.FormatCard(A.NUMCRT ) + ' ' + A.NOMPRT
            ,REFCOD = A.USUPRO
            ,REFSEL = A.CODCRT
        FROM TBREGCRT (NOLOCK) A
       INNER JOIN TBCADCTA (NOLOCK) B  ON (B.CODUSU = A.ASSUSU)
       WHERE B.STAREC= 1 AND B.STACTA=250 AND B.ORGCTA=1
	     AND A.STAREC =1 
		 AND A.STACRT=109
         AND (A.NOMPRT LIKE '%' + @NOMUSU + '%' OR B.NOMBNF LIKE '%' + @NOMUSU + '%')
   END
ELSE IF ((@FUNLCT = 3))
   BEGIN
      SELECT NIDCTA
            ,NOMUSU ='[' + CONVERT(VARCHAR(1),ORGCTA) + '] ' + NUMCTA + ' - ' + CASE WHEN ORGCTA>1 THEN NOMBNF ELSE NOMUSU END
		    ,REFCOD=A.CODUSU
			,REFSEL=0
        FROM TBCADCTA (NOLOCK) A
       INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
       WHERE A.STACTA=250 AND A.STAREC=1 AND A.ORGCTA = 2 
	     AND B.STAREC=1 
		 AND B.STAUSU=61
         AND (A.NOMBNF LIKE '%' + @NOMUSU + '%' OR B.NOMUSU LIKE '%' + @NOMUSU + '%')
    END
ELSE
    BEGIN
      SELECT NIDCTA
            ,NOMUSU ='[' + CONVERT(VARCHAR(1),ORGCTA) + '] ' + NUMCTA + ' - ' + CASE WHEN ORGCTA>1 THEN NOMBNF ELSE NOMUSU END
		    ,REFCOD=A.CODUSU
			,REFSEL=0
        FROM TBCADCTA (NOLOCK) A
       INNER JOIN TBCADGER (NOLOCK) B ON (B.CODUSU = A.CODUSU)
       WHERE A.STACTA=250 
	     AND A.STAREC=1 
	     AND B.STAREC=1 
		 AND B.STAUSU=61
		 AND A.ORGCTA = 1 
         AND (A.NOMBNF LIKE '%' + @NOMUSU + '%' OR B.NOMUSU LIKE '%' + @NOMUSU + '%')
       ORDER BY B.NOMUSU, A.NOMBNF
    END]]>
      </query>
      <parameters>
        <parameter input="true" apply="false" desc ="Funcao de Lançamento" name="FUNLCT" type="System.Byte" default="" output="" null="false"/>
        <parameter input="true"  apply="false" desc ="Nome do Usuário" name="NOMUSU" type="System.String" size="70" default="" output="" null="false"/>
      </parameters>
    </item>
  </lists>
  <actions>

    <!-- Usuarios-->

    <item webtype="[HttpPost]" responsemode="1" script="true" modifier="static" alias="A." sql="" method="ValidateEntryCMF" return="int" returnmode="2" procname="PRCADGERVALENTRCMF" desc ="Valida um CPF/CNPJ já existente para o mesmo atributo na base de cadastro geral" returnvalue="0">
      <query>
        <![CDATA[
DECLARE @RETURN_VALUE INT =0;
SELECT @RETURN_VALUE = ISNULL(CODUSU,0) 
  FROM TBCADGER (NOLOCK)
 WHERE CODUSU <> @CODUSU
	 AND LTRIM(RTRIM(CODCMF)) = @CODCMF
	 AND CODATR = @CODATR
	 AND SRCUSU = @SRCUSU   
	 AND STAREC = 1
RETURN @RETURN_VALUE;   
          ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Código do Atributo" name="CODATR" type="short" default="" output="" null="false"/>
        <parameter input="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" desc ="CPF/CNPJ" name="CODCMF"  size="15" type="System.String" default="" output="" null="false"/>
        <parameter input="true" desc ="Usuário Gestor" name="SRCUSU" type="System.Int32" default="" output="" null="false"/>
      </parameters>

      <returns>
        <return value="0" operator=">" message="FORAM ENCONTRADAS OCORRENCIAS DUPLICADAS" error=""/>
        <return value="0" message="NAO FOI ENCONTRADA NENHUMA OCORRENCIA"  error=""/>
      </returns>

    </item>

    <item webtype="[HttpPost]" responsemode="1" script="true" modifier="static" alias="A." sql="" method="PesquisarCMF" return="int" returnmode="2" procname="PRCADUSUPSQCMF" desc ="Verifica se já existe um cadastro com o CPF/CNPJ cadastrado, e retorna o id localizado" returnvalue="0">
      <query>
        <![CDATA[
DECLARE @RETURN_VALUE INT =0;
SELECT @RETURN_VALUE = ISNULL(CODUSU,0) FROM TBCADGER (NOLOCK) 
 WHERE CODCMF = @CODCMF
	 AND CODATR = @CODATR
	 AND CODATR = @CODATR
RETURN @RETURN_VALUE;   
          ]]>
      </query>
      <parameters>
        <parameter input="true" desc ="Código do Atributo" name="CODATR" type="System.Int16" default="" output="" null="false"/>
        <parameter input="true" desc ="CPF/CNPJ" name="CODCMF" type="System.String" default="" output="" null="false"/>
      </parameters>

      <returns>
        <return value="0" operator=">" message="O CPF/CNPJ JA EXISTE" error=""/>
        <return value="0" message="NAO FOI ENCONTRADA NENHUMA OCORRENCIA" error=""/>
      </returns>

    </item>

    <!-- Tarifas -->
    <item webtype="[HttpGet]" script="true" modifier="static" alias="A." sql="" method="TariffLocate" return="int" returnmode="1" procname="PRCADTARFNDTAR" desc ="Localiza um registro de tarifação com base no gestor ou usuário cedente, caso não encontra localiza com base no gestor padrão" returnvalue="1">
      <query>
        <![CDATA[
DECLARE @GSTPAD INT=0          
DECLARE @RETURN_VALUE INT = 0
/* USUARIO */
EXEC @RETURN_VALUE = PRCADTARFND @CODUSU, 2, @CODTAR, @CODBND, @TIPLIN, @MODCRT
IF(@RETURN_VALUE=0)
		BEGIN
		    /* GESTOR */
     		EXEC @RETURN_VALUE = PRCADTARFND @USUCFG, 1, @CODTAR, @CODBND, @TIPLIN, @MODCRT
    END
IF(@RETURN_VALUE=0)
		BEGIN
		    /* PADRAO*/
			 SELECT @GSTPAD = ISNULL(GSTPAD,0) FROM TBSYSCFG (NOLOCK);
     	IF(@GSTPAD>0)
     	   BEGIN
   					EXEC @RETURN_VALUE = PRCADTARFND @GSTPAD, 1, @CODTAR, @CODBND, @TIPLIN, @MODCRT   				   	   
     	   END
    END                  
RETURN @RETURN_VALUE;    
          ]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="Código do Gestor/Usuário" name="USUCFG" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Código da Tarifa" name="CODTAR" type="System.Int16" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Código da Bandeira" name="CODBND" type="System.Int16" default="0" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Código do tipo de linha" name="TIPLIN" type="System.Byte" default="0" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Modalidade de Cartão" name="MODCRT" type="System.Byte" default="0" output="" null="false"/>
      </parameters>
    </item>

    <item webtype="[HttpGet]" modifier="static" script="true" alias="A." sql="" method="TariffFind" return="int" returnmode="2" procname="PRCADTARFND" desc ="Procura por um registro de tarifação de acordo com os parâmetros fornecidos" returnvalue="0">
      <query>
        <![CDATA[
DECLARE @RETURN_VALUE INT=0;          
SELECT @RETURN_VALUE = ISNULL(NIDTAR ,0)
  FROM TBCADTAR (NOLOCK) 
 WHERE USUCFG =@USUCFG 
   AND CODTAR =@CODTAR 
   AND NIVCFG =@NIVCFG        
   AND CODBND =@CODBND
   AND TIPLIN =@TIPLIN
   AND MODCRT =@MODCRT
IF(@RETURN_VALUE IS NULL)
   SET @RETURN_VALUE=0;
   RETURN @RETURN_VALUE
         ]]>
      </query>
      <parameters>
        <parameter input="true" apply="true" desc ="Usuário de Configuração de Destino" name="USUCFG" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Nivel de Configuração de Destino" name="NIVCFG" type="System.Byte" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Código da Tarifa" name="CODTAR" type="System.Int16" default="" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Código da Bandeira" name="CODBND" type="System.Int16" default="0" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Código do Tipo de Linha de Venda" name="TIPLIN" type="System.Byte" default="0" output="" null="false"/>
        <parameter input="true" apply="true" desc ="Modalidade de Cartão" name="MODCRT" type="System.Byte" default="0" output="" null="false"/>
      </parameters>
    </item>

    <item webtype="[HttpGet]" script="true" modifier="static" alias="A." sql="" processcode="" method="ICalculate" return="int" returnmode="2" procname="PRCADTARCALV2" desc ="Efetua o Cálculo de uma tarifa com base nos parâmetros fornecidos" returnvalue="0">
      <query>
        <![CDATA[
    DECLARE @VLRTAR FLOAT
    DECLARE @PCTTAR FLOAT
    DECLARE @FMTCOB TINYINT
    DECLARE @TARMAX FLOAT
    DECLARE @TARBAS FLOAT
    
    /* VARIAVEIS INTERNAS */
    DECLARE @EXPTAR FLOAT = 0
    DECLARE @NIDTAR INT =0
    DECLARE @EXTVLR FLOAT = 0
    DECLARE @NUMDYS INT =0
    
    IF(@TARNID=0)
        EXEC @NIDTAR = PRCADTARFNDTAR @USUPRO, @CODUSU, @CODTAR,@CODBND,@TIPLIN,@MODCRT
    ELSE
        SET @NIDTAR = @TARNID
    IF(@NIDTAR>0)
        BEGIN
        	SELECT @FMTCOB = FMTCOB, @VLRTAR = VLRTAR, @PCTTAR = PCTTAR, @TARBAS = TARBAS, @TARMAX = TARMAX
       			FROM TBCADTAR (nolock)
       		 WHERE NIDTAR = @NIDTAR
    
    		  /* VERIFICA SE EXISTE EXPANSAO DA TARIFA E TRAZ A NOVA TARIFA */
    		  EXEC @EXPTAR = PRCADTARGETEXPTAR @NIDTAR, @VLRBAS, @UPDUSU
    
    		  IF(@EXPTAR>0)
    			  BEGIN
    				  SELECT @VLRTAR = VLRTAR FROM TBCALTAR WHERE NIDCAL=@EXPTAR AND VLRTAR<>0
    			  END
    
       		/* TARIFA POR VALOR */
    		  IF( @FMTCOB = 1 )
    			  BEGIN
    				  SET @EXTVLR = @VLRTAR
    			  END
    
    		  /* TARIFA POR PERCENTUAL */
    		  IF( @FMTCOB = 2 )
    			  BEGIN
    				  SET @EXTVLR = Round(@VLRBAS * ( @VLRTAR / 100 ), 2)
    			END
    
    		  /* ANTECIPACAO */
    		  IF ( @FMTCOB = 3 )
    			  BEGIN
    				  SET @EXTVLR = Round(@VLRBAS * ( @VLRTAR / 100 ), 2)
    			  END
    
    		  /* PARCELAMENTO */
    		  IF ( @FMTCOB = 4 )
    			  BEGIN
    				  SET @NUMDYS = Datediff(dd, @DATVL1, @DATVL2);
    				  SET @EXTVLR = Round(@VLRBAS * ( ( @VLRTAR / 100 ) / 30 ) * @NUMDYS, 2);
    			  END
    
    		  /* RAV */
    		  IF ( @FMTCOB = 5 )
    			  BEGIN
    				  SET @EXTVLR = Round(@VLRBAS * ( ( @VLRTAR * @CURPCL ) / 100 ), 2);
    			  END
    
    		  /* % + VALOR */
    		  IF ( @FMTCOB = 6 )
    			  BEGIN
    				  SET @EXTVLR = Round(@VLRBAS * ( @PCTTAR / 100 ), 2);
    				  SET @EXTVLR = @EXTVLR + @TARBAS;
    			  END
    
    
    			IF(@FMTCOB IN (2, 3))
    			  BEGIN
    				  IF ( @TARMAX > 0 )
    					  BEGIN
    						  IF ( @EXTVLR > @TARMAX )
    							  BEGIN
    								  SET @EXTVLR = @TARMAX;
    							  END
    					  END
    
    				  IF ( @TARBAS > 0 )
    					  BEGIN
    						  IF ( @EXTVLR < @TARBAS )
    							  BEGIN
    								  SET @EXTVLR = @TARBAS;
    							  END
     					  END
    			END
    	END
    
    
    	IF(@EXTVLR<>0)
    		BEGIN
    			UPDATE TBCALTAR
    				 SET EXTVLR = @EXTVLR, NIDTAR = @NIDTAR, NUMDYS = @NUMDYS, DATVL1 = @DATVL1, DATVL2 = @DATVL2
       		 WHERE NIDCAL = @EXPTAR
    		END
    RETURN @EXPTAR
        
          ]]>
      </query>
      <parameters>
        <parameter input="true" apply="false" desc ="Código do Gestor" name="USUPRO" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Código da Tarifa" name="CODTAR" type="System.Int16" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Valor Base" name="VLRBAS" type="System.Decimal" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Número de Parcelas" name="NUMPCL" type="System.Byte" default="1" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Parcela Atual" name="CURPCL" type="System.Byte" default="1" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Data de Validação 1" name="DATVL1" sysnull="true" type="System.DateTime" default="null" output="" null="true"/>
        <parameter input="true" apply="false" desc ="Data de Validação 2" name="DATVL2" sysnull="true" type="System.DateTime" default="null" output="" null="true"/>
        <parameter input="true" apply="false" desc ="Marcar Livre como Gestor Padrao" name="FINLIV"  type="System.Boolean" default="false" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Código da Bandeira" name="CODBND" type="System.Int16" default="0" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Código do tipo de linha" name="TIPLIN" type="System.Byte" default="0" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Modalidade de Cartão" name="MODCRT" type="System.Byte" default="0" output="" null="false"/>
        <parameter input="true" apply="false" desc ="ID do Registro de Tarifacao" name="TARNID" type="System.Int32" default="0" output="" null="false"/>
      </parameters>
    </item>
    <!-- Mensalidades -->

    <item webtype="[HttpPost]" script="true" modifier="static" alias="A." sql="" method="CreateMonthlyCard" return="int" returnmode="2" procname="PRREGMENCRTMENCRT"  desc="Verifica se o cartão já foi alocado para um portador" remarks ="Calcula as mensalidades do Cartão de acordo com a data de vigência do cartão" returnvalue="0">
      <query>
        <![CDATA[
DECLARE @USUPRO INT
DECLARE @ASSUSU INT
DECLARE @USUMEN INT 
DECLARE @DATATV DATETIME =NULL
DECLARE @DATVCT DATETIME =NULL
DECLARE @VALCRT VARCHAR(10) 
DECLARE @APLMEN BIT = 0
DECLARE @VLRMEN MONEY =0
DECLARE @CODUSU INT = 0;
DECLARE @USRREF INT = 0;
DECLARE @APLM1 BIT = 0
DECLARE @VLRM1 MONEY =0
DECLARE @APLM2 BIT = 0
DECLARE @VLRM2 MONEY =0
DECLARE @RETURN_VALUE INT = 0  /* NUMERO DE REGISTROS ADICIONADOS */
    
    
   	SELECT @USUPRO = USUPRO 
	      ,@CODUSU = CASE WHEN (USUMEN=0) THEN ASSUSU ELSE USUMEN END
   		  ,@USRREF = ASSUSU
		  ,@VALCRT = VALCRT
		  ,@DATVCT = dbo.ValidadeCartao(@VALCRT) 
		  ,@DATATV = DATATV 
   	  FROM TBREGCRT (NOLOCK) 
     WHERE CODCRT = @CODCRT AND STACRT=109 AND CALMEN=1 

    IF(@@ROWCOUNT =0 )
		SET @RETURN_VALUE=-2;
    	 
	IF(@DATATV IS NOT NULL AND @RETURN_VALUE =0)
		BEGIN
   
			/* Valor da Mensalidade Gestor */
   			SELECT @APLM1 = ISNULL(APLMEN,CAST(0 AS BIT)), @VLRM1 =ISNULL(VLRMEN,0) FROM TBUSUPRO (NOLOCK) WHERE USUPRO=@USUPRO
			/* Valor da Mensalidade Usuário */
   			SELECT @APLM2 = ISNULL(APLMEN,CAST(0 AS BIT)), @VLRM2 =ISNULL(VLRMEN,0) FROM TBUSUCFG (NOLOCK) WHERE USUCFG=@USRREF AND NIVCFG=2


			SET @APLMEN = @APLM2;
   			SET @VLRMEN = @VLRM2
   		    IF(@APLMEN=0)
   				  BEGIN
   					  SET @APLMEN = @APLM1;
   					  SET @VLRMEN = @VLRM1
   				  END
   			IF(@APLMEN=1 AND @VLRMEN>0)
   				BEGIN
				    DECLARE @LOTINS INT = 0
					EXEC @LOTINS = PRGETNXTNUM 13
   					INSERT INTO 
					  TBREGMEN (
					            STAMEN,
								NUMMES,
								NUMANO,
								CODUSU,
								USRREF,
								DATMEN,
								DATVCT,
								TIPMEN,
								NUMPCL,
								SIGOPE,
								USUPRO,
								VLRCOB,
								CODREF,
								LOTINS
   					)
   					SELECT 261 
   						  ,MONTH(VALDAT)
   						  ,YEAR(VALDAT)
   						  ,@CODUSU
   						  ,@USRREF
   						  ,VALDAT 
   						  ,VALDAT
   						  ,1
   						  ,id
						  ,1
   						  ,@USUPRO
   						  ,@VLRMEN
  						  ,@CODCRT
						  ,@LOTINS
   	 				  FROM dbo.ExpandPeriod(@DATATV, @DATVCT)
   					  WHERE  '01' + RIGHT('00' + CAST(MONTH(VALDAT) AS VARCHAR),2)+
   							 RIGHT('0000' + CAST(YEAR(VALDAT) AS VARCHAR),4) +
							 RIGHT('00000000' + CAST(@CODCRT AS VARCHAR),2) + '1'  NOT IN (SELECT  
							 RIGHT('00' + CAST(TIPMEN AS VARCHAR),2)+
							 RIGHT('00' + CAST(NUMMES AS VARCHAR),2)+
							 RIGHT('0000' + CAST(NUMANO AS VARCHAR),4) +
							 RIGHT('00000000' + CAST(CODREF AS VARCHAR),2)+
   							 CAST(MODREG AS VARCHAR(1))  FROM TBREGMEN)
					  SET @RETURN_VALUE = @@ROWCOUNT
   
   					  IF(@RETURN_VALUE>0)
   						BEGIN
   							UPDATE TBREGCRT SET CALMEN= 2, DATUPD=GETDATE(), UPDUSU=@UPDUSU WHERE CODCRT=@CODCRT
						    DECLARE @DSCOCO VARCHAR(100)
							SET @DSCOCO = N'[' + CONVERT(VARCHAR,@RETURN_VALUE) + '] MENSALIDADES DE ' + FORMAT(@DATATV, 'dd/MM/yyyy') + ' ATE ' + FORMAT(@DATVCT, 'dd/MM/yyyy')    
							INSERT INTO TBAUDDAT ( UPDUSU,    AUDDAT, AUDKEY, AUDIDR,   AUDIMS,                AUDOBJ, AUDSRC,  AUDCHG) 
                                          VALUES (@UPDUSU, GETDATE(),     14, @CODCRT,       0, OBJECT_NAME(@@PROCID),     '', @DSCOCO);        

   						END
   				END
			ELSE
			    SET @RETURN_VALUE=-3;
		END
	ELSE
	    BEGIN
				IF(@RETURN_VALUE=0)
					SET @RETURN_VALUE=-1;
		END
RETURN @RETURN_VALUE
          ]]>
      </query>
      <parameters>
        <parameter input="true" apply="false" desc ="ID do Cartão" name="CODCRT" type="System.Int32" size="16" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32" size="16" default="" output="" null="false"/>
      </parameters>
      <returns>
        <return value="1" message="O CARTAO JA ESTA ALOCADO PARA UM PORTADOR" error=""/>
        <return value="0" message="NAO FOI POSSIVEL LOCALIZAR O CARTAO" error="CARDNOTFOUND"/>
        <return value="-1" message="O CARTAO NAO POSSUI ALOCACAO" error=""/>
      </returns>
    </item>

    /* Permissoes de Acesso */

    <item script="true" modifier="static" alias="A." sql="" method="GetUserAccess" return="int" returnmode="2" procname="PRSYSGETUSRACE" desc ="Verificar se existe o acesso de um usuário para uma rotina específica" returnvalue="0">
      <query>
        <![CDATA[
DECLARE @RETURN_VALUE INT        
SELECT @RETURN_VALUE = COUNT(*) FROM TBSYSUXG (NOLOCK) A
INNER JOIN TBSYSGRP (NOLOCK) B ON (B.SYSGRP =  A.SYSGRP) 
INNER JOIN TBSYSFXG (NOLOCK) C ON (C.SYSGRP =  B.SYSGRP) 
INNER JOIN TBSYSFUN (NOLOCK) D ON (D.SYSFUN = C.SYSFUN) 
WHERE A.STAREC=1 AND B.STAREC IN(1,2) AND C.STAREC=1 AND D.STAREC=1
AND A.CODUSU=@CODUSU 
AND D.SYSTBL=@SYSTBL
AND D.SYSROL=@SYSROL
IF(@RETURN_VALUE IS NULL)
   SET @RETURN_VALUE = 0
RETURN @RETURN_VALUE   
          ]]>
      </query>
      <parameters>
        <parameter input="true" apply="false" desc ="ID de identificação da tabela de aplicação da funcionalidade" name="SYSTBL" type="System.Int16" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="ID de identificação da regra de aplicação" name="SYSROL" type="System.Int16" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
      </parameters>
    </item>

    <item script="false" modifier="static" alias="A." sql="" method="TariffValue" type="internal" return="Tariffed" procname="" desc ="Efetua o calculo de uma tarifa com base no codigo da tarifa fornecido" returnvalue="0" remarks="">
      <body>
        int _NIDCAL = ICalculate(pUSUPRO, pUSUCED,pCODTAR,pVLRBOL,pUPDUSU,1,1,null,null,true,0,0,0,0);
        if(_NIDCAL>0)
        return ThunderFire.Business.Lists.GetTariffed(_NIDCAL);
        return new Tariffed();
      </body>
      <query></query>
      <parameters>
        <parameter input="true" apply="false" desc ="Código do Gestor" name="USUPRO" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Usuário Cedente" name="USUCED" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Código da Tarifa" name="CODTAR" type="System.Int16" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Valor do Boleto" name="VLRBOL" type="System.Decimal" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
      </parameters>
    </item>


    <item webtype="[HttpGet]" script="true" modifier="static" alias="A." sql="" method="GetNextNumber" return="int" returnmode="2" procname="PRGETNXTNUM" desc ="Obtêm o proximo numero de uma transacao especificada pelo codigo de tabelamento interno" returnvalue="0">
      <query>
        <![CDATA[
DECLARE @RETURN_VALUE INT =0
IF( NOT EXISTS(SELECT 1 FROM TBNXTNUM WHERE CODTBI = @CODTBI))
		BEGIN
			INSERT INTO TBNXTNUM (CODTBI, NUMNXT) VALUES(@CODTBI, 1)
			SET @RETURN_VALUE=1;
		END
ELSE 
	    SELECT @RETURN_VALUE = ISNULL(NUMNXT,0) FROM TBNXTNUM (NOLOCK)  WHERE CODTBI = @CODTBI
      
	UPDATE TBNXTNUM WITH (UPDLOCK) SET NUMNXT = (@RETURN_VALUE+1) WHERE CODTBI = @CODTBI
	RETURN @RETURN_VALUE;
          ]]>
      </query>
      <parameters>
        <parameter input="true" apply="false" desc ="Código da Tabela Interna" name="CODTBI" type="int" default="" output="" null="false"/>
      </parameters>
    </item>

    <item webtype="[HttpGet]" script="false" modifier="static" alias="A." sql="" method="GetNextTransaction" return="String" returnmode="2" procname="" desc ="Obtêm o proximo numero de uma transacao especificada pelo codigo de tabelamento interno e o prefixo de aglutinação" returnvalue="0">
      <body>
        <![CDATA[
            int n = GetNextNumber(pcodtbi);
            return pprefix.ToString("D3") + n.ToString("D8");
        ]]>
      </body>
      <query></query>
      <parameters>
        <parameter input="true" apply="false" desc ="Código da Tabela Interna" name="Prefix" type="System.String" size="3" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Código da Tabela Interna" name="CODTBI" type="int" default="" output="" null="false"/>
      </parameters>
    </item>

    <item webtype="[HttpGet]" script="true" modifier="static" alias="A." sql="" method="GetCurrentAccountBalance" return="String" returnmode="2" procname="PRREGCCRSLDACT" desc ="Obtêm o saldo da conta conforme o indicador informado" returnvalue="0">
      <query>
        <![CDATA[
DECLARE @RETURN_VALUE MONEY=0        
SELECT @RETURN_VALUE = COALESCE(SUM((VLRMOV*SIGOPE)),0)
  FROM TBREGCCR A (NOLOCK)
 WHERE (A.STAREC IN (1,2))
   AND (A.TIPVAL = 1)
   AND (A.REGHAB = 1)
   AND (A.INDLCT = @INDLCT)
   AND (A.NIDCTA = @NIDCTA)
 GROUP BY A.NIDCTA
RETURN ISNULL(@RETURN_VALUE,0);
        ]]>
      </query>
      <query></query>
      <parameters>
        <parameter input="true" apply="false" desc ="Indicador de Lançamento" name="INDLCT" type="System.Int16" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Id da Conta" name="NIDCTA" type="int" default="" output="" null="false"/>
      </parameters>
    </item>

    <item webtype="[HttpGet]" script="true" modifier="static" alias="A." sql="" method="GetVirtualAccount" return="int" returnmode="2" procname="PRGETCTAVRT" desc ="Obtêm o ID da Conta Virtual" returnvalue="0">
      <query>
        <![CDATA[
    DECLARE @RETURN_VALUE INT = 0
    
    IF(EXISTS (SELECT 1 FROM TBCADCTA (NOLOCK)
                WHERE CODUSU = @CODUSU
                  AND STAREC = 1
                  AND ORGCTA = @ORGCTA
                  AND TIPCTA = @TIPCTA
                  AND STACTA = @STACTA))
        BEGIN
            SELECT @RETURN_VALUE = NIDCTA  FROM TBCADCTA (NOLOCK)
             WHERE CODUSU = @CODUSU
               AND STAREC = 1
               AND ORGCTA = @ORGCTA
               AND TIPCTA = @TIPCTA
               AND STACTA = @STACTA
        END
    ELSE
        BEGIN
          SELECT @RETURN_VALUE = NIDCTA  FROM TBCADCTA (NOLOCK)
           WHERE CODUSU = @CODUSU
             AND STAREC = 1
             AND ORGCTA = 1
             AND TIPCTA = @TIPCTA
             AND STACTA = @STACTA
        END
    RETURN ISNULL(@RETURN_VALUE,0)
        ]]>
      </query>
      <query></query>
      <parameters>
        <parameter input="true" apply="false" desc ="Código do Usuário" name="CODUSU" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Tipo de Conta" name="TIPCTA" type="System.Byte" default="1" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Origem da Conta" name="ORGCTA" type="System.Byte" default="1" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Status da Conta" name="STACTA" type="System.Int16" default="250" output="" null="false"/>
      </parameters>
    </item>
    <item webtype="[HttpGet]" script="true" modifier="static" alias="A." sql="" method="GetCardInformation" return="int" returnmode="2" procname="PRGETINFCRT" desc ="Obtêm informações específicas do cartão com status 103, 109" remarks="1 -Usuário Associado@2 - ID da Cont Virtual Vinculada@3 - Gestor do Cartão" returnvalue="0">
      <query>
        <![CDATA[
 DECLARE @RETURN_VALUE INT = 0
    
    IF(@GETMOD=1)
       BEGIN
    			SELECT @RETURN_VALUE = ASSUSU  FROM TBREGCRT (NOLOCK)
    	 		 WHERE CODCRT = @CODCRT
    	           AND STAREC = 1
    	           AND STACRT IN (103,109)
    	  END
    
    IF(@GETMOD=2)
     	  BEGIN
    			SELECT @RETURN_VALUE = NIDCTA FROM TBREGCRT (NOLOCK)
    	 		 WHERE CODCRT = @CODCRT
    	           AND STAREC = 1
    	           AND STACRT IN (103,109)
    	  END
    
    IF(@GETMOD=3)
     	  BEGIN
    			SELECT @RETURN_VALUE = USUPRO FROM TBREGCRT (NOLOCK)
    	 		 WHERE CODCRT = @CODCRT
    	           AND STAREC = 1
    	           AND STACRT IN (103,109)
    	  END
    RETURN ISNULL(@RETURN_VALUE,0)        
        ]]>
      </query>
      <parameters>
        <parameter input="true" apply="false" desc ="Código do Cartão" name="CODCRT" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Tipo de Informação" name="GETMOD" type="System.Byte" default="" output="" null="false"/>
      </parameters>
    </item>

    <item webtype="[HttpPost]" script="true" modifier="static" alias="A." sql="" method="CreateTransferCode" return="int" returnmode="2" procname="PRREGCCRMAKTRF" desc ="Executa a gravação do Movimento de Transferencia em conta corrente  e retorna o número do lote gerado" remarks="" returnvalue="0">
      <query>
        <![CDATA[
DECLARE @RETURN_VALUE INT = 0        
DECLARE @LOTFIN INT = 0
DECLARE @NXTNUM INT=0
DECLARE @STAREC TINYINT = 0
DECLARE @CODTRM TINYINT = 0
DECLARE @CODTAR SMALLINT
DECLARE @TIPLCT SMALLINT
DECLARE @INDDEB SMALLINT
DECLARE @NIDCAL INT
DECLARE @USUPRO INT
DECLARE @CODUSU INT
DECLARE @CTADEB INT
DECLARE @VLRTAR MONEY=0
DECLARE @VLRMOV MONEY=0
DECLARE @OMTSLD CHAR(1) = 'S'
DECLARE @OMTTAR CHAR(1) = 'S'
DECLARE @NIDTRA VARCHAR(13)= N''    

IF(NOT EXISTS(SELECT 1 FROM TBREGMOV (NOLOCK) WHERE NIDTRF=@NIDTRF AND STAREC=1))
    SET @RETURN_VALUE=-1
    
IF(@RETURN_VALUE=0)
   BEGIN
      SELECT @OMTTAR = OMTTAR
            ,@OMTSLD = OMTSLD
            ,@STAREC = STAREC
            ,@VLRTAR = VLRTAR 
            ,@VLRMOV = VLRMOV
            ,@TIPLCT = TIPLCT            
            ,@USUPRO = USUPRO
            ,@INDDEB = INDDEB
            ,@CODUSU = CODUSU            
            ,@CTADEB = CTADEB
            ,@CODTRM = CODTRM            
        FROM TBREGMOV (NOLOCK) 
       WHERE NIDTRF=@NIDTRF 
   END       

IF(@RETURN_VALUE=0 AND @STAREC=1 AND @OMTTAR='N' AND @CODTRM=1)
   BEGIN
      SELECT @CODTAR = ISNULL(CODTAR,0) FROM TBTIPLCT (NOLOCK) WHERE TIPLCT =@TIPLCT AND STAREC=1
      IF(@CODTAR > 0)
           BEGIN
              EXEC @NIDCAL = PRCADTARCALV2 @USUPRO, @CODUSU, @CODTAR,@VLRMOV, @UPDUSU,1,1, NULL,NULL,1,0,0,0,0
              IF(@NIDCAL>0)
                  BEGIN
                     SELECT @VLRTAR = EXTVLR FROM TBCALTAR (NOLOCK) WHERE NIDCAL = @NIDCAL
                     UPDATE TBREGMOV SET VLRTAR =@VLRTAR, NIDCAL=@NIDCAL WHERE NIDTRF=@NIDTRF
                  END
           END
   END
IF(@RETURN_VALUE = 0 AND @STAREC=1 AND @OMTSLD='N' AND @CODTRM=1)
   BEGIN
      DECLARE @SLDDAT DATETIME
      SET @SLDDAT = GETDATE()   
      DECLARE @SLDVAL MONEY=0
      EXEC @SLDVAL = PRREGCCRSLDACT @INDDEB, @CTADEB
      IF(@SLDVAL <0)
         BEGIN
            UPDATE TBREGMOV 
               SET DATUPD= GETDATE()
                  ,DSCERR = DSCERR + CHAR(13) +  ' SALDO NEGATIVO EM ' + CONVERT(VARCHAR(25), getdate()) 
                  ,SLDDAT = @SLDDAT
                  ,SLDVAL = @SLDVAL                  
            WHERE NIDTRF = @NIDTRF
            SET @RETURN_VALUE=-2
         END
      ELSE
         IF((@SLDVAL - (@VLRMOV + @VLRTAR)) < 0)
             BEGIN
                UPDATE TBREGMOV 
                   SET DATUPD= GETDATE()
                      ,DSCERR = DSCERR + CHAR(13) +  ' SALDO INSUFICIENTE PARA DÉBITO DE ' + CONVERT(VARCHAR,(@VLRMOV + @VLRTAR))                      
                      ,SLDDAT = @SLDDAT
                      ,SLDVAL = @SLDVAL                  
                 WHERE NIDTRF = @NIDTRF
                SET @RETURN_VALUE=-3                
             END
   END


IF(@RETURN_VALUE = 0 AND @NIDTRF >0 AND @STAREC=1)
    BEGIN
       EXEC @NXTNUM = PRGETNXTNUM 6
       SET @NIDTRA = RIGHT('000' + CONVERT(VARCHAR(3),22), 3) + RIGHT('00000000' + CONVERT(VARCHAR(8),@NXTNUM), 8)
       EXEC @LOTFIN = PRGETNXTNUM 12

      INSERT INTO TBREGCCR( 
	         CODTRM
          ,SUBSYS
          ,NIDREF
          ,TIPLCT
          ,INDLCT
          ,CODMOE
          ,CODMOV
          ,USUPRO
          ,NIDCTA
          ,REFCTA
          ,NIDTRA
	        ,CANTRA
          ,DATMOV
          ,CODUSU
          ,REGHAB
          ,LOTFIN
          ,CODAPR
          ,ORGLCT
          ,CODCRT
          ,SIGOPE
          ,TIPLIN
          ,IDEPRE
          ,CNDBLO
          ,NUMPCL
          ,TIPVAL
          ,VLRMOV
          ,DSCMOV
          ,STAREG
          ,STAREC
          ,UPDUSU)

     SELECT 
        CODTRM
        ,SUBSYS
        ,NIDREF
        ,TIPLCT
        ,INDLCT
        ,CODMOE
        ,CODMOV
        ,USUPRO
        ,NIDCTA
        ,REFCTA
        ,NIDTRA
	      ,CANTRA
        ,DATMOV
        ,CODUSU
        ,REGHAB
        ,LOTFIN
        ,CODAPR
        ,ORGLCT
        ,CODCRT
        ,SIGOPE
        ,TIPLIN
        ,IDEPRE
        ,CNDBLO
        ,NUMPCL
        ,TIPVAL
        ,VLRMOV
        ,DSCMOV
        ,STAREG
        ,STAREC
        ,UPDUSU
    FROM (SELECT REGLIN=1
              ,CODTRM = A.CODTRM
              ,SUBSYS = A.SUBSYS
              ,NIDREF = A.NIDTRF
              ,TIPLCT = A.TIPLCT
              ,INDLCT = B.INDDEB
              ,CODMOE = A.CODMOE
              ,CODMOV = B.MOVDEB
              ,USUPRO = A.USUPRO
              ,NIDCTA = A.CTADEB
              ,REFCTA = A.CTACRD
              ,NIDTRA = @NIDTRA
	            ,CANTRA = A.CANTRA
              ,DATMOV = A.DATMOV
              ,CODUSU = A.CODUSU
              ,REGHAB = 1
              ,LOTFIN = @LOTFIN
              ,CODAPR= 0
              ,ORGLCT =1
              ,CODCRT= A.CODCRT
              ,SIGOPE = -1
              ,TIPLIN =0
              ,IDEPRE = B.IDEPRE
              ,CNDBLO =0
              ,NUMPCL=1
              ,TIPVAL=1
              ,VLRMOV= CASE
				            WHEN B.LINLCT = 1 THEN A.VLRMOV
				            WHEN B.LINLCT = 2 THEN A.VLRTAR
			              ELSE 0
			              END
              ,DSCMOV = C.DSCMOV
              ,STAREG = B.STAREG
              ,STAREC = 1
              ,UPDUSU = @UPDUSU
        FROM TBREGMOV (NOLOCK) A
        INNER JOIN TBCADLCT (NOLOCK) B ON (B.TIPLCT = A.TIPLCT AND B.CODTRM = A.CODTRM)
        INNER JOIN TBTIPMOV (NOLOCK) C ON (C.CODMOV = B.MOVDEB)
        WHERE A.NIDTRF=@NIDTRF AND A.STAREC= 1 AND B.INDDEB>0 AND B.MOVDEB>0
        UNION
          SELECT REGLIN=2
               ,CODTRM = A.CODTRM
               ,SUBSYS = A.SUBSYS
              ,NIDREF = A.NIDTRF
              ,TIPLCT = A.TIPLCT
              ,INDLCT = B.INDCRD
              ,CODMOE = A.CODMOE
              ,CODMOV = B.MOVCRD
              ,USUPRO = A.USUPRO
              ,NIDCTA = A.CTACRD
              ,REFCTA = A.CTADEB
              ,NIDTRA = @NIDTRA
	            ,CANTRA = A.CANTRA
              ,DATMOV = A.DATMOV
              ,CODUSU = A.CODUSU
              ,REGHAB = 1
              ,LOTFIN = @LOTFIN
              ,CODAPR= 0
              ,ORGLCT =1
              ,CODCRT= A.CODCRT
              ,SIGOPE = 1
              ,TIPLIN =0
              ,IDEPRE = B.IDEPRE
              ,CNDBLO =0
              ,NUMPCL=1
              ,TIPVAL=1
              ,VLRMOV= CASE
				          WHEN B.LINLCT = 1 THEN A.VLRMOV
				          WHEN B.LINLCT = 2 THEN A.VLRTAR
			           ELSE 0
			           END
              ,DSCMOV = C.DSCMOV
              ,STAREG = B.STAREG
              ,STAREC = 1
              ,UPDUSU = @UPDUSU
          FROM TBREGMOV (NOLOCK) A
          INNER JOIN TBCADLCT (NOLOCK) B ON (B.TIPLCT = A.TIPLCT AND B.CODTRM = A.CODTRM)
          INNER JOIN TBTIPMOV (NOLOCK) C ON (C.CODMOV = B.MOVCRD)
          WHERE A.NIDTRF=@NIDTRF AND A.STAREC=1 AND B.INDCRD>0 AND B.MOVCRD>0) A
          
          WHERE A.VLRMOV > 0
          
          IF(@@ROWCOUNT>0)
             BEGIN
                 UPDATE TBREGMOV 
                    SET CANTRA=NIDTRA
                       ,NIDTRA = @NIDTRA 
                       ,DATUPD = GETDATE()
                       ,UPDUSU = @UPDUSU
                       ,STAREC = 2
                  WHERE NIDTRF=@NIDTRF;
                  SET @RETURN_VALUE= @LOTFIN
             END
    END         
RETURN @RETURN_VALUE                 
      
        ]]>
      </query>
      <parameters>
        <parameter input="true" apply="false" desc ="ID do Registro de Movimento de Transferência" name="NIDTRF" type="System.Int32" default="" output="" null="false"/>
        <parameter input="true" apply="false" desc ="Usuário de Atualização" name="UPDUSU" type="System.Int32" default="" output="" null="false"/>
      </parameters>
      <returns>
        <return value="0" operator=">" message="LOTE REGISTRADO COM SUCESSO" error="OK"/>
        <return value="0" operator="==" message="NAO FOI POSSIVEL EFETUAR O REGISTRO DO LOTE" error="FAILALL"/>
        <return value="-1" message="MOVIMENTO NÃO EXISTE" error="RECORDNOTFOUND"/>
        <return value="-2" message="SALDO NEGATIVO" error="NEGATIVEBALANCE"/>
        <return value="-3" message="SALDO INSUFICIENTE" error="INSUFFICIENTFUNDS"/>
      </returns>
    </item>

  </actions>
</root>

